<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曾洁仪博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zengzoe.github.io/"/>
  <updated>2019-04-16T14:54:08.757Z</updated>
  <id>http://zengzoe.github.io/</id>
  
  <author>
    <name>Zeng Zoe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库递归查询：MySQL VS Sequelize</title>
    <link href="http://zengzoe.github.io/2019/04/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2%EF%BC%9AMySQL-VS-Sequelize/"/>
    <id>http://zengzoe.github.io/2019/04/12/数据库递归查询：MySQL-VS-Sequelize/</id>
    <published>2019-04-12T09:49:21.000Z</published>
    <updated>2019-04-16T14:54:08.757Z</updated>
    
    <content type="html"><![CDATA[<p><a href="#一、前言">一、前言</a><br><a href="#二、MySQL实现">二、MySQL实现</a><br><a href="#三、Sequqlize实现">三、Sequqlize实现</a><br><a href="#四、总结">四、总结</a><br><a href="#参考文档">参考文档</a></p><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>最近在做团队的排期系统改版时涉及到数据库的递归查询问题，有一个需求数据表，表中的需求数据以parentId为外键定义数据的继承关系，需求之间的关系呈现树状关系。需求数据表如下：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc needs;</span><br><span class="line">+----------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field    |<span class="built_in"> Type </span>       | <span class="literal">Null</span> | Key |<span class="built_in"> Default </span>| Extra          |</span><br><span class="line">+----------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id       | int(11)     | <span class="literal">NO</span>   | PRI | <span class="literal">NULL</span>    | auto_increment |</span><br><span class="line">| name     | varchar(45) | <span class="literal">YES</span>  |     | <span class="literal">NULL</span>    |                |</span><br><span class="line">| parentId | int(11)     | <span class="literal">YES</span>  |     | <span class="literal">NULL</span>    |                |</span><br><span class="line">+----------+-------------+------+-----+---------+----------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="builtin-name">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><p>目前有这样的需求需要根据某个根需求，查找出全部的层级的子需求。</p><p>例如A需求的树状结构如下：</p><p><img src="/2019/04/12/数据库递归查询：MySQL-VS-Sequelize/needTree.jpg" alt="2019-04-12-数据库递归查询"></p><p>数据如下：<br><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">mysql&gt; select <span class="symbol">*</span> from needs;</span><br><span class="line">+----+------+----------+</span><br><span class="line">|<span class="string"> id </span>|<span class="string"> name </span>|<span class="string"> parentId </span>|</span><br><span class="line">+----+------+----------+</span><br><span class="line">|<span class="string">  1 </span>|<span class="string"> A    </span>|<span class="string">     NULL </span>|</span><br><span class="line">|<span class="string">  2 </span>|<span class="string"> B    </span>|<span class="string">        1 </span>|</span><br><span class="line">|<span class="string">  3 </span>|<span class="string"> C    </span>|<span class="string">        1 </span>|</span><br><span class="line">|<span class="string">  4 </span>|<span class="string"> D    </span>|<span class="string">        2 </span>|</span><br><span class="line">|<span class="string">  5 </span>|<span class="string"> E    </span>|<span class="string">        2 </span>|</span><br><span class="line">|<span class="string">  6 </span>|<span class="string"> F    </span>|<span class="string">        3 </span>|</span><br><span class="line">|<span class="string">  7 </span>|<span class="string"> G    </span>|<span class="string">        3 </span>|</span><br><span class="line">|<span class="string">  8 </span>|<span class="string"> H    </span>|<span class="string">        5 </span>|</span><br><span class="line">|<span class="string">  9 </span>|<span class="string"> I    </span>|<span class="string">        5 </span>|</span><br><span class="line">|<span class="string"> 10 </span>|<span class="string"> J    </span>|<span class="string">        8 </span>|</span><br><span class="line">+----+------+----------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p><br></p><h2 id="二、MySQL实现"><a href="#二、MySQL实现" class="headerlink" title="二、MySQL实现"></a>二、MySQL实现</h2><h3 id="1-自定义函数实现"><a href="#1-自定义函数实现" class="headerlink" title="1.自定义函数实现"></a>1.自定义函数实现</h3><p>实现思路：首先根据子级<code>parenId</code>等于父级<code>id</code>的关系循环找出所有的层级关系数据的id，再拉出所有这些id的数据。</p><p><strong>（1）函数声明</strong></p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">DELIMITER <span class="comment">// </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">FUNCTION</span> `<span class="title">getParentList</span>`<span class="params">(rootId INT)</span></span></span><br><span class="line"><span class="function">    <span class="title">RETURNS</span> <span class="title">char</span><span class="params">(400)</span></span></span><br><span class="line"><span class="function">    <span class="title">BEGIN</span></span></span><br><span class="line"><span class="function">      <span class="title">DECLARE</span> <span class="title">fid</span> <span class="title">int</span> <span class="title">default</span> 1;</span></span><br><span class="line">      DECLARE str char(<span class="number">44</span>) <span class="keyword">default</span> rootId;</span><br><span class="line">      <span class="keyword">WHILE</span> rootId &gt; <span class="number">0</span> <span class="keyword">DO</span></span><br><span class="line">      <span class="keyword">SET</span> fid=(<span class="keyword">SELECT</span> parentId <span class="keyword">FROM</span> needs <span class="keyword">WHERE</span> id=rootId);</span><br><span class="line">     <span class="keyword">IF</span> fid &gt; <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">     <span class="keyword">SET</span> str=<span class="keyword">CONCAT</span>(str , <span class="string">','</span> , fid);</span><br><span class="line">     <span class="keyword">SET</span> rootId=fid;</span><br><span class="line">     <span class="keyword">ELSE</span> <span class="keyword">SET</span> rootId=fid;</span><br><span class="line">     <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">     <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">  return  str;</span><br><span class="line">  <span class="keyword">END</span> <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>语法解释：</p><p><code>DELIMITER</code>：定义MySQL的分隔符为<code>//</code>，默认分隔符是<code>;</code>，为了防止函数内使用<code>;</code>中断函数</p><p><code>CREATE FUNCTION 函数名(参数) RETURNS 返回值类型</code>：自定义函数</p><p><code>DECLARE</code>：声明变量</p><p><code>WHILE 条件 DO 循环体</code>：while循环</p><p><code>IF 条件 THEN 内容体 ELSE 内容体</code>：if判断</p><p><code>SET 变量=值</code>：存储值</p><p><code>CONCAT(str1,str2,...)</code>：函数，用于将多个字符串连接成一个字符串</p><p><br></p><p><strong>（2）函数调用</strong></p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; DELIMITER;</span><br><span class="line"><span class="code">    -&gt; SELECT getNeedChild(1);</span></span><br><span class="line"><span class="code">+-----------------------+</span></span><br><span class="line">| getNeedChild(1)       |</span><br><span class="line"><span class="code">+-----------------------+</span></span><br><span class="line">| ,1,2,3,4,5,6,7,8,9,10 |</span><br><span class="line"><span class="code">+-----------------------+</span></span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>语法解释：</p><p><code>DELIMITER;</code>：由于之前执行了<code>DELIMITER //</code>修改了分隔符，因此需要重新调用修改分隔符为<code>;</code></p><p><code>SELECT 函数()</code>：调用函数并搜索出结果</p><p><br></p><p><strong>（3）结合FIND_IN_SET，拉取出所有的子需求</strong></p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT <span class="symbol">*</span> FROM needs WHERE FIND_IN_SET(ID , getNeedChild(1));</span><br><span class="line">+----+------+----------+</span><br><span class="line">|<span class="string"> id </span>|<span class="string"> name </span>|<span class="string"> parentId </span>|</span><br><span class="line">+----+------+----------+</span><br><span class="line">|<span class="string">  1 </span>|<span class="string"> A    </span>|<span class="string">     NULL </span>|</span><br><span class="line">|<span class="string">  2 </span>|<span class="string"> B    </span>|<span class="string">        1 </span>|</span><br><span class="line">|<span class="string">  3 </span>|<span class="string"> C    </span>|<span class="string">        1 </span>|</span><br><span class="line">|<span class="string">  4 </span>|<span class="string"> D    </span>|<span class="string">        2 </span>|</span><br><span class="line">|<span class="string">  5 </span>|<span class="string"> E    </span>|<span class="string">        2 </span>|</span><br><span class="line">|<span class="string">  6 </span>|<span class="string"> F    </span>|<span class="string">        3 </span>|</span><br><span class="line">|<span class="string">  7 </span>|<span class="string"> G    </span>|<span class="string">        3 </span>|</span><br><span class="line">|<span class="string">  8 </span>|<span class="string"> H    </span>|<span class="string">        5 </span>|</span><br><span class="line">|<span class="string">  9 </span>|<span class="string"> I    </span>|<span class="string">        5 </span>|</span><br><span class="line">|<span class="string"> 10 </span>|<span class="string"> J    </span>|<span class="string">        8 </span>|</span><br><span class="line">+----+------+----------+</span><br><span class="line">10 rows in set (0.03 sec)</span><br></pre></td></tr></table></figure><p><code>FIND_IN_SET(str,strlist)</code>：函数，查询字段<code>strlist</code>中包含<code>str</code>的结果，<code>strlist</code>中以<code>,</code>分割各项</p><p><br></p><h3 id="2-递归CTE实现"><a href="#2-递归CTE实现" class="headerlink" title="2.递归CTE实现"></a>2.递归CTE实现</h3><p><strong>（1）递归CTE介绍</strong></p><p>CTE（common table expression）为公共表表达式，可以对定义的表达式进行自引用查询。在MySQL 8.0版以上才支持。</p><p>递归CTE由三个部分组成：初始查询部分、递归查询部分、终止递归条件。</p><p>语法如下：</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> RECURSIVE cte_name AS(</span><br><span class="line">    initial_query       <span class="comment">-- 初始查询部分</span></span><br><span class="line">    UNION <span class="keyword">ALL</span>           <span class="comment">-- 递归查询与初始查询部分连接查询</span></span><br><span class="line">    recursive_query     <span class="comment">-- 递归查询部分</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> * FROM cte_name</span><br></pre></td></tr></table></figure><p>更多CTE介绍可以查看文档：<a href="http://www.mysqltutorial.org/mysql-recursive-cte/" target="_blank" rel="noopener">A Definitive Guide To MySQL Recursive CTE</a></p><p><br></p><p><strong>（2）递归CTE实现</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WITH RECURSIVE needsTree AS</span><br><span class="line">( <span class="keyword">SELECT</span> <span class="keyword">id</span>,</span><br><span class="line">         <span class="keyword">name</span>,</span><br><span class="line">         parentId,</span><br><span class="line">         <span class="number">1</span> lvl</span><br><span class="line">    <span class="keyword">FROM</span> needs</span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span> </span><br><span class="line">  <span class="keyword">UNION</span> ALL</span><br><span class="line">  <span class="keyword">SELECT</span> nd.id,</span><br><span class="line">         nd.name,</span><br><span class="line">         nd.parentId,</span><br><span class="line">         lvl+<span class="number">1</span></span><br><span class="line">    <span class="keyword">FROM</span> needs <span class="keyword">AS</span> nd</span><br><span class="line">    <span class="keyword">JOIN</span> needsTree <span class="keyword">AS</span> nt <span class="keyword">ON</span> nt.id = nd.parentId </span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> needsTree <span class="keyword">ORDER</span> <span class="keyword">BY</span> lvl;</span><br></pre></td></tr></table></figure><p>实现解释：</p><p>初始查询部分：找出一级需求</p><p>递归查询部分：找出子级需求</p><p>终止递归条件：子级的<code>parentId</code>等于父级的<code>id</code></p><p>查询结果：</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+------+------+----------+------+</span><br><span class="line">|<span class="string"> id   </span>|<span class="string"> name </span>|<span class="string"> parentId </span>|<span class="string"> lvl  </span>|</span><br><span class="line">+------+------+----------+------+</span><br><span class="line">|<span class="string">    1 </span>|<span class="string"> A    </span>|<span class="string"> NULL     </span>|<span class="string">    1 </span>|</span><br><span class="line">|<span class="string">    2 </span>|<span class="string"> B    </span>|<span class="string"> 1        </span>|<span class="string">    2 </span>|</span><br><span class="line">|<span class="string">    3 </span>|<span class="string"> C    </span>|<span class="string"> 1        </span>|<span class="string">    2 </span>|</span><br><span class="line">|<span class="string">    6 </span>|<span class="string"> F    </span>|<span class="string"> 3        </span>|<span class="string">    3 </span>|</span><br><span class="line">|<span class="string">    7 </span>|<span class="string"> G    </span>|<span class="string"> 3        </span>|<span class="string">    3 </span>|</span><br><span class="line">|<span class="string">    4 </span>|<span class="string"> D    </span>|<span class="string"> 2        </span>|<span class="string">    3 </span>|</span><br><span class="line">|<span class="string">    5 </span>|<span class="string"> E    </span>|<span class="string"> 2        </span>|<span class="string">    3 </span>|</span><br><span class="line">|<span class="string">    8 </span>|<span class="string"> H    </span>|<span class="string"> 5        </span>|<span class="string">    4 </span>|</span><br><span class="line">|<span class="string">    9 </span>|<span class="string"> I    </span>|<span class="string"> 5        </span>|<span class="string">    4 </span>|</span><br><span class="line">|<span class="string">   10 </span>|<span class="string"> J    </span>|<span class="string"> 8        </span>|<span class="string">    5 </span>|</span><br><span class="line">+------+------+----------+------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="三、Sequqlize实现"><a href="#三、Sequqlize实现" class="headerlink" title="三、Sequqlize实现"></a>三、Sequqlize实现</h2><h3 id="1-Sequelize介绍"><a href="#1-Sequelize介绍" class="headerlink" title="1.Sequelize介绍"></a>1.Sequelize介绍</h3><p>Sequelize是Node.js的ORM框架，能够把关系数据库的表结构映射到对象上，支持数据库Postgres、MySQL、 MariaDB、 SQLite and Microsoft SQL Server。在这次的排期系统后台开发中，我选择了该框架来操作数据库，可以更方便地处理数据。</p><p>更多Sequelize介绍可以查看官方文档：<a href="http://docs.sequelizejs.com/" target="_blank" rel="noopener">Sequelize官方文档</a>。</p><h3 id="2-递归实现"><a href="#2-递归实现" class="headerlink" title="2.递归实现"></a>2.递归实现</h3><p><strong>1.连接mysql数据库</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">'schedule'</span> , <span class="string">'root'</span> , <span class="string">'12345678'</span> , &#123;</span><br><span class="line">    host : <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    dialect : <span class="string">'mysql'</span>,</span><br><span class="line">    port : <span class="string">'3306'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    sequelize</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法解释：</p><p><code>new Sequelize(databse , username , password , options)</code>：实例化Sequelize，连接数据库</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="keyword">options</span> = &#123;</span><br><span class="line">    host,   <span class="comment">//数据库主机</span></span><br><span class="line">    dialect,    <span class="comment">//数据库</span></span><br><span class="line">    port        <span class="comment">//数据库端口号，默认为3306</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>2.定义数据表的schema模型表</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">module.exports</span> <span class="string">=</span> <span class="string">function(sequelize,</span> <span class="string">DataTypes)</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">return</span> <span class="string">sequelize.define('needs',</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    id:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">DataTypes.INTEGER(11),</span></span><br><span class="line"><span class="attr">      allowNull:</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line"><span class="attr">      primaryKey:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">      autoIncrement:</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">DataTypes.STRING(45),</span></span><br><span class="line"><span class="attr">      allowNull:</span> <span class="literal">false</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">    parentId:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">DataTypes.INTEGER(11),</span></span><br><span class="line"><span class="attr">      allowNull:</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">  <span class="string">&#125;,</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    tableName:</span> <span class="string">'needs'</span><span class="string">,</span></span><br><span class="line"><span class="attr">    timestamps:</span> <span class="literal">false</span></span><br><span class="line">  <span class="string">&#125;);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure><p>语法解释：</p><p><code>sequelize.define(modelName , attribute , options)</code>：定义数据表的模型，相当于定义数据表。</p><p><code>attribute</code>：一个对象，为数据表对应的列项，<code>key</code>值为对应的列项名，<code>value</code>为对应列项的定义，比如数据类型、是否主键、是否必需等</p><p><code>options</code>：数据表的一些配置。比如对应的数据表名<code>tableName</code>、是否需要时间戳<code>timestamp</code>等</p><p><br></p><p>3.导入数据表模型</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; sequelize &#125; = require(<span class="string">'../config/db'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入数据表模型</span></span><br><span class="line"><span class="keyword">const</span> Needs = sequelize.<span class="keyword">import</span>(<span class="string">'./needs.js'</span>);</span><br></pre></td></tr></table></figure><p>语法解释：</p><p><code>sequelize.import(path)</code>：导入数据表模型</p><p><br></p><p>4.递归查询</p><p>实现思路：跟CTE实现思路相似，先找出找出一级需求，再递归找出子需求。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeedModule</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(id)&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> getNeedsTree()&#123;</span><br><span class="line">        <span class="keyword">let</span> rootNeeds = <span class="keyword">await</span> Needs.findAll(&#123;</span><br><span class="line">            where : &#123; </span><br><span class="line">                id : <span class="keyword">this</span>.id </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        rootNeeds = <span class="keyword">await</span> <span class="keyword">this</span>.getChildNeeds(rootNeeds);</span><br><span class="line">        <span class="keyword">return</span> rootNeeds;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> getChildNeeds(rootNeeds)&#123;</span><br><span class="line">        <span class="keyword">let</span> expendPromise = [];</span><br><span class="line">        rootNeeds.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            expendPromise.push(Needs.findAll(&#123;</span><br><span class="line">                where : &#123;</span><br><span class="line">                    parentId : item.id</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;))</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">let</span> child = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(expendPromise);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> [idx , item] <span class="keyword">of</span> child.entries())&#123;</span><br><span class="line">            <span class="keyword">if</span>(item.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                item = <span class="keyword">await</span> getChildNeeds(item);</span><br><span class="line">            &#125;</span><br><span class="line">            rootNeeds[idx].child = item;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rootNeeds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法解释：</p><p><code>findALL(options)</code>：查询多条数据</p><p><code>options</code>：查询配置</p><ul><li><code>options.where</code>：查询条件</li></ul><p>查询结果如下：</p><p><img src="/2019/04/12/数据库递归查询：MySQL-VS-Sequelize/sequelizeResult.jpg" alt="2019-04-12-数据库递归查询"></p><p>从搜索结果可以看出，使用Sequelize查询可以更好的给层级数据划分层级存储。</p><p><br></p><h3 id="3-nested属性实现"><a href="#3-nested属性实现" class="headerlink" title="3.nested属性实现"></a>3.nested属性实现</h3><p>Sequelize的<code>findAll</code>方法中的<code>nested</code>属性可以根据连接关系找出继承关系的数据。</p><p><strong>1.定义表关系</strong></p><p>由于需要需求表进行自连接查询，因此需要先定义表关系。需求表自身关系以父需求为主查询是一对多关系，因此使用<code>hasMany</code>定义关系。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Needs</span><span class="selector-class">.hasMany</span>(</span><br><span class="line">    <span class="selector-tag">Needs</span>, </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">as</span>: <span class="string">'child'</span>, </span><br><span class="line">        foreignKey: <span class="string">'parentId'</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>语法解释：</p><p><code>sourceModel.hasMany(targetModel, options)</code>：定义源模型和目标模型的表是一对多关系，外键会添加到目标模型中</p><p><code>options</code>：定义表关系的一些属性。如<code>as</code>定义连接查询时，目标模型的别名。<code>foreignKey</code>为外键名。</p><p><strong>2.自连接查询</strong></p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">async</span> <span class="selector-tag">getNeedTree</span>(id)&#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">await</span> <span class="selector-tag">Needs</span><span class="selector-class">.findAll</span>(&#123;</span><br><span class="line">        <span class="attribute">where </span>: &#123;</span><br><span class="line">            id </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attribute">include </span>: &#123;</span><br><span class="line">            <span class="attribute">model</span>: Needs,</span><br><span class="line">            <span class="attribute">as</span>:<span class="string">'child'</span>, </span><br><span class="line">            <span class="attribute">required </span>: false,</span><br><span class="line">            <span class="attribute">include </span>: &#123;</span><br><span class="line">                <span class="attribute">all </span>: true,</span><br><span class="line">                <span class="attribute">nested </span>: true,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法解释：</p><p><code>include</code>：连接查询列表</p><ul><li><p><code>include.model</code>：连接查询的模型</p></li><li><p><code>include.as</code>：连接查询模型的别名</p></li><li><p><code>include.requeired</code>：如果为<code>true</code>，连接查询为内连接。<code>false</code>为左连接。如果有<code>where</code>默认为<code>true</code>，其他情况默认为<code>false</code>。</p></li><li><p><code>include.all</code>：嵌套查询所有的模型</p></li><li><p><code>include.nested</code>：嵌套查询</p></li></ul><p>使用此方法，查询最深的子级结果为三层。如果能保证数据继承关系最深为三层，可以使用此方法。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>在MySQL 8+可以使用CTE实现，相对于自定义函数实现可以使用更少的代码量实现，且使用<code>WITH...AS</code>可以优化递归查询。Sequelize目前支持CTE，但仅支持PostgreSQL、SQLite、MSSQL数据库，如果有更好的实现方式，可以分享下哦(≧▽≦)</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://www.cnblogs.com/xiaoxi/p/5942805.html" target="_blank" rel="noopener">1.mysql 递归查询 http://www.cnblogs.com/xiaoxi/p/5942805.html</a></p><p><a href="http://www.mysqltutorial.org/mysql-adjacency-list-tree/" target="_blank" rel="noopener">2.Managing Hierarchical Data in MySQL Using the Adjacency List Model</a></p><p><a href="http://www.mysqltutorial.org/mysql-recursive-cte/" target="_blank" rel="noopener">3.A Definitive Guide To MySQL Recursive CTE</a></p><p><a href="http://docs.sequelizejs.com/" target="_blank" rel="noopener">4.http://docs.sequelizejs.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;#一、前言&quot;&gt;一、前言&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#二、MySQL实现&quot;&gt;二、MySQL实现&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#三、Sequqlize实现&quot;&gt;三、Sequqlize实现&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#四、总结&quot;&gt;四、总结&lt;/a&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何用Phaser实现一个全家福拼图H5</title>
    <link href="http://zengzoe.github.io/2019/01/24/%E5%A6%82%E4%BD%95%E7%94%A8Phaser%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%85%A8%E5%AE%B6%E7%A6%8F%E6%8B%BC%E5%9B%BEh5/"/>
    <id>http://zengzoe.github.io/2019/01/24/如何用Phaser实现一个全家福拼图h5/</id>
    <published>2019-01-23T21:54:11.000Z</published>
    <updated>2019-04-16T14:54:08.765Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/01/24/如何用Phaser实现一个全家福拼图h5/02.jpg" alt=""></p><p><a href="# 一、Phaser介绍">一、Phaser介绍</a><br><a href="# 二、整体框架搭建">二、整体框架搭建</a><br><a href="# 三、资源加载">三、资源加载</a><br><a href="# 四、游戏逻辑">四、游戏逻辑</a><br><a href="# 五、完成">五、完成</a><br><a href="# 六、总结">六、总结</a><br><a href="# 参考文档">参考文档</a></p><p>最近用Phaser做了一个全家福拼图h5的项目，这篇文章将会从零开始讲解如何用Phaser实现，最终效果如下：</p><p><img src="/2019/01/24/如何用Phaser实现一个全家福拼图h5/01.gif" alt=""></p><p><br></p><p><a href="https://github.com/ZENGzoe/phaser-puzzle.git" target="_blank" rel="noopener">源码：https://github.com/ZENGzoe/phaser-puzzle.git</a><br><a href="https://zengzoe.github.io/phaser-puzzle/dist/">demo：https://zengzoe.github.io/phaser-puzzle/dist/</a><br><img src="/2019/01/24/如何用Phaser实现一个全家福拼图h5/07.png" alt=""></p><h1 id="一、Phaser介绍"><a href="#一、Phaser介绍" class="headerlink" title="一、Phaser介绍"></a>一、Phaser介绍</h1><p>Phaser是一个开源的HTML5游戏框架，支持桌面和移动HTML5游戏，支持Canvas和WebGL渲染。官方文档齐全，上手也比较容易。</p><p>Phaser的功能主要还有预加载、物理引擎、图片精灵、群组、动画等。</p><p><img src="/2019/01/24/如何用Phaser实现一个全家福拼图h5/03.png" alt=""></p><p>更多详细内容可以查看<a href="https://phaser.io" target="_blank" rel="noopener">Phaser官网</a>，我的学习过程是主要是边看<a href="https://phaser.io/examples" target="_blank" rel="noopener">Phaser案例</a>的实现，边看<a href="https://www.phaser-china.com/docs/Index.html" target="_blank" rel="noopener">API文档</a>查看用法。</p><h1 id="二、整体框架搭建"><a href="#二、整体框架搭建" class="headerlink" title="二、整体框架搭建"></a>二、整体框架搭建</h1><h4 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1.目录结构"></a>1.目录结构</h4><p>目录初始结构如下:</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── package<span class="selector-class">.json</span>            </span><br><span class="line">├── postcss<span class="selector-class">.config</span><span class="selector-class">.js</span>           <span class="comment">//postcss配置</span></span><br><span class="line">├── src                         <span class="comment">//主要代码目录</span></span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── img</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── js  </span><br><span class="line">│   │   └── index<span class="selector-class">.js</span>            <span class="comment">//入口文件</span></span><br><span class="line">│   ├── json                    <span class="comment">//json文件目录</span></span><br><span class="line">│   ├── lib                     <span class="comment">//其他库</span></span><br><span class="line">│   └── sprite                  <span class="comment">//sprite雪碧图合成目录</span></span><br><span class="line">├── webpack<span class="selector-class">.config</span><span class="selector-class">.build</span><span class="selector-class">.js</span>     <span class="comment">//webpack生成distw文件配置</span></span><br><span class="line">└── webpack<span class="selector-class">.config</span><span class="selector-class">.dev</span><span class="selector-class">.js</span>       <span class="comment">//webpack编译配置</span></span><br></pre></td></tr></table></figure><p>项目的构建工具使用的是Webpack， Webpack的配置可以查看源码<a href="">webapck.config.dev.js</a>，为避免文章篇幅过长，这里将不会详细介绍Webpack的配置过程，Webpck的配置介绍可以查看Webpack的官方文档<a href="https://webpack.github.io/" target="_blank" rel="noopener">https://webpack.github.io/</a>。</p><p><br></p><h4 id="2-创建游戏"><a href="#2-创建游戏" class="headerlink" title="2.创建游戏"></a>2.创建游戏</h4><h5 id="（1）库引入"><a href="#（1）库引入" class="headerlink" title="（1）库引入"></a>（1）库引入</h5><p>在<code>index.html</code>引入Phaser官网下载的Phaser库。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/phaser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="（2）创建游戏"><a href="#（2）创建游戏" class="headerlink" title="（2）创建游戏"></a>（2）创建游戏</h5><p>Phaser中通过<code>Phaser.Game</code>来创建游戏界面，也是游戏的核心。可以通过创建的这个游戏对象，添加更多生动的东西。</p><p><code>Phaser.Game(width, height, renderer, parent, state, transparent, antialias, physicsConfig)</code>有八个参数：</p><p><code>width</code> ：游戏界面宽度，默认值为800。<br><code>height</code> ：游戏界面高度，默认值为600。<br><code>renderer</code> ：游戏渲染器，默认值为<code>Phaser.AUTO</code>，随机选择其他值：<code>Phaser.WEBGL</code>、<code>Phaser.CANVAS</code>、<code>Phaser.HEADLESS</code>（不进行渲染）。<br><code>parent</code> ：游戏界面挂载的DOM节点，可以为DOM id，或者标签。<br><code>state</code> ：游戏state对象，默认值为null，游戏的state对象一般包含方法（preload、create、update、render）。<br><code>transparent</code> ：是否设置游戏背景为透明，默认值为false。<br><code>antialias</code> ：是否显示图片抗锯齿。默认值为true。<br><code>physicsConfig</code> ：游戏物理引擎配置。<br><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以750宽度视觉搞为准</span></span><br><span class="line"><span class="comment">//选择是canvas渲染方式</span></span><br><span class="line"><span class="built_in">window</span>.customGame = <span class="keyword">new</span> Phaser.Game(<span class="number">750</span> , <span class="number">750</span> / <span class="built_in">window</span>.innerWidth * <span class="built_in">window</span>.innerHeight , Phaser.CANVAS , <span class="string">'container'</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.html</span></span><br><span class="line">&lt;<span class="keyword">div</span> id=<span class="string">"container"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>这样就可以在页面上看到我们的Canvas界面。</p><h4 id="3-功能划分"><a href="#3-功能划分" class="headerlink" title="3.功能划分"></a>3.功能划分</h4><p>在项目中，为了将项目模块化，将加载资源逻辑和游戏逻辑分开，在<code>src/js</code>中新建<code>load.js</code>存放加载资源逻辑，新建<code>play.js</code>存放游戏逻辑。在这里的两个模块以游戏场景的形式存在。</p><p>场景（state）在Phaser中是可以更快地获取公共函数，比如camera、cache、input等，表现形式为js自定义对象或者函数存在，只要存在preload、create、update这三个方法中地任意一个，就是一个Phaser场景。</p><p>在Phaser场景中，总共有五个方法：<code>init</code>、<code>preload</code>、<code>create</code>、<code>update</code>、<code>render</code>。前三个的执行循序为：init =&gt; preload =&gt; create。</p><p><code>init</code> ：在场景中是最先执行的方法，可以在这里添加场景的初始化。</p><p><code>preload</code> ：这个方法在init后触发，如果没有init，则第一个执行，一般在这里进行资源的加载。</p><p><code>create</code> ：这个方法在preload后触发，这里可以使用预加载中的资源。</p><p><code>update</code> ：这是每一帧都会执行一次的更新方法。</p><p><code>render</code> ：这是在每次物件渲染之后都会执行渲染方法。</p><p>用户自定义场景可以通过<code>game.state.add</code>方法添加到游戏中，如在项目中，需要将预加载模块和游戏逻辑模块加入到游戏中：</p><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">//index.js</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">const <span class="built_in">load</span> = require('./<span class="built_in">load</span>');</span><br><span class="line">const play = require('./play');</span><br><span class="line"></span><br><span class="line">customGame.<span class="keyword">state</span>.add('Load' , <span class="built_in">load</span>);</span><br><span class="line">customGame.<span class="keyword">state</span>.add('Play' , play);</span><br></pre></td></tr></table></figure><p><code>game.state.add</code>第一个参数为场景命名，第二个参数为场景。</p><p>此时我的游戏场景就有Load和Play。游戏中首先要执行的是Load场景，可以通过<code>game.state.start</code>方法来开始执行Load场景。</p><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">//index.js</span><br><span class="line"></span><br><span class="line">customGame.<span class="keyword">state</span>.start('Load');</span><br></pre></td></tr></table></figure><p><br></p><h1 id="三、资源加载"><a href="#三、资源加载" class="headerlink" title="三、资源加载"></a>三、资源加载</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//load.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> load = &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = load;</span><br></pre></td></tr></table></figure><h4 id="1-画面初始化"><a href="#1-画面初始化" class="headerlink" title="1.画面初始化"></a>1.画面初始化</h4><p>进入页面前，需要进行一些游戏画面的初始化。在这里进行初始化的原因在于在场景里才能使用一些设置的方法。</p><h5 id="（1）添加画布背景色"><a href="#（1）添加画布背景色" class="headerlink" title="（1）添加画布背景色"></a>（1）添加画布背景色</h5><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//load.js</span></span><br><span class="line">customGame.stage.backgroundColor = '#4f382b';</span><br></pre></td></tr></table></figure><h5 id="（2）设置屏幕适配模式"><a href="#（2）设置屏幕适配模式" class="headerlink" title="（2）设置屏幕适配模式"></a>（2）设置屏幕适配模式</h5><p>由于不同设备屏幕尺寸不同，需要根据需求设置适合的适配模式。可通过<code>game.scale.scaleMode</code>设置适配模式，适配模式<code>Phaser.ScaleManager</code>有五种：</p><p><code>NO_SCALE</code> ：不进行任何缩放</p><p><code>EXACT_FIT</code> ：对画面进行拉伸撑满屏幕，比例发生变化，会有缩放变形的情况</p><p><code>SHOW_ALL</code> ：在比例不变、缩放不变形的基础上显示所有的内容，通常使用这种模式</p><p><code>RESIZE</code> ：适配画面的宽度不算高度，不进行缩放，不变形</p><p><code>USER_SCALE</code> ： 根据用户的设置变形</p><p>在这里的适配模式选择的是<code>SHOW_ALL</code>：</p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//load.js</span></span><br><span class="line">customGame.<span class="built_in">scale</span>.scaleMode = Phaser.ScaleManager.SHOW_ALL;</span><br></pre></td></tr></table></figure><h4 id="2-资源预加载"><a href="#2-资源预加载" class="headerlink" title="2.资源预加载"></a>2.资源预加载</h4><p>Phaser中通过<code>game.load</code>进行加载资源的预加载，预加载的资源可以为图片、音频、视频、雪碧图等等，这个游戏的资源只有普通图片和雪碧图，其他类型的加载方式可查看<a href="https://www.phaser-china.com/docs/Phaser.Loader.html" target="_blank" rel="noopener">官网文档Phaser. Loader</a>。</p><h5 id="（1）预加载"><a href="#（1）预加载" class="headerlink" title="（1）预加载"></a>（1）预加载</h5><p><strong>普通图片</strong></p><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">customGame.<span class="built_in">load</span>.<span class="built_in">image</span>(<span class="string">'popup'</span> , <span class="string">'../img/sprite.popup.png'</span>);</span><br></pre></td></tr></table></figure><p>普通图片使用的是<code>game.load.image(图片key名，图片地址)</code>;</p><p><strong>雪碧图</strong></p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">customGame.load.atlasJSONHash(<span class="string">'tvshow'</span> , <span class="string">'../img/tvshow.png'</span> , <span class="string">''</span> , <span class="keyword">this</span>.tvshowJson);</span><br></pre></td></tr></table></figure><p>雪碧图的合成工具我使用的是<a href="https://www.codeandweb.com/texturepacker" target="_blank" rel="noopener">texturepacker</a>，选择的是输出文件模式是Phaser(JSONHash)，因此使用的是atlasJSONHash方法。第一个参数为图片key名，第二个参数为资源地址，第三个参数为图片数据文件地址，第四个参数为图片数据json或xml对象。</p><h5 id="（2）图片跨域"><a href="#（2）图片跨域" class="headerlink" title="（2）图片跨域"></a>（2）图片跨域</h5><p>如果图片资源和画布不是同源的，需要设置图片可跨域。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">customGame.<span class="built_in">load</span>.crossOrigin = <span class="string">'anonymous'</span>;</span><br></pre></td></tr></table></figure><h5 id="（3）监听加载事件"><a href="#（3）监听加载事件" class="headerlink" title="（3）监听加载事件"></a>（3）监听加载事件</h5><p><strong>单个资源加载完成事件</strong></p><p>通过<code>onFileComplete</code>方法来监听每个资源加载完的事件，可以用来获取加载进度。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">customGame.load.onFileComplete.add(<span class="keyword">this</span>.loadProgress , <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadProgress</span>(<span class="params">progress</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//progress为获取的资源进度百分比</span></span><br><span class="line">    $(<span class="string">'.J_loading .progress'</span>).text(<span class="string">`<span class="subst">$&#123;progress&#125;</span>%`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>onFileComplete</code>第一个参数为每个资源加载完的事件，第二个参数为指定该事件的上下文。</p><p><strong>全部资源加载完成事件</strong></p><p>通过<code>onLoadComplete</code>方法来监听全部资源加载完成事件。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">customGame</span><span class="selector-class">.load</span><span class="selector-class">.onLoadComplete</span><span class="selector-class">.addOnce</span>(<span class="selector-tag">this</span><span class="selector-class">.loadComplete</span> , <span class="selector-tag">this</span>);</span><br></pre></td></tr></table></figure><p>第一个参数为加载完成事件，第二个参数为指定该事件的上下文。</p><p>以上就是预加载的主要实现。</p><p><br></p><h1 id="四、游戏逻辑"><a href="#四、游戏逻辑" class="headerlink" title="四、游戏逻辑"></a>四、游戏逻辑</h1><p>游戏逻辑大致可以分为四个部分，分别为画面初始化、物件选择面板的创建、元素的编辑、生成长图。</p><h4 id="1-画面初始化-1"><a href="#1-画面初始化-1" class="headerlink" title="1.画面初始化"></a>1.画面初始化</h4><p>初始化的页面主要有墙面、桌子和电视机，主要是创建这三个物件。在此之前，先介绍下用到的两个概念。</p><p><strong>sprite</strong> ：可用于展示绝大部分的可视化的对象。<br><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建新图像</span></span><br><span class="line"><span class="comment">//spriteName为预加载资源的唯一key，frame为雪碧图内的frame名，可通过雪碧图的json获得</span></span><br><span class="line"><span class="keyword">const</span> newObject = game.<span class="keyword">add</span>.sprite(<span class="number">0</span>,<span class="number">0</span>,spriteName , frame);</span><br></pre></td></tr></table></figure></p><p><strong>group</strong> ：用于包含一系列对象的容器，方便批量操作对象，比如移动、旋转、放大等。<br><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建组</span></span><br><span class="line"><span class="keyword">const</span> group1 = game.<span class="keyword">add</span>.<span class="keyword">group</span>();</span><br><span class="line"><span class="comment">//向组内添加新对象newObject</span></span><br><span class="line">group1.<span class="keyword">add</span>(newObject);</span><br></pre></td></tr></table></figure></p><p>接下来是实例，创建墙面、桌子和电视机：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//play.js</span></span><br><span class="line"><span class="keyword">const</span> play = &#123;</span><br><span class="line">    create : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createEditPage();  <span class="comment">//创建编辑页</span></span><br><span class="line">    &#125;,</span><br><span class="line">    createEditPage : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mobilityGroup = customGame.add.group();    <span class="comment">//创建mobilityGroup组，用于存放游戏中的物件</span></span><br><span class="line">        <span class="keyword">this</span>.createWall();      <span class="comment">//创建墙</span></span><br><span class="line">        <span class="keyword">this</span>.createTableSofa(<span class="string">'sofatable1.png'</span>);     <span class="comment">//创建沙发</span></span><br><span class="line">        <span class="keyword">this</span>.createTelevision(<span class="string">'television1.png'</span>);   <span class="comment">//创建电视机</span></span><br><span class="line">    &#125;,</span><br><span class="line">    createWall : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> wall = customGame.add.sprite(<span class="number">0</span>,<span class="keyword">this</span>.gameHeightHf + <span class="number">80</span>,<span class="string">'wall1.png'</span>);</span><br><span class="line"></span><br><span class="line">        wall.anchor.set(<span class="number">0</span> , <span class="number">0.5</span>);  </span><br><span class="line">        wall.name = <span class="string">'wall'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.mobilityGroup.add(wall);</span><br><span class="line">    &#125;,</span><br><span class="line">    createTableSofa : <span class="function"><span class="keyword">function</span>(<span class="params">spriteName</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> tableSofa = customGame.add.sprite(<span class="keyword">this</span>.gameWidthHf , <span class="keyword">this</span>.gameHeightHf + <span class="number">20</span>, <span class="string">'tableSofa'</span> , spriteName );</span><br><span class="line"></span><br><span class="line">        tableSofa.anchor.set(<span class="number">0.5</span>,<span class="number">0.5</span>);</span><br><span class="line">        tableSofa.name = <span class="string">'tableSofa'</span>;</span><br><span class="line">        tableSofa.keyNum = <span class="keyword">this</span>.keyNum++;   <span class="comment">//设置唯一key值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.mobilityGroup.add(tableSofa);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = play;</span><br></pre></td></tr></table></figure><p><code>createTelevision</code>创建同<code>createTableSofa</code>，可通过源码查看。<br><code>object.anchor.set(0,0)</code> 设置对象偏移位置的基准点，默认是左上角的位置（0,0），如果是右下角则是（1,1），对象的中间点是（0.5,0.5）；<br><code>object.name = &#39;name&#39;</code>设置对象的名称，可通过<code>group.getByName(name)</code>从组中获取该对象。</p><p>这样就会在页面上创建一个这样的画面：</p><p><img src="/2019/01/24/如何用Phaser实现一个全家福拼图h5/04.png" alt=""></p><p><br></p><h4 id="2-物件选择面板的创建"><a href="#2-物件选择面板的创建" class="headerlink" title="2.物件选择面板的创建"></a>2.物件选择面板的创建</h4><p>物件选择面板的主要逻辑可以分为几部分：创建左侧tab和批量创建元素、tab切换、元素滑动和新增元素。</p><h5 id="（1）创建左侧tab和批量创建元素"><a href="#（1）创建左侧tab和批量创建元素" class="headerlink" title="（1）创建左侧tab和批量创建元素"></a>（1）创建左侧tab和批量创建元素</h5><p>物件选择面板可以分为新年快乐框、tab标题、tab内容、完成按钮四个部分。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">createEditPage : function()&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">this</span>.createEditWrap();          <span class="comment">//创建编辑面板</span></span><br><span class="line">&#125;,</span><br><span class="line">createEditWrap : function()&#123;</span><br><span class="line">    <span class="keyword">this</span>.editGroup = customGame.add.group();    <span class="comment">//editGroup用于存放面板的所有元素</span></span><br><span class="line">    <span class="keyword">this</span>.createNewyear();           <span class="comment">//创建新年快乐框</span></span><br><span class="line">    <span class="keyword">this</span>.createEditContent();       <span class="comment">//创建tab内容</span></span><br><span class="line">    <span class="keyword">this</span>.createEditTab();           <span class="comment">//创建tab标题</span></span><br><span class="line">    <span class="keyword">this</span>.createFinishBtn();         <span class="comment">//创建完成按钮</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>新年快乐框、tab标题、完成按钮的实现可以查看源码，这里主要着重介绍tab内容的实现。</p><p>物件选择面板主要有四个tab类：</p><p><img src="/2019/01/24/如何用Phaser实现一个全家福拼图h5/05.jpg" alt=""></p><p>四个tab类创建方式相同，因此取较为复杂的人物tab类为例介绍实现方法。</p><p>这里插播一些新的API：</p><p><strong>graphics：</strong> 可以用来绘画，比如矩形、圆形、多边形等图形，还可以用来绘画直线、圆弧、曲线等各种基本物体。</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新建图形，第一个参数为x轴位置，第二个参数为y轴位置</span></span><br><span class="line">const graphicObject = game.add.graphics(<span class="number">0</span>,<span class="number">100</span>); </span><br><span class="line"><span class="comment">//画一个黑色的矩形</span></span><br><span class="line">graphicObject.beginFill(<span class="number">0x000000</span>);  <span class="comment">//设置矩形的颜色</span></span><br><span class="line">graphicObject.drawRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span> , <span class="number">100</span>);   <span class="comment">//设置矩形的x,y,width,height</span></span><br></pre></td></tr></table></figure><p>编辑框的实现：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">createEditContent : function()&#123;</span><br><span class="line">    const maskHeight = <span class="keyword">this</span>.isIPhoneXX ? (<span class="keyword">this</span>.gameHeight - <span class="number">467</span>) : (<span class="keyword">this</span>.gameHeight - <span class="number">430</span>);</span><br><span class="line">    const editContent = customGame.add.graphics(<span class="number">0</span> , <span class="keyword">this</span>.gameHeight); </span><br><span class="line">    <span class="comment">//遮罩</span></span><br><span class="line">    const mask = customGame.add.graphics(<span class="number">0</span>, maskHeight);    </span><br><span class="line">    mask.beginFill(<span class="number">0x000000</span>);</span><br><span class="line">    mask.drawRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.gameWidth , <span class="number">467</span>); </span><br><span class="line">    <span class="comment">//tab内容背景</span></span><br><span class="line">    editContent.beginFill(<span class="number">0xffffff</span>);</span><br><span class="line">    editContent.drawRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.gameWidth , <span class="number">350</span>);</span><br><span class="line">    editContent.mask = mask;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.editGroup.add(editContent);</span><br><span class="line">    <span class="keyword">this</span>.editContent = editContent;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建人物</span></span><br><span class="line">    <span class="keyword">this</span>.createPostContent();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>给<code>editContent</code>添加了遮罩是为了在子元素滑动的时候，可以遮住滑出的内容。</p><p>人物选择内容框分为左侧tab和右侧内容。左侧tab主要是文字，通过Phaser的text api实现，右侧通过封装的createEditListDetail方法批量生成。<br><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">createPostContent : function()&#123;</span><br><span class="line">    <span class="keyword">const</span> postContent = customGame.<span class="keyword">add</span>.<span class="keyword">group</span>(<span class="keyword">this</span>.editContent);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//左侧背景</span></span><br><span class="line">    <span class="keyword">const</span> leftTab = customGame.<span class="keyword">add</span>.graphics(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> leftTabGroup = customGame.<span class="keyword">add</span>.<span class="keyword">group</span>(leftTab)</span><br><span class="line">    leftTab.beginFill(<span class="number">0xfff7e0</span>);</span><br><span class="line">    leftTab.drawRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">155</span> , <span class="number">350</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左侧选中背景</span></span><br><span class="line">    <span class="keyword">const</span> selected = customGame.<span class="keyword">add</span>.graphics(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    selected.beginFill(<span class="number">0xffffff</span>);</span><br><span class="line">    selected.drawRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">155</span>,<span class="number">70</span>);</span><br><span class="line">    selected.name = <span class="string">'selected'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//左侧文字</span></span><br><span class="line">    <span class="keyword">const</span> text = customGame.<span class="keyword">add</span>.text(<span class="number">155</span>/<span class="number">2</span> , <span class="number">23</span> , <span class="string">"站姿\n坐姿\n瘫姿\n不可描述"</span> , &#123;font : <span class="string">"24px"</span> , fill : <span class="string">"#a55344"</span> , align : <span class="string">"center"</span>&#125;);</span><br><span class="line">    text.lineSpacing = <span class="number">35</span>;</span><br><span class="line">    text.anchor.<span class="keyword">set</span>(<span class="number">0.5</span> , <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左侧文字区域</span></span><br><span class="line">    <span class="keyword">this</span>.createLeftBarSpan(<span class="number">4</span> ,leftTabGroup );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//右侧sprite合集</span></span><br><span class="line">    <span class="keyword">const</span> standSpriteSheet = &#123;</span><br><span class="line">        number : <span class="number">12</span>,</span><br><span class="line">        info : [</span><br><span class="line">            &#123; name : <span class="string">'stand'</span> , spriteSheetName : <span class="string">'stand'</span> , number : <span class="number">8</span> , startNum : <span class="number">0</span>&#125; , </span><br><span class="line">            &#123; name : <span class="string">'stand2'</span> , spriteSheetName : <span class="string">'stand'</span> , number : <span class="number">4</span> , startNum : <span class="number">8</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> sitSpriteSheet = &#123; name : <span class="string">'sit'</span>, spriteSheetName : <span class="string">'sit'</span> , number : <span class="number">12</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> stallSpriteSheet = &#123; name : <span class="string">'stall'</span> , spriteSheetName : <span class="string">'stall'</span> , number : <span class="number">13</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> indescribeSpriteSheet = &#123; name : <span class="string">'indescribe'</span> , spriteSheetName : <span class="string">'indescribe'</span> , number : <span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右侧合集</span></span><br><span class="line">    <span class="keyword">const</span> standGroup = customGame.<span class="keyword">add</span>.<span class="keyword">group</span>();</span><br><span class="line">    <span class="keyword">const</span> sitGroup = customGame.<span class="keyword">add</span>.<span class="keyword">group</span>();</span><br><span class="line">    <span class="keyword">const</span> stallGroup = customGame.<span class="keyword">add</span>.<span class="keyword">group</span>();</span><br><span class="line">    <span class="keyword">const</span> indescribeGroup = customGame.<span class="keyword">add</span>.<span class="keyword">group</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//右侧生成</span></span><br><span class="line">    <span class="keyword">const</span> stallSpecialSize = &#123;</span><br><span class="line">        <span class="string">'stall0.png'</span> : <span class="number">0.35</span>,</span><br><span class="line">        <span class="string">'stall9.png'</span> : <span class="number">0.35</span>,</span><br><span class="line">        <span class="string">'stall12.png'</span> : <span class="number">0.8</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> standSpecialSize = &#123;</span><br><span class="line">        <span class="string">'stand8.png'</span> : <span class="number">0.6</span>,</span><br><span class="line">        <span class="string">'stand9.png'</span> : <span class="number">0.6</span>,</span><br><span class="line">        <span class="string">'stand10.png'</span> : <span class="number">0.6</span>,</span><br><span class="line">        <span class="string">'stand11.png'</span> : <span class="number">0.6</span>,</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">this</span>.createEditListDetail(standSpriteSheet , <span class="number">0.37</span> , standGroup , <span class="number">105</span> , <span class="number">220</span> , <span class="number">25</span> , <span class="number">20</span> , <span class="number">40</span> , <span class="number">17</span> , <span class="number">160</span> , <span class="number">590</span> , standSpecialSize , <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">this</span>.createEditListDetail(sitSpriteSheet , <span class="number">0.42</span> , sitGroup , <span class="number">105</span> , <span class="number">220</span>, <span class="number">25</span> , <span class="number">20</span>, <span class="number">40</span> , <span class="number">17</span>, <span class="number">160</span> , <span class="number">590</span> , <span class="literal">null</span> , <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">this</span>.createEditListDetail(stallSpriteSheet , <span class="number">0.4</span> , stallGroup , <span class="number">170</span> , <span class="number">194</span>, <span class="number">25</span> , <span class="number">15</span>, <span class="number">33</span> , <span class="number">30</span>, <span class="number">160</span>, <span class="number">590</span> , stallSpecialSize , <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">this</span>.createEditListDetail(indescribeSpriteSheet , <span class="number">0.4</span> , indescribeGroup , <span class="number">105</span> , <span class="number">220</span>, <span class="number">25</span> , <span class="number">20</span>, <span class="number">40</span> , <span class="number">17</span>, <span class="number">160</span> , <span class="number">590</span> , <span class="literal">null</span> , <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    leftTabGroup.addMultiple([selected,text]);</span><br><span class="line">    postContent.addMultiple([leftTab,sitGroup,standGroup,stallGroup,indescribeGroup])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.postContent = postContent;</span><br><span class="line">    <span class="keyword">this</span>.postLeftTab = leftTabGroup;</span><br><span class="line">    <span class="keyword">this</span>.sitGroup = sitGroup;</span><br><span class="line">    <span class="keyword">this</span>.standGroup = standGroup;</span><br><span class="line">    <span class="keyword">this</span>.stallGroup = stallGroup;</span><br><span class="line">    <span class="keyword">this</span>.indescribeGroup = indescribeGroup;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>右侧的内容需要考虑的是不同内容的位置、尺寸和显示数量不一定的问题，因此需要抽取出不同的设置作为参数传入：</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * @param &#123;*&#125; spriteSheet  spriteSheet雪碧图信息</span></span><br><span class="line"><span class="comment">    * @param &#123;*&#125; scaleRate    图像显示的缩放</span></span><br><span class="line"><span class="comment">    * @param &#123;*&#125; group        新建图像存放的组</span></span><br><span class="line"><span class="comment">    * @param &#123;*&#125; spriteWidth  图像显示区域尺寸的宽度</span></span><br><span class="line"><span class="comment">    * @param &#123;*&#125; spriteHeight 图像显示区域尺寸的高度</span></span><br><span class="line"><span class="comment">    * @param &#123;*&#125; verticalW     图像显示区域的横向间距</span></span><br><span class="line"><span class="comment">    * @param &#123;*&#125; horizentalH   图像显示区域的纵向间距</span></span><br><span class="line"><span class="comment">    * @param &#123;*&#125; startX        整块图像区域的x偏移量</span></span><br><span class="line"><span class="comment">    * @param &#123;*&#125; startY        整块图像区域的y偏移量</span></span><br><span class="line"><span class="comment">    * @param &#123;*&#125; groupleft     左侧tab的宽度</span></span><br><span class="line"><span class="comment">    * @param &#123;*&#125; groupWidth    整块区域的宽度</span></span><br><span class="line"><span class="comment">    * @param &#123;*&#125; specialSize   特殊元素的缩放尺寸，由于元素的尺寸缩放标准不一，因此需要设置特殊元素的缩放尺寸</span></span><br><span class="line"><span class="comment">    * @param &#123;*&#125; verticalNum   列项数量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">createEditListDetail : <span class="function"><span class="keyword">function</span>(<span class="params">spriteSheet , scaleRate , group , spriteWidth , spriteHeight , verticalW , horizentalH , startX , startY , groupleft ,groupWidth , specialSize , verticalNum</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; name , spriteSheetName , <span class="built_in">number</span> &#125; = spriteSheet; </span><br><span class="line">    <span class="keyword">const</span> hv = <span class="built_in">number</span> % verticalNum == <span class="number">0</span> ? <span class="built_in">number</span> : <span class="built_in">number</span> + (verticalNum-<span class="built_in">number</span>%verticalNum);</span><br><span class="line">    <span class="keyword">const</span> box = customGame.add.graphics(groupleft,<span class="number">0</span>,group);</span><br><span class="line">    box.beginFill(<span class="number">0xffffff</span>);</span><br><span class="line">    box.drawRect(<span class="number">0</span>,<span class="number">0</span>,groupWidth,startY + (spriteHeight + horizentalH) * <span class="built_in">parseInt</span>(hv/verticalNum) + horizentalH);        </span><br><span class="line">    box.name = <span class="string">'box'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于元素的体积过大，部分元素集不能都合并成一张雪碧图，因此需要区分合并成一张和多张都情况</span></span><br><span class="line">    <span class="keyword">if</span>(spriteSheet.info)&#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">        spriteSheet.info.map(<span class="function">(<span class="params">item , index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> &#123; name , spriteSheetName , <span class="built_in">number</span>&#125; = item;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span> ; j &lt; <span class="built_in">number</span> ; j++)&#123;</span><br><span class="line">                createOne(i, name , spriteSheetName);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ;  i &lt; <span class="built_in">number</span> ; i++ )&#123;</span><br><span class="line">            createOne(i, name , spriteSheetName)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createOne</span>(<span class="params">i , name , spriteSheetName</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> x = startX + (spriteWidth+verticalW) * (i%verticalNum) + spriteWidth/<span class="number">2</span>,</span><br><span class="line">                y = startY + (spriteHeight + horizentalH) * <span class="built_in">parseInt</span>(i/verticalNum) + spriteHeight/<span class="number">2</span>;  </span><br><span class="line">        <span class="keyword">const</span> item = customGame.add.sprite(x , y , name , <span class="string">`<span class="subst">$&#123;spriteSheetName&#125;</span><span class="subst">$&#123;i&#125;</span>.png`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> realScaleRate = scaleRate;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(spriteWidth/item.width &gt;= <span class="number">1.19</span>)&#123;</span><br><span class="line">            realScaleRate = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(specialSize &amp;&amp; specialSize[<span class="string">`<span class="subst">$&#123;spriteSheetName&#125;</span><span class="subst">$&#123;i&#125;</span>.png`</span>])&#123;</span><br><span class="line">            realScaleRate = specialSize[<span class="string">`<span class="subst">$&#123;spriteSheetName&#125;</span><span class="subst">$&#123;i&#125;</span>.png`</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        item.anchor.set(<span class="number">0.5</span>);</span><br><span class="line">        item.scale.set(realScaleRate);</span><br><span class="line">        item.inputEnabled = <span class="literal">true</span>;</span><br><span class="line">        box.addChild(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>到这里就搭好了游戏的全部画面，接下来是tab的切换。<br><br></p><h5 id="（2）tab切换"><a href="#（2）tab切换" class="headerlink" title="（2）tab切换"></a>（2）tab切换</h5><p>tab的切换逻辑是显示指定的内容，隐藏其他内容。通过组的<code>visible</code>属性设置元素的显示和隐藏。</p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示</span></span><br><span class="line"><span class="keyword">new</span><span class="type">Object</span>.visible = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//隐藏</span></span><br><span class="line"><span class="keyword">new</span><span class="type">Object</span>.visible = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>除此之外，tab的切换还涉及到元素的点击事件，绑定事件前需要激活元素的<code>inputEnabled</code>属性，在元素的<code>events</code>属性上添加点击事件：</p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span><span class="type">Object</span>.inputEnabled = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">new</span><span class="type">Object</span>.events.onInputDown.add(clickHandler , <span class="built_in">this</span>);  <span class="comment">//第一个参数为事件的回调函数，第二个参数为绑定的上下文</span></span><br></pre></td></tr></table></figure><p>以人物选择内容框的左侧tab切换为例</p><p>给左侧tab添加点击事件：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">createPostContent : function()&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//组内批量添加点击事件，用setAll设置属性，用callAll添加事件</span></span><br><span class="line">    leftTabGroup.setAll(<span class="string">'inputEnabled'</span> , <span class="literal">true</span>);</span><br><span class="line">    leftTabGroup.callAll(<span class="string">'events.onInputDown.add'</span> , <span class="string">'events.onInputDown'</span> , <span class="keyword">this</span>.switchPost , <span class="keyword">this</span>);</span><br><span class="line">&#125;,</span><br><span class="line">switchPost : function(e)&#123;</span><br><span class="line">    const item = e.name || <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span>(!item) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    let selectedTop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    switch(item)&#123;</span><br><span class="line">        case <span class="string">'text0'</span> :</span><br><span class="line">            selectedTop = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.standGroup.visible = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.sitGroup.visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.stallGroup.visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.indescribeGroup.visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'text1'</span> :</span><br><span class="line">            selectedTop = <span class="number">70</span>;</span><br><span class="line">            <span class="keyword">this</span>.standGroup.visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.sitGroup.visible = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.stallGroup.visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.indescribeGroup.visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'text2'</span> :</span><br><span class="line">            selectedTop = <span class="number">140</span>;</span><br><span class="line">            <span class="keyword">this</span>.standGroup.visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.sitGroup.visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.stallGroup.visible = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.indescribeGroup.visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'text3'</span> :</span><br><span class="line">            selectedTop = <span class="number">210</span>;</span><br><span class="line">            <span class="keyword">this</span>.standGroup.visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.sitGroup.visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.stallGroup.visible = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">this</span>.indescribeGroup.visible = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置选中框的位置</span></span><br><span class="line">    <span class="keyword">this</span>.postLeftTab.getByName(<span class="string">'selected'</span>).y = selectedTop;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><br></p><h5 id="（3）元素滑动和新增元素"><a href="#（3）元素滑动和新增元素" class="headerlink" title="（3）元素滑动和新增元素"></a>（3）元素滑动和新增元素</h5><p>这里把元素滑动和新增元素放在一起是考虑到组内元素的滑动操作和点击操作的冲突，元素的滑动是通过拖拽实现，如果组内元素添加了点击事件，点击事件优先于父元素的拖拽事件，当手指触摸到子元素时，无法触发拖拽事件。如果忽略子元素的点击事件，则无法捕获子元素的点击事件。</p><p>因此给元素添加滑动的逻辑如下：</p><p>1.触发滑动的父元素的拖拽功能，并且禁止横向拖拽，允许纵享拖拽。<br>2.给元素添加物理引擎（因为要给元素一个惯性的速度）。<br>3.结合onDragStart、onDragStop和onInputUp三个事件的触发判断用户的操作是点击还是滑动，如果是滑动，则三个事件都会触发，并且onInputUp的事件优先于onDragStop，如果是点击，则只会触发InputUp。<br>4.在onDragUpdate设置边界点，如果用户滑动超过一定边界点则只能滑动到边界点。<br>5.在onDragStop判断用户滑动的距离和时间计算出手势停止时，给定元素的速度。<br>6.在onDragStart判断是否有因惯性正在移动的元素，如果有则让该元素停止运动，让移动速度为0。<br>6.在update里让移动元素的速度减少直至为0停下来模拟惯性。</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">addScrollHandler : function(target)&#123;</span><br><span class="line">    let isDrag = <span class="keyword">false</span>; <span class="comment">//判断是否滑动的标识</span></span><br><span class="line">    let startY , endY , startTime , endTime;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">box</span> = target.getByName(<span class="string">'box'</span>);</span><br><span class="line">    <span class="built_in">box</span>.inputEnabled = <span class="keyword">true</span>;</span><br><span class="line">    <span class="built_in">box</span>.input.enableDrag();</span><br><span class="line">    <span class="built_in">box</span>.input.allowHorizontalDrag = <span class="keyword">false</span>;  <span class="comment">//禁止横向拖拽</span></span><br><span class="line">    <span class="built_in">box</span>.input.allowVerticalDrag = <span class="keyword">true</span>;     <span class="comment">//允许纵向拖拽</span></span><br><span class="line">    <span class="built_in">box</span>.ignoreChildInput = <span class="keyword">true</span>;            <span class="comment">//忽略子元素事件</span></span><br><span class="line">    <span class="built_in">box</span>.input.dragDistanceThreshold = <span class="number">10</span>;       <span class="comment">//滑动阈值</span></span><br><span class="line">    <span class="comment">//允许滑动到底部的最高值</span></span><br><span class="line">    <span class="keyword">const</span> maxBoxY = -(<span class="built_in">box</span>.<span class="built_in">height</span> - <span class="number">350</span>);       </span><br><span class="line">    <span class="comment">//给父元素添加物理引擎</span></span><br><span class="line">    customGame.physics.arcade.enable(<span class="built_in">box</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">box</span>.events.onDragUpdate.<span class="built_in">add</span>(function()&#123;</span><br><span class="line">        <span class="comment">//滑到顶部，禁止继续往下滑</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">box</span>.y &gt; <span class="number">100</span>)&#123;</span><br><span class="line">            <span class="built_in">box</span>.y = <span class="number">100</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">box</span>.y &lt; maxBoxY - <span class="number">100</span>)&#123;</span><br><span class="line">            <span class="comment">//滑到底部，禁止继续往上滑</span></span><br><span class="line">            <span class="built_in">box</span>.y = maxBoxY - <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        endY = arguments[<span class="number">3</span>];</span><br><span class="line">        endTime = +<span class="keyword">new</span> Date();</span><br><span class="line">    &#125; , <span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">box</span>.events.onDragStart.<span class="built_in">add</span>(function()&#123;</span><br><span class="line">        isDrag = <span class="keyword">true</span>;</span><br><span class="line">        startY = arguments[<span class="number">3</span>];</span><br><span class="line">        startTime = +<span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.currentScrollBox)&#123;</span><br><span class="line">            <span class="comment">//如果当前有其他正在滑动的元素，取消滑动</span></span><br><span class="line">            <span class="keyword">this</span>.currentScrollBox.body.velocity.y = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>.currentScrollBox = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; , <span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">box</span>.events.onDragStop.<span class="built_in">add</span>(function()&#123;</span><br><span class="line">        isDrag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//指定可以点击滑动的区域</span></span><br><span class="line">        <span class="built_in">box</span>.hitArea = <span class="keyword">new</span> Phaser.Rectangle(<span class="number">0</span>,-<span class="built_in">box</span>.y,<span class="built_in">box</span>.<span class="built_in">width</span>,<span class="built_in">box</span>.<span class="built_in">height</span> + <span class="built_in">box</span>.y);</span><br><span class="line">        <span class="comment">//向下滑动到极限，给极限到最值位置动画</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">box</span>.y &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">box</span>.hitArea = <span class="keyword">new</span> Phaser.Rectangle(<span class="number">0</span>, <span class="number">0</span> , <span class="built_in">box</span>.<span class="built_in">width</span> , <span class="built_in">box</span>.<span class="built_in">height</span>);</span><br><span class="line">            customGame.<span class="built_in">add</span>.tween(<span class="built_in">box</span>).to(&#123; y : <span class="number">0</span>&#125; , <span class="number">100</span> , Phaser.Easing.Linear.None, <span class="keyword">true</span> , <span class="number">0</span> , <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向上滑动到极限，给极限到最值位置动画</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">box</span>.y &lt; maxBoxY)&#123;</span><br><span class="line">            <span class="built_in">box</span>.hitArea = <span class="keyword">new</span> Phaser.Rectangle(<span class="number">0</span>, -maxBoxY , <span class="built_in">box</span>.<span class="built_in">width</span> , <span class="built_in">box</span>.<span class="built_in">height</span> - maxBoxY);</span><br><span class="line">            customGame.<span class="built_in">add</span>.tween(<span class="built_in">box</span>).to(&#123; y : maxBoxY&#125; , <span class="number">100</span> , Phaser.Easing.Linear.None , <span class="keyword">true</span> , <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟滑动停止父元素仍滑动到停止的惯性</span></span><br><span class="line">        <span class="comment">//根据用户的滑动距离和滑动事件计算元素的惯性滑动速度</span></span><br><span class="line">        <span class="keyword">const</span> velocity = (Math.<span class="built_in">abs</span>(Math.<span class="built_in">abs</span>(endY) - Math.<span class="built_in">abs</span>(startY)) / (endTime - startTime)) * <span class="number">40</span>;</span><br><span class="line">        <span class="comment">//scrollFlag标识父元素是向上滑动还是向下滑动</span></span><br><span class="line">        <span class="keyword">if</span>(endY &gt; startY)&#123;<span class="comment">// 向下</span></span><br><span class="line">            <span class="built_in">box</span>.body.velocity.y = velocity;</span><br><span class="line">            <span class="built_in">box</span>.scrollFlag = <span class="string">'down'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(endY &lt; startY)&#123; <span class="comment">//向上</span></span><br><span class="line">            <span class="built_in">box</span>.body.velocity.y = -velocity;</span><br><span class="line">            <span class="built_in">box</span>.scrollFlag = <span class="string">'up'</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">this</span>.currentScrollBox = <span class="built_in">box</span>;         </span><br><span class="line">    &#125; , <span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">box</span>.events.onInputUp.<span class="built_in">add</span>(function(e , p )&#123;</span><br><span class="line">        <span class="keyword">if</span>(isDrag) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> curX = p.position.x - e.previousPosition.x;</span><br><span class="line">        <span class="keyword">const</span> curY = p.position.y - e.previousPosition.y;</span><br><span class="line">        <span class="comment">//根据点击区域，判断用户点击的是哪个元素</span></span><br><span class="line">        <span class="keyword">const</span> idx = e.wrapData.findIndex((val , index , arr) =&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> curX &gt;= val.minX &amp;&amp; curX &lt;= val.maxX &amp;&amp; curY &gt;= val.minY &amp;&amp; curY &lt;= val.maxY;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span>(idx == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">const</span> children = e.children[idx];</span><br><span class="line">        <span class="comment">//添加新元素到画面</span></span><br><span class="line">        <span class="keyword">this</span>.addNewMobilityObject(children.<span class="built_in">key</span> , children._frame.name);</span><br><span class="line">    &#125; , <span class="keyword">this</span>);</span><br><span class="line">&#125;,</span><br><span class="line">dealScrollObject : function()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.currentScrollBox &amp;&amp; <span class="keyword">this</span>.currentScrollBox.body.velocity.y !== <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> currentScrollBox = <span class="keyword">this</span>.currentScrollBox,</span><br><span class="line">                <span class="built_in">height</span> = currentScrollBox.<span class="built_in">height</span>,</span><br><span class="line">                <span class="built_in">width</span> = currentScrollBox.<span class="built_in">width</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> maxBoxY = -(<span class="built_in">height</span> - <span class="number">350</span>);</span><br><span class="line">        <span class="keyword">if</span>(currentScrollBox.y &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            currentScrollBox.hitArea = <span class="keyword">new</span> Phaser.Rectangle(<span class="number">0</span>, <span class="number">0</span> , <span class="built_in">width</span> , <span class="built_in">height</span>);</span><br><span class="line">            customGame.<span class="built_in">add</span>.tween(currentScrollBox).to(&#123; y : <span class="number">0</span>&#125; , <span class="number">100</span> , Phaser.Easing.Linear.None, <span class="keyword">true</span> , <span class="number">0</span> , <span class="number">0</span>);</span><br><span class="line">            currentScrollBox.body.velocity.y = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(currentScrollBox.y &lt; maxBoxY)&#123;</span><br><span class="line">            currentScrollBox.hitArea = <span class="keyword">new</span> Phaser.Rectangle(<span class="number">0</span>, -maxBoxY , <span class="built_in">width</span> , <span class="built_in">height</span> - maxBoxY);</span><br><span class="line">            customGame.<span class="built_in">add</span>.tween(currentScrollBox).to(&#123; y : maxBoxY&#125; , <span class="number">100</span> , Phaser.Easing.Linear.None , <span class="keyword">true</span> , <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            currentScrollBox.body.velocity.y = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        currentScrollBox.hitArea = <span class="keyword">new</span> Phaser.Rectangle(<span class="number">0</span>,-currentScrollBox.y,<span class="built_in">width</span>,<span class="built_in">height</span> + currentScrollBox.y);</span><br><span class="line">        <span class="keyword">if</span>(currentScrollBox.scrollFlag == <span class="string">'up'</span>)&#123;</span><br><span class="line">            currentScrollBox.body.velocity.y += <span class="number">1.5</span>;</span><br><span class="line">            <span class="keyword">if</span>(currentScrollBox.body.velocity.y &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                currentScrollBox.body.velocity.y = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(currentScrollBox.scrollFlag == <span class="string">'down'</span>)&#123;</span><br><span class="line">            currentScrollBox.body.velocity.y -= <span class="number">1.5</span>;</span><br><span class="line">            <span class="keyword">if</span>(currentScrollBox.body.velocity.y &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                currentScrollBox.body.velocity.y = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">update : function()&#123;</span><br><span class="line">    <span class="keyword">this</span>.dealScrollObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次元素移动都要设置<code>hitArea</code>属性，用来设置元素的点击和滑动区域。这是因为元素的mask不可见区域还是可点击和滑动的，需要手动设置。</p><p><strong>新增元素：</strong></p><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">addNewMobilityObject : function(key , name)&#123;</span><br><span class="line">    //默认新元素的位置在屏幕居中位置取随机值</span><br><span class="line">    const <span class="keyword">random</span>P<span class="keyword">os</span> = <span class="number">30</span> * Math.<span class="keyword">random</span>();</span><br><span class="line">    const posX = Math.<span class="keyword">random</span>() &gt; <span class="number">0.5</span> ? this.gameWidthHf + <span class="keyword">random</span>P<span class="keyword">os</span> : this.gameWidthHf - <span class="keyword">random</span>P<span class="keyword">os</span>;</span><br><span class="line">    const posY = Math.<span class="keyword">random</span>() &gt; <span class="number">0.5</span> ? this.gameHeightHf + <span class="keyword">random</span>P<span class="keyword">os</span> : this.gameHeightHf - <span class="keyword">random</span>P<span class="keyword">os</span>;</span><br><span class="line">    const newOne = customGame.add.sprite(posX , posY , key , name);</span><br><span class="line"></span><br><span class="line">    newOne.<span class="built_in">anchor</span>.<span class="built_in">set</span>(<span class="number">0.5</span>);</span><br><span class="line">    newOne.keyNum = this.keyNum++;</span><br><span class="line"></span><br><span class="line">    this.mobilityGroup.add(newOne);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><br></p><h4 id="3-元素编辑"><a href="#3-元素编辑" class="headerlink" title="3.元素编辑"></a>3.元素编辑</h4><p>新添加的元素或点击画面区内的元素，会有这样的编辑框出现，使得该元素可进行删除缩放操作。</p><p><img src="/2019/01/24/如何用Phaser实现一个全家福拼图h5/06.png" alt=""></p><p><strong>绘制编辑框</strong></p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">addNewMobilityObject : function()&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//绑定选中元素</span></span><br><span class="line">    <span class="keyword">this</span>.bindObjectSelected(newOne);</span><br><span class="line">    <span class="comment">//让新建元素成为当前选中元素</span></span><br><span class="line">    <span class="keyword">this</span>.objectSelected(newOne);</span><br><span class="line">&#125;,</span><br><span class="line">bindObjectSelected : function(target)&#123;</span><br><span class="line">    target.inputEnabled = <span class="keyword">true</span>;</span><br><span class="line">    target.input.enableDrag(<span class="keyword">false</span> , <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//绘制编辑框</span></span><br><span class="line">    target.events.onDragStart.<span class="built_in">add</span>(<span class="keyword">this</span>.objectSelected , <span class="keyword">this</span> ); </span><br><span class="line">&#125;,</span><br><span class="line">objectSelected : function(e, p)&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.name == <span class="string">'wall'</span> || e.name == <span class="keyword">this</span>.selectedObject) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//如果点击的元素是当前选中元素，则不进行任何操作</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.selectWrap &amp;&amp; e.keyNum == <span class="keyword">this</span>.selectWrap.keyNum) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//去掉当前选中元素状态</span></span><br><span class="line">    <span class="keyword">this</span>.deleteCurrentWrap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> offsetNum = <span class="number">10</span> , </span><br><span class="line">            <span class="built_in">width</span> = e.<span class="built_in">width</span>,</span><br><span class="line">            <span class="built_in">height</span> = e.<span class="built_in">height</span>, </span><br><span class="line">            offsetX = -<span class="built_in">width</span>/<span class="number">2</span> ,</span><br><span class="line">            offsetY = -<span class="built_in">height</span> / <span class="number">2</span>,</span><br><span class="line">            boxWidth = <span class="built_in">width</span> + <span class="number">2</span>*offsetNum , </span><br><span class="line">            boxHeight = <span class="built_in">height</span> + <span class="number">2</span>*offsetNum; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> dashLine = customGame.<span class="built_in">add</span>.bitmapData(<span class="built_in">width</span> + <span class="number">2</span>*offsetNum , <span class="built_in">height</span> + <span class="number">2</span>*offsetNum);</span><br><span class="line">    <span class="keyword">const</span> wrap = customGame.<span class="built_in">add</span>.<span class="built_in">image</span>(e.x + offsetX - offsetNum, e.y + offsetY - offsetNum, dashLine)</span><br><span class="line">    wrap.name = <span class="string">'wrap'</span>;</span><br><span class="line">    wrap.keyNum = e.keyNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制虚线</span></span><br><span class="line">    dashLine.ctx.shadowColor = <span class="string">'#a93e26'</span>;</span><br><span class="line">    dashLine.ctx.shadowBlur = <span class="number">20</span>;</span><br><span class="line">    dashLine.ctx.beginPath();</span><br><span class="line">    dashLine.ctx.lineWidth = <span class="number">6</span>;</span><br><span class="line">    dashLine.ctx.strokeStyle = <span class="string">'white'</span>;</span><br><span class="line">    dashLine.ctx.setLineDash([<span class="number">12</span> , <span class="number">12</span>]);</span><br><span class="line">    dashLine.ctx.moveTo(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    dashLine.ctx.lineTo(boxWidth , <span class="number">0</span>);</span><br><span class="line">    dashLine.ctx.lineTo(boxWidth , boxHeight);</span><br><span class="line">    dashLine.ctx.lineTo(<span class="number">0</span> , boxHeight);</span><br><span class="line">    dashLine.ctx.lineTo(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    dashLine.ctx.<span class="built_in">stroke</span>();</span><br><span class="line">    dashLine.ctx.closePath();</span><br><span class="line">    wrap.bitmapDatas = dashLine;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除按钮</span></span><br><span class="line">    <span class="keyword">const</span> close = customGame.<span class="built_in">add</span>.sprite(- <span class="number">27</span>, <span class="number">-23</span>,<span class="string">'objects'</span>,<span class="string">'close.png'</span>);</span><br><span class="line">    close.inputEnabled = <span class="keyword">true</span>;</span><br><span class="line">    close.events.onInputDown.<span class="built_in">add</span>(<span class="keyword">this</span>.deleteObject , <span class="keyword">this</span> , <span class="keyword">null</span> , e , e._frame.name);</span><br><span class="line">    wrap.addChild(close);</span><br><span class="line">    <span class="comment">//放大按钮</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">scale</span> = customGame.<span class="built_in">add</span>.sprite(boxWidth - <span class="number">27</span> , <span class="number">-23</span> , <span class="string">'objects'</span> , <span class="string">'scale.png'</span>);</span><br><span class="line">    <span class="built_in">scale</span>.inputEnabled = <span class="keyword">true</span>;</span><br><span class="line">    <span class="built_in">scale</span>.events.onInputDown.<span class="built_in">add</span>(function(ev , pt)&#123;</span><br><span class="line">        <span class="comment">//判断用户是否要缩放元素</span></span><br><span class="line">        <span class="keyword">this</span>.isOnTarget = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.onScaleTarget = e;</span><br><span class="line">        <span class="keyword">this</span>.onScaleTargetValue = e.<span class="built_in">scale</span>.x;</span><br><span class="line">    &#125; , <span class="keyword">this</span>);</span><br><span class="line">    </span><br><span class="line">    wrap.addChild(<span class="built_in">scale</span>);</span><br><span class="line">    <span class="keyword">this</span>.selectWrap = wrap;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>绘制虚线框使用了<code>BitmapData</code>api实现，<code>BitmapData</code>对象可以有canvas context的操作，可以作为图片或雪碧图的texture。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">create : function()&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">this</span>.bindScaleEvent();</span><br><span class="line">&#125;,</span><br><span class="line">bindScaleEvent : function()&#123;</span><br><span class="line">    <span class="keyword">this</span>.isOnTarget = <span class="literal">false</span>;    <span class="comment">//判断是否按了当前选中元素的缩放按钮</span></span><br><span class="line">    <span class="keyword">this</span>.onScaleTarget = <span class="literal">null</span>;      <span class="comment">//选中元素</span></span><br><span class="line">    <span class="keyword">this</span>.objectscaleRate = <span class="literal">null</span>;        <span class="comment">//通过滑动位置计算出得缩放倍数</span></span><br><span class="line">    <span class="keyword">this</span>.onScaleTargetValue = <span class="literal">null</span>;     <span class="comment">//选中元素当前的缩放倍数</span></span><br><span class="line"></span><br><span class="line">    customGame.input.addMoveCallback(function(e)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.isOnTarget) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        const currentMoveX = arguments[<span class="number">1</span>] == <span class="number">0</span> ? <span class="number">1</span> : arguments[<span class="number">1</span>];</span><br><span class="line">        const currentMoveY = arguments[<span class="number">2</span>] == <span class="number">0</span> ? <span class="number">1</span> : arguments[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.objectscaleRate)&#123;</span><br><span class="line">            <span class="keyword">this</span>.objectscaleRate = currentMoveX / currentMoveY;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        const currentRate = currentMoveX / currentMoveY;</span><br><span class="line">        <span class="comment">//元素的缩放要以上一次缩放后的倍数被基础进行缩放</span></span><br><span class="line">        let scaleRate = currentRate / <span class="keyword">this</span>.objectscaleRate - <span class="number">1</span> + <span class="keyword">this</span>.onScaleTargetValue;</span><br><span class="line">        scaleRate = scaleRate &lt;= <span class="number">0.25</span> ? <span class="number">0.25</span> : scaleRate &gt;=<span class="number">2</span> ? <span class="number">2</span> : scaleRate;</span><br><span class="line">        <span class="keyword">this</span>.onScaleTarget.scale.<span class="keyword">set</span>(scaleRate);</span><br><span class="line"></span><br><span class="line">        const dashLine = <span class="keyword">this</span>.selectWrap.bitmapDatas;</span><br><span class="line">        const onScaleTarget = <span class="keyword">this</span>.onScaleTarget;</span><br><span class="line">        const scaleBtn = <span class="keyword">this</span>.selectWrap.getChildAt(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        const offsetNum = <span class="number">10</span> , </span><br><span class="line">                width = onScaleTarget.width,</span><br><span class="line">                height = onScaleTarget.height, </span><br><span class="line">                offsetX = -width/<span class="number">2</span> ,</span><br><span class="line">                offsetY = -height / <span class="number">2</span>,</span><br><span class="line">                boxWidth = width + <span class="number">2</span>*offsetNum , </span><br><span class="line">                boxHeight = height + <span class="number">2</span>*offsetNum; </span><br><span class="line">        <span class="comment">//元素需要缩放，编辑框只缩放尺寸，不缩放按钮和虚线实际大小，因此每次缩放都要重新绘制虚线框</span></span><br><span class="line">        dashLine.clear(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.selectWrap.width , <span class="keyword">this</span>.selectWrap.height);</span><br><span class="line">        dashLine.resize(width + <span class="number">2</span>*offsetNum , height + <span class="number">2</span>*offsetNum)</span><br><span class="line">        <span class="keyword">this</span>.selectWrap.x = onScaleTarget.x + offsetX - offsetNum, </span><br><span class="line">        <span class="keyword">this</span>.selectWrap.y = onScaleTarget.y + offsetY - offsetNum;</span><br><span class="line">        scaleBtn.x = <span class="keyword">this</span>.selectWrap.width - <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        dashLine.ctx.shadowColor = <span class="string">'#a93e26'</span>;</span><br><span class="line">        dashLine.ctx.shadowBlur = <span class="number">20</span>;</span><br><span class="line">        dashLine.ctx.shadowOffsetX = <span class="number">0</span>;</span><br><span class="line">        dashLine.ctx.shadowOffsetY = <span class="number">0</span>;</span><br><span class="line">        dashLine.ctx.beginPath();</span><br><span class="line">        dashLine.ctx.lineWidth = <span class="number">6</span>;</span><br><span class="line">        dashLine.ctx.strokeStyle = <span class="string">'white'</span>;</span><br><span class="line">        dashLine.ctx.setLineDash([<span class="number">12</span> , <span class="number">12</span>]);</span><br><span class="line">        dashLine.ctx.moveTo(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        dashLine.ctx.lineTo(boxWidth , <span class="number">0</span>);</span><br><span class="line">        dashLine.ctx.lineTo(boxWidth , boxHeight);</span><br><span class="line">        dashLine.ctx.lineTo(<span class="number">0</span> , boxHeight);</span><br><span class="line">        dashLine.ctx.lineTo(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        dashLine.ctx.stroke();</span><br><span class="line">        dashLine.ctx.closePath();</span><br><span class="line">    &#125; , <span class="keyword">this</span>);</span><br><span class="line">    customGame.input.onUp.add(function()&#123;</span><br><span class="line">        <span class="keyword">this</span>.isOnTarget = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.onScaleTarget = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.objectscaleRate = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.onScaleTargetValue = <span class="literal">null</span>;</span><br><span class="line">    &#125; , <span class="keyword">this</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>由于元素的缩放都会改变尺寸，编辑框的只缩放虚线框尺寸，不改变按钮的尺寸大小，因此每次缩放都要清楚编辑框，重新绘制编辑框。</p><p><br></p><h4 id="4-生成长图"><a href="#4-生成长图" class="headerlink" title="4.生成长图"></a>4.生成长图</h4><p>生成长图较为简单，只需要通过<code>game.canvas.toDataURL</code>生成。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">createFinishBtn : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    finishBtn.events.onInputUp.add(<span class="keyword">this</span>.finishPuzzle , <span class="keyword">this</span>);</span><br><span class="line">&#125;,</span><br><span class="line">finishPuzzle : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//显示结果页</span></span><br><span class="line">    $(<span class="string">'.J_finish'</span>).show();</span><br><span class="line">    <span class="comment">//删除编辑框</span></span><br><span class="line">    <span class="keyword">this</span>.deleteCurrentWrap();</span><br><span class="line">    <span class="comment">//隐藏选择元素面板</span></span><br><span class="line">    <span class="keyword">this</span>.editGroup.visible = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//创建底部结果二维码等</span></span><br><span class="line">    <span class="keyword">this</span>.createResultBottom();</span><br><span class="line">    <span class="comment">//隐藏选择元素面板和创建底部结果二维码需要时间，需要间隔一段时候后再生成长图</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.uploadImage();</span><br><span class="line">    &#125; , <span class="number">100</span>);</span><br><span class="line">&#125;,</span><br><span class="line">uploadImage : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dataUrl = customGame.canvas.toDataURL(<span class="string">'image/jpeg'</span> , <span class="number">0.7</span>);</span><br><span class="line">    <span class="comment">//todo 可以在此将图片上传到服务器再更新到结果页</span></span><br><span class="line">    <span class="keyword">this</span>.showResult(dataUrl);</span><br><span class="line">&#125;,</span><br><span class="line">showResult : <span class="function"><span class="keyword">function</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.J_finish .result'</span>).attr(<span class="string">'src'</span> , src).css(&#123; <span class="attr">opacity</span> : <span class="number">1</span>&#125;);</span><br><span class="line">    $(<span class="string">'.J_finish .btm'</span>).css(&#123;<span class="attr">opacity</span> : <span class="number">1</span>&#125;);</span><br><span class="line">    $(<span class="string">'.J_finish .load'</span>).hide();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><br></p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>以上是这个h5的主要实现过程，由于代码细节较多，部分代码未贴出，需要配合源码阅读～～</p><p><a href="https://github.com/ZENGzoe/phaser-puzzle.git" target="_blank" rel="noopener">源码：https://github.com/ZENGzoe/phaser-puzzle.git</a><br><a href="https://zengzoe.github.io/phaser-puzzle/dist/">demo：https://zengzoe.github.io/phaser-puzzle/dist/</a><br><img src="/2019/01/24/如何用Phaser实现一个全家福拼图h5/07.png" alt=""></p><p><br></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://phaser.io/" target="_blank" rel="noopener">1.https://phaser.io/</a><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/01/24/如何用Phaser实现一个全家福拼图h5/02.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;# 一、Phaser介绍&quot;&gt;一、Phaser介绍&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;# 二、整体框架搭建&quot;&gt;二、整体框架搭建&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES2018新特性学习</title>
    <link href="http://zengzoe.github.io/2019/01/24/ES2018%E6%96%B0%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/"/>
    <id>http://zengzoe.github.io/2019/01/24/ES2018新特性学习/</id>
    <published>2019-01-23T20:33:40.000Z</published>
    <updated>2019-03-09T14:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>ES全称ECMAScript，下面将会列出ES2018（ES9）中已经进入stage-4的新特性。</p><h2 id="新特性列表"><a href="#新特性列表" class="headerlink" title="新特性列表"></a>新特性列表</h2><p>ES2018新特性有：</p><p>1.对象的扩展运算符<br><br>2.正则表达式的改进<br><br>3.异步迭代器和异步生成器<br><br>4.Promise的finally回调</p><h2 id="一、对象的拓展运算符"><a href="#一、对象的拓展运算符" class="headerlink" title="一、对象的拓展运算符"></a>一、对象的拓展运算符</h2><p>拓展运算符，也叫Rest/Spread，在ES6时提出了数组的扩展运算符，仅用于数组，而在ES9中则新增了对象的拓展运算符。扩展运算符用<code>...</code>表示。</p><h4 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h4><p><strong>ES6:</strong></p><p>example1:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">const arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">const [a,b,...c] = arr;</span><br><span class="line"></span><br><span class="line">console.log(a,b); <span class="comment">//1 2</span></span><br><span class="line">console.log(c);  <span class="comment">//[3,4,5]</span></span><br></pre></td></tr></table></figure><p>example2:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">const nums = [<span class="number">23</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">3</span>];</span><br><span class="line">const result = Math.max(...nums);</span><br><span class="line"></span><br><span class="line">console.log(result);    <span class="comment">//23</span></span><br></pre></td></tr></table></figure><p><strong>ES9:</strong></p><p>example3:</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">const obj = &#123; a : 1 , <span class="type">b</span> : 2 , <span class="type">c</span> : 3 , <span class="type">d</span> : 4&#125;;</span><br><span class="line">const &#123;a , b , ...z&#125; = obj;</span><br><span class="line"></span><br><span class="line">console.log(a,b);   //<span class="number">1</span> <span class="number">2</span></span><br><span class="line">console.log(z);     // &#123; c : 3 , <span class="type">d</span> : 4&#125;</span><br></pre></td></tr></table></figure><p>example4:</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">const obj1 = &#123; a : 1 , <span class="type">b</span> : 2&#125;;</span><br><span class="line">const obj2 = &#123;c : 3 , <span class="type">d</span> : 4&#125;;</span><br><span class="line"></span><br><span class="line">const obj3 = &#123;...obj1 , ...obj2&#125;; //合并对象</span><br><span class="line"></span><br><span class="line">console.log(obj3);      //&#123; a : 1 , <span class="type">b</span> : 2 , <span class="type">c</span> : 3 , <span class="type">d</span> : 4&#125;;</span><br></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>1.解构赋值必须是最后一个参数，否则会报错。</p><p>2.解构赋值的后的对象创建的是新的引用。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; a : <span class="number">1</span>&#125;; </span><br><span class="line"><span class="keyword">const</span> &#123;...obj2&#125; = obj1; </span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(obj2);  <span class="comment">//&#123; a : 1&#125;</span></span><br><span class="line"></span><br><span class="line">obj1.a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(obj1);  <span class="comment">// &#123; a : 2&#125;</span></span><br><span class="line">console.<span class="built_in">log</span>(obj2);  <span class="comment">//&#123; a : 1&#125;</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="二、正则表达式的改进"><a href="#二、正则表达式的改进" class="headerlink" title="二、正则表达式的改进"></a>二、正则表达式的改进</h2><p>在ES9中，对于正则表达式的改进主要有四个方面：</p><p>1.位置运算符<br>2.Unicode转义<br>3.命名捕获组<br>4.修饰符s</p><h4 id="用法：-1"><a href="#用法：-1" class="headerlink" title="用法："></a>用法：</h4><h5 id="1-位置修饰符"><a href="#1-位置修饰符" class="headerlink" title="1.位置修饰符"></a>1.位置修饰符</h5><p>位置修饰符主要有四个：</p><p><strong><code>q?=p</code></strong> ：捕获q的后面是有p的字符串</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">reg</span> = /hello(?= world)/;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>('a hello world sentences');    <span class="comment">//true</span></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>('a hello kugou');    <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong><code>q?!p</code></strong> ：捕获q的后面不为p的字符串</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">reg</span> = /hello(?= world)/;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>('a hello world sentences');    <span class="comment">//false</span></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>('a hello kugou');    <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong><code>(?&lt;=q)p</code></strong> ：捕获p前面有q的字符串</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">reg</span> = /(?&lt;=hello) world/;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>('a hello world sentences');    <span class="comment">//true</span></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>('a haha kugou');  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong><code>(?&lt;!q)p</code></strong> ：捕获p前面没有q的字符串</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">reg</span> = /(?&lt;!hello) world/;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>('a hello world sentences');    <span class="comment">//false</span></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>('a haha world');  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><br></p><h5 id="2-Unicode转义"><a href="#2-Unicode转义" class="headerlink" title="2.Unicode转义"></a>2.Unicode转义</h5><p>Unicode转义可以通过<code>\p{...}</code>捕获，<code>\P{...}</code>捕获的是不符合转义的字符串。大括号内可以传入不同类型的unicode字符关键字，以下是不同unicode字符关键字的示例：</p><p><strong>ASCII</strong> ：捕获ASCII 字符集的字符串</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">reg</span> = /^\p&#123;ASCII&#125;+$/<span class="keyword">u</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>('abc');    <span class="comment">//true</span></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>('abc🙃');  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><strong>ASCII_Hex_Digit</strong> ： 捕获16进制数字字符串</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">reg</span> = /^\p&#123;ASCII_Hex_Digit&#125;+$/<span class="keyword">u</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>('012EF');  <span class="comment">//true</span></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>('<span class="keyword">G</span>');  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><strong>Uppercase/Lowercase</strong> ： 捕获大或小写的字符串</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/\p&#123;Uppercase&#125;/u</span>.test(<span class="string">'A'</span>); <span class="regexp">//</span>true</span><br><span class="line"><span class="regexp">/\p&#123;Lowercase&#125;/u</span>.test(<span class="string">'a'</span>); <span class="regexp">//</span>true</span><br></pre></td></tr></table></figure><p><strong>White_Space</strong> ：捕获空格<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/\p&#123;White_Space&#125;/u</span>.test(<span class="string">' '</span>) <span class="regexp">//</span>true</span><br></pre></td></tr></table></figure></p><p><strong>Emoji</strong> ： 捕获emoji表情</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/\p&#123;Emoji&#125;/u</span>.test(<span class="string">'🙃'</span>);    <span class="regexp">//</span>true</span><br></pre></td></tr></table></figure><p>这里列出了部分的unicode关键字，还有其他更多可以查看<a href="https://github.com/tc39/proposal-regexp-unicode-property-escapes" target="_blank" rel="noopener">https://github.com/tc39/proposal-regexp-unicode-property-escapes</a></p><h5 id="3-命名捕获组"><a href="#3-命名捕获组" class="headerlink" title="3.命名捕获组"></a>3.命名捕获组</h5><p>捕获结果中新增了<code>groups</code>对象，可以将捕获一些字段放入捕获结果的groups中。格式为<code>(?&lt;name&gt;Regexp)</code>，其中<code>name</code>为groups中的<code>key</code>值，可以通过该<code>key</code>值拿到捕获的结果，<code>Regexp</code>为要捕获的正则表达式。</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = /(?&lt;<span class="built_in">year</span>&gt;\d&#123;<span class="number">4</span>&#125;)-(?&lt;<span class="built_in">month</span>&gt;\d&#123;<span class="number">2</span>&#125;)-(?&lt;<span class="built_in">day</span>&gt;\d&#123;<span class="number">2</span>&#125;)/</span><br><span class="line"><span class="keyword">const</span> result = reg.exec(<span class="string">'2015-01-02'</span>);</span><br><span class="line">console.<span class="built_in">log</span>(reuslt.groups);<span class="comment">//&#123;year: "2015", month: "01", day: "02"&#125;</span></span><br></pre></td></tr></table></figure><h5 id="4-修饰符s"><a href="#4-修饰符s" class="headerlink" title="4.修饰符s"></a>4.修饰符s</h5><p>增加了新的修饰符<code>s</code>，可以让<code>.</code>匹配任意的字符，包括换行符。又叫dot all。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/hello.world/</span>.test(<span class="string">'hello\nworld'</span>);<span class="regexp">//</span>false</span><br><span class="line"><span class="regexp">/hello.world/</span>s.test(<span class="string">'hello\nworld'</span>);<span class="regexp">//</span>true</span><br></pre></td></tr></table></figure><h2 id="三、异步迭代器和异步生成器"><a href="#三、异步迭代器和异步生成器" class="headerlink" title="三、异步迭代器和异步生成器"></a>三、异步迭代器和异步生成器</h2><h4 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h4><p>迭代器（Iterator）和生成器（Generator）于ES6中提出。</p><p>Iterator主要用于遍历不同的数据结构，遍历的数据结构要具有<code>Symbol.iterator</code>属性。Iterator中包含<code>next</code>方法，调用<code>next</code>方法可以返回两个值为<code>value</code>和<code>done</code>，<code>value</code>为返回的值，<code>done</code>为标识遍历是否结束，当为<code>false</code>时，遍历未结束，当为<code>true</code>时，遍历结束。ES6提供了<code>for...of</code>来遍历Iterator数据。</p><p>数组是默认具有<code>Symbol.iterator</code>属性的，以数组为例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr[<span class="built_in">Symbol</span>.iterator]);   <span class="comment">//function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a</span></span><br><span class="line"><span class="comment">//b</span></span><br><span class="line"><span class="comment">//c</span></span><br><span class="line"><span class="comment">//d</span></span><br><span class="line"><span class="comment">//e</span></span><br></pre></td></tr></table></figure><p>Generator函数是ES6提供的一种异步解决方案。执行Generator函数会返回一个遍历器对象，返回的遍历器对象，可以依次遍历Generator函数内部的每一个状态。Generator函数有两个特征，一是<code>function</code>关键字与函数名之间有一个<code>*</code>号，二是函数体内部使用<code>yield</code>表达式，定义不同的内部状态。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'start'</span>);</span><br><span class="line"><span class="built_in">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="built_in">yield</span> <span class="number">2</span>;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'end'</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const test = Test();</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(typeof test[Symbol.iterator]);  //<span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">test.next</span><span class="params">()</span></span>;    //start &#123;value: <span class="number">1</span>, done: <span class="literal">false</span>&#125;</span><br><span class="line">test.<span class="built_in">next</span>();    //&#123;value: <span class="number">2</span>, done: <span class="literal">false</span>&#125;</span><br><span class="line">test.<span class="built_in">next</span>();    //<span class="keyword">end</span> &#123;value: <span class="number">3</span>, done: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="异步迭代器和异步生成器"><a href="#异步迭代器和异步生成器" class="headerlink" title="异步迭代器和异步生成器"></a>异步迭代器和异步生成器</h4><p>异步迭代器与同步迭代器的区别在于，同步迭代器的<code>next</code>方法返回的是包含<code>value</code>和<code>done</code>的对象，异步迭代器的<code>next</code>方法返回的是promise对象，且promise对象回调中参数包含<code>value</code>和<code>done</code>对象。异步迭代器中包含的<code>Symbol.asyncIterator</code>属性。</p><figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line">asyncIterator.next<span class="literal">()</span>.<span class="keyword">then</span>((&#123;<span class="keyword">value</span> , <span class="keyword">done</span>&#125;) =&gt; &#123;</span><br><span class="line">    console.log(<span class="keyword">value</span> , <span class="keyword">done</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>异步生成器与普通生成器在于，异步生成器的定义加入了<code>async</code>，且内部可以使用<code>await</code>，返回的是一个具有<code>Symbol.asyncIterator</code>方法的对象。因此可以用异步生成器创建异步迭代器。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span>* <span class="title">Test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = Test();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test[<span class="built_in">Symbol</span>.asyncIterator]);    <span class="comment">//function</span></span><br></pre></td></tr></table></figure><p><code>for...of</code>只能用来遍历同步迭代器，因此ES9提供了<code>for...await...of</code>来遍历异步迭代器。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> item <span class="keyword">of</span> test)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="四、Promise的finally回调"><a href="#四、Promise的finally回调" class="headerlink" title="四、Promise的finally回调"></a>四、Promise的finally回调</h2><p>在ES9中，新增了Promise的<code>finally</code>回调函数，无论Promise返回结果是成功执行<code>then()</code>还是失败执行<code>catch()</code>，都会执行<code>finally</code>回调函数。</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">function test(num)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve , reject)</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(num == <span class="number">1</span>)&#123;</span><br><span class="line">resolve()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">reject();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'success'</span>)</span><br><span class="line">&#125;).<span class="keyword">finally</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'finally'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="regexp">//</span>success</span><br><span class="line"><span class="regexp">//</span><span class="keyword">finally</span></span><br><span class="line"></span><br><span class="line">test(<span class="number">2</span>).<span class="keyword">catch</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">&#125;).<span class="keyword">finally</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'finally'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="regexp">//</span>error </span><br><span class="line"><span class="regexp">//</span><span class="keyword">finally</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://flaviocopes.com/es2018/" target="_blank" rel="noopener">1.THE ES2018 GUIDE</a><br><br><a href="https://juejin.im/post/5c0fd5a26fb9a049c30b17fe" target="_blank" rel="noopener">2.ES9中的异步迭代器（Async iterator）和异步生成器（Async generator）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ES全称ECMAScript，下面将会列出ES2018（ES9）中已经进入stage-4的新特性。&lt;/p&gt;
&lt;h2 id=&quot;新特性列表&quot;&gt;&lt;a href=&quot;#新特性列表&quot; class=&quot;headerlink&quot; title=&quot;新特性列表&quot;&gt;&lt;/a&gt;新特性列表&lt;/h2&gt;&lt;p&gt;E
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面对JS的Event Loop终于不懵逼</title>
    <link href="http://zengzoe.github.io/2018/11/18/%E9%9D%A2%E5%AF%B9JS%E7%9A%84Event-Loop%E7%BB%88%E4%BA%8E%E4%B8%8D%E6%87%B5%E9%80%BC/"/>
    <id>http://zengzoe.github.io/2018/11/18/面对JS的Event-Loop终于不懵逼/</id>
    <published>2018-11-17T17:41:32.000Z</published>
    <updated>2019-03-09T14:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="#一、前言">一、前言</a><br><a href="#二、JS的事件运行机制">二、JS的事件运行机制</a><br><a href="#三、Macrotask和Microtask">三、Macrotask和Microtask</a><br><a href="#四、回到题目">四、回到题目</a><br><a href="#参考文档">参考文档</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看到一道这样的题：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"async1 begin"</span>);</span><br><span class="line">    <span class="keyword">await</span> async2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"async end"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"async2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"script start"</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"setTimeout"</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line">async1();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise1"</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"promise2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"script end"</span>);</span><br></pre></td></tr></table></figure><p>这道题里面涵盖了JS的事件运行机制的知识，在给出这道题答案之前，我们先了解下JS的事件运行机制是什么。</p><h2 id="JS的事件运行机制"><a href="#JS的事件运行机制" class="headerlink" title="JS的事件运行机制"></a>JS的事件运行机制</h2><p>JS是单线程编程语言，也就是Js里面的任务是一个个排好队执行的，前面的任务执行完再执行下一个任务。</p><p>接下来先看一段代码：</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">console.<span class="built_in">log</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>执行这段代码，发现结果是1,3,2。等等，Js是单线程的话，执行结果不应该是1,2,3吗？</p><p>原来，JS的主线程拥有一个执行栈和一个任务队列，执行栈用于执行当前任务，任务队列用于存放异步任务的回调函数。主线程在执行代码时，将同步的任务塞入执行栈中执行，执行完毕任务之后将该任务弹出执行栈。在遇到异步任务时，异步任务执行完之后会将结果放入到任务队列中。当执行栈中的任务执行完毕之后，就会读取任务队列，塞入执行栈中执行。执行栈执行完毕之后不断重复从任务队列中读取任务，这个过程又称为Event Loop（事件循环）。</p><p>上图来自Philip Roberts的<a href="https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html" target="_blank" rel="noopener">What the heck is the event loop anyway?</a></p><p><img src="/2018/11/18/面对JS的Event-Loop终于不懵逼/eventloop.png" alt=""></p><p>上图中详细的展示了JS的事件运行机制过程，左上角为执行栈，右上角为异步任务，异步任务执行完毕后将回调函数塞入底部的任务队列中。执行栈不断地从任务队列中读取任务。</p><h2 id="Macrotask和Microtask"><a href="#Macrotask和Microtask" class="headerlink" title="Macrotask和Microtask"></a>Macrotask和Microtask</h2><p>Event Loop中的异步任务有两种，Macrotask和Microtask。</p><p>属于Macrotask任务的有：<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>、<code>I/O</code>、<code>UI</code>渲染、<code>script</code>标签代码等</p><p>属于Microtask任务的有：<code>Promise</code>、<code>async/await</code>、<code>process.nextTick</code>、<code>Object.observe</code>、<code>MutationObserver</code>等</p><p><code>process.nextTick</code>和<code>setImmediate</code>是Node.js提供的api，其中<code>process.next</code>是在当前执行栈的最后，任务队列之前进行的回调函数，也就是在每次读取任务队列之前优先执行。</p><p>JS的事件运行机制详细到Macrotask和Microtask的过程是这样的：</p><ol><li><p>执行栈为空，Microtask队列为空，Macrotask队列里有<code>script</code>标签代码。</p></li><li><p>Macrotask队列中的<code>script</code>代码推入执行栈，执行同步任务。在这个过程中，如遇到新的Macrotask任务，塞入Macrotask队列中，如遇到新的Microtask任务，塞入到Microtask队列中。同步任务执行完毕之后，弹出执行栈。</p></li><li><p>上一步是读取Macrotask的任务，下一步是读取Microtask的任务。读取Macrotask队列和Microtask队列的区别在于，读取Macrotask的只读取排在前面一个任务，读取Microtask的是读取全部的任务，知道全部任务执行完毕。</p></li><li><p>读取完Microtask任务后，下一次又是读取Macrotask任务，如此循环，直到两个队列都清空了。</p></li></ol><h2 id="回到题目"><a href="#回到题目" class="headerlink" title="回到题目"></a>回到题目</h2><p>了解完JS的事件运行机制，我们可以回到最初的题目上，看看代码是如何执行的：</p><p>为方便讲解，将截出有序号的代码：</p><p><img src="/2018/11/18/面对JS的Event-Loop终于不懵逼/title.png" alt=""></p><p><strong>1. 执行栈为空，Microtask队列为空，Macrotask队列里有script全局代码。</strong></p><p><strong>2. 执行栈读取Macrotask队列，执行任务。</strong><br>执行到第10行，打印出<code>script start</code>。<br>执行到第11行，遇到<code>setTimeout</code>，<code>setTimeout</code>为Macrotask任务，塞入Macrotask队列中。<br>执行到第14行，进入<code>async1</code>函数，打印出<code>async1 begin</code>。<br>执行到第3行，进入<code>async2</code>函数，打印出<code>async2</code>，第3行有<code>await</code>修饰符，因此将后面的第四行代码塞入Microtask队列。<br>执行到第15、16行，打印出<code>promise1</code>，<code>Promise</code>为Microtask任务，将<code>Promise</code>回调函数塞入Microtask队列。<br>执行到第22行，打印出<code>script end</code>。当前Macrotask任务执行完毕，执行栈推出此任务。<br>此时，Macrotask队列有：第11行。Microtask队列有：第4行、第17行。</p><p><strong>3. 执行栈读取Microtask队列。栈是“先进后出，后进先出”。因此从后面开始执行。</strong><br>执行第17行，执行到19行，打印<code>promise2</code>。<br>执行第4行，打印<code>async end</code>。<br>执行栈一一推出任务，Microtask队列清空。<br>此时Macrotask队列有：第11行。Microtask队列为空。</p><p><strong>4. 执行栈读取Macrotask队列。</strong><br>执行第11行，执行到12行，打印出<code>setTimeout</code>。<br>执行栈推出此任务，Macrotask队列清空。<br>此时Macrotask队列为空，Microtask队列为空，任务结束。</p><p>到这里了解清楚了Event Loop，是不是就不懵逼了呢？</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html" target="_blank" rel="noopener">What the heck is the event loop anyway?</a><br><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank" rel="noopener">Tasks, microtasks, queues and schedules</a><br><a href="https://juejin.im/entry/58d4df3b5c497d0057eb99ff" target="_blank" rel="noopener">理解 JavaScript 中的 macrotask 和 microtask</a><br><a href="https://juejin.im/book/5b936540f265da0a9624b04b/section/5bb1815c6fb9a05d2d0233ad" target="_blank" rel="noopener">前端性能优化原理与实践-Event Loop与异步更新策略</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;#一、前言&quot;&gt;一、前言&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#二、JS的事件运行机制&quot;&gt;二、JS的事件运行机制&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#三、Macrotask和Microtask&quot;&gt;三、Macrotask和Microtask&lt;/a&gt;&lt;br&gt;&lt;a hr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于刮刮卡vue组件发布一个npm包</title>
    <link href="http://zengzoe.github.io/2018/10/21/%E5%9F%BA%E4%BA%8E%E5%88%AE%E5%88%AE%E5%8D%A1vue%E7%BB%84%E4%BB%B6%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AAnpm%E5%8C%85/"/>
    <id>http://zengzoe.github.io/2018/10/21/基于刮刮卡vue组件发布一个npm包/</id>
    <published>2018-10-21T13:50:49.000Z</published>
    <updated>2019-03-09T14:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/10/21/基于刮刮卡vue组件发布一个npm包/luckymask.png" alt=""></p><p><a href="#一、前言">一、前言</a><br><a href="#二、刮刮卡vue组件的实现">二、刮刮卡vue组件的实现</a><br><a href="#三、发布到npm">三、发布到npm</a><br><a href="#四、安装使用包">四、安装使用包</a><br><a href="#五、总结">五、总结</a></p><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>项目中需要实现一个刮刮卡的模块，项目结束后沉淀项目时刚好可以把刮刮卡模块封装好，在下次新的项目中要用到时，可以更好的提高项目的效率，当然也更好地提供给其他小伙伴使用。</p><p>源码地址：<a href="https://github.com/ZENGzoe/vue-scratch-card" target="_blank" rel="noopener">https://github.com/ZENGzoe/vue-scratch-card</a><br>npm包地址：<a href="https://www.npmjs.com/package/vue-scratch-card0" target="_blank" rel="noopener">https://www.npmjs.com/package/vue-scratch-card0</a></p><p>刮刮卡组件的效果如下：</p><p><img src="/2018/10/21/基于刮刮卡vue组件发布一个npm包/scratchCard.gif" alt=""></p><h2 id="二、刮刮卡vue组件的实现"><a href="#二、刮刮卡vue组件的实现" class="headerlink" title="二、刮刮卡vue组件的实现"></a>二、刮刮卡vue组件的实现</h2><p>刮刮卡功能的实现可以分三步：</p><h4 id="1-工作流的搭建"><a href="#1-工作流的搭建" class="headerlink" title="1.工作流的搭建"></a>1.工作流的搭建</h4><p>工作流使用的是<code>vue-cli</code>的<code>webpack-simple</code>模版，能够满足组件基本的编译要求：</p><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">vue init webpack-<span class="built_in">simple</span> vue-scratch-card</span><br></pre></td></tr></table></figure><p>执行后，根据组件录入package.json的信息。</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Use</span> sass? (y/<span class="keyword">N</span>) <span class="built_in">y</span></span><br></pre></td></tr></table></figure><p>在项目这里我选择的是<code>use sass</code>。</p><p>在<code>src</code>目录下创建<code>packages</code>目录，用于存放所有的子组件，在本组件中只有一个刮刮卡组件，因此在<code>packages</code>里新建<code>scratch-card</code>目录用于存放我们的刮刮卡组件。如果还有其他子组件，可以继续在<code>packages</code>添加子组件，最终目录如下：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── index.html</span><br><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   ├── main<span class="selector-class">.js</span>             <span class="comment">//组合所有子组件，封装组件</span></span><br><span class="line">│   ├── main<span class="selector-class">.js</span>             <span class="comment">//入口文件</span></span><br><span class="line">│   └── packages            <span class="comment">//用于存放所有的子组件</span></span><br><span class="line">│       └── scratch-card    <span class="comment">//用于存放刮刮卡组件</span></span><br><span class="line">│           └── scratch-card<span class="selector-class">.vue</span>   <span class="comment">//刮刮卡组件代码</span></span><br><span class="line">└── webpack<span class="selector-class">.config</span><span class="selector-class">.js</span></span><br></pre></td></tr></table></figure><p>为了支持组件可以使用标签<code>&lt;script&gt;</code>的方式引入，封装成组件的打包文件只需要统一打包为js：</p><p><img src="/2018/10/21/基于刮刮卡vue组件发布一个npm包/dist.png" alt=""></p><p>因此需要修改我们的配置文件<code>webpack.config.js</code>：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"> <span class="attribute">output</span>: &#123;</span><br><span class="line">    <span class="attribute">path</span>: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    <span class="attribute">publicPath</span>: <span class="string">'/dist/'</span>,</span><br><span class="line">    <span class="attribute">filename</span>: <span class="string">'vue-scratch-card.js'</span>,</span><br><span class="line">    <span class="attribute">library </span>: <span class="string">'vue-scratch-card'</span>,  <span class="comment">//设置的是使用require时的模块名</span></span><br><span class="line">    <span class="attribute">libraryTarget </span>: <span class="string">'umd'</span>,    <span class="comment">//libraryTarget可以设置不同的umd代码，可以是commonjs标准、amd标准，也可以生成通过script标签引入的</span></span><br><span class="line">    <span class="attribute">umdNamedDefine </span>: true,    <span class="comment">//会对UMD的构建过程中的amd模块进行命名，否则就用匿名的define</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>同时，为了保留打包的<code>dist</code>目录，需要在<code>.gitignore</code>中去掉<code>dist</code>目录。</p><p><br></p><h4 id="2-canvas实现刮刮卡"><a href="#2-canvas实现刮刮卡" class="headerlink" title="2.canvas实现刮刮卡"></a>2.canvas实现刮刮卡</h4><p>刮刮卡主要是通过<code>Canvas</code>实现，一般刮刮卡是和抽奖结合，那么我们的<code>DOM</code>应该要包含可以显示抽奖结果的<code>DOM</code>，结构如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scratch-card.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div :id=<span class="string">'elementId'</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">'scratchCard'</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"result"</span> v-show=<span class="string">'showLucky'</span>&gt;</span><br><span class="line">            &lt;slot name=<span class="string">'result'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">            &lt;img :src=<span class="string">"resultImg"</span> alt=<span class="string">""</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"pic"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;canvas id='scratchCanvas'&gt;&lt;/</span>canvas&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br></pre></td></tr></table></figure><p>其中，添加了一个<code>&lt;slot&gt;</code>插槽，为了可以在调用这个组件时，定制抽奖结果的<code>DOM</code>。</p><p>接下来是实现刮刮卡的逻辑部分。</p><p>大致js结构如下：</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scratch-card.vue</span></span><br><span class="line">    export <span class="keyword">default</span> &#123;</span><br><span class="line">        <span class="string">name :</span> <span class="string">'vueScratchCard'</span>,</span><br><span class="line">        data()&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">supportTouch :</span> <span class="literal">false</span>,       <span class="comment">//是否支持touch事件</span></span><br><span class="line">                <span class="string">events :</span> [],                <span class="comment">//touch事件 or mouse事件合集</span></span><br><span class="line">                <span class="string">startMoveHandler :</span> <span class="literal">null</span>,     <span class="comment">//touchstart or mousedown 事件</span></span><br><span class="line">                <span class="string">moveHandler :</span> <span class="literal">null</span>,         <span class="comment">//touchmove or mousemove 事件</span></span><br><span class="line">                <span class="string">endMoveHandler :</span> <span class="literal">null</span>,      <span class="comment">//touchend or mouseend 事件</span></span><br><span class="line">                <span class="string">showLucky :</span> <span class="literal">false</span>,          <span class="comment">//显示隐藏抽奖结果</span></span><br><span class="line">                <span class="string">firstTouch :</span> <span class="literal">true</span>,          <span class="comment">//是否第一次touchstart or mousedown</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">props :</span> &#123;</span><br><span class="line">            <span class="string">elementId :</span> &#123;   <span class="comment">//组件最外层DOM的id属性</span></span><br><span class="line">                <span class="string">type :</span> String,</span><br><span class="line">                <span class="string">default :</span> <span class="string">'scratch'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">moveRadius :</span> &#123;  <span class="comment">//刮刮范围</span></span><br><span class="line">                <span class="string">type :</span> Number,</span><br><span class="line">                <span class="string">default :</span> <span class="number">15</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">ratio :</span> &#123;   <span class="comment">//要求刮掉的面积占比，达到这个占比后，将会自动把其余区域清除</span></span><br><span class="line">                <span class="string">type :</span> Number,</span><br><span class="line">                <span class="string">default :</span> <span class="number">0.3</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">startCallback :</span> &#123;   <span class="comment">//第一次刮回调函数</span></span><br><span class="line">                <span class="string">type :</span> Function,</span><br><span class="line">                <span class="string">default :</span> function()&#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">clearCallback :</span> &#123;   <span class="comment">//达到ratio占比后的回调函数</span></span><br><span class="line">                <span class="string">type :</span> Function ,</span><br><span class="line">                <span class="string">default :</span> function()&#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">coverColor :</span> &#123;  <span class="comment">//刮刮卡遮罩颜色</span></span><br><span class="line">                <span class="string">type :</span> String,</span><br><span class="line">                <span class="string">default :</span> <span class="string">'#C5C5C5'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">coverImg :</span> &#123;    <span class="comment">//刮刮卡遮罩图片</span></span><br><span class="line">                <span class="string">type :</span> String,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">resultImg :</span> &#123;       <span class="comment">//中奖的图</span></span><br><span class="line">                <span class="string">type :</span> String,</span><br><span class="line">                <span class="string">default :</span> <span class="string">'https://raw.githubusercontent.com/ZENGzoe/imagesCollection/master/2018/default.jpg'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">mounted :</span> function()&#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">methods :</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>开始编写逻辑之前，需要考虑组件可配置属性，添加到<code>props</code>中，让组件的使用能够更加灵活。</p><p>在组件挂载到实例中时，开始初始化组件，绘制<code>Canvas</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scratch-card.vue</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">mounted : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">methods : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    init : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.isSupportCanvas)&#123;</span><br><span class="line">            alert(<span class="string">'当前浏览器不支持canvas'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> canvasWrap = <span class="built_in">document</span>.getElementById(<span class="keyword">this</span>.elementId);</span><br><span class="line">        <span class="keyword">this</span>.canvas =canvasWrap.querySelector(<span class="string">'#scratchCanvas'</span>);</span><br><span class="line">        <span class="keyword">this</span>.ctx = <span class="keyword">this</span>.canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">        <span class="keyword">this</span>.canvas.width = canvasWrap.clientWidth;</span><br><span class="line">        <span class="keyword">this</span>.canvas.height = canvasWrap.clientHeight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.createCanvasStyle();</span><br><span class="line">    &#125;,</span><br><span class="line">    createCanvasStyle : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">//当传入coverImg时，优先使用图片，否则使用颜色作为刮刮卡遮罩</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.coverImg)&#123;</span><br><span class="line">            <span class="keyword">var</span> coverImg = <span class="keyword">new</span> Image();</span><br><span class="line">            coverImg.src = <span class="keyword">this</span>.coverImg;</span><br><span class="line">            coverImg.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                _this.ctx.drawImage(coverImg , <span class="number">0</span> , <span class="number">0</span> , _this.canvas.width , _this.canvas.height);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            _this.ctx.fillStyle = _this.coverColor;</span><br><span class="line">            _this.ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,_this.canvas.width , _this.canvas.height);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>当需要向<code>Canvas</code>添加跨域图片时，需要将图片转为base64。</p><p>｀PC<code>页面绑定的事件为</code>mousesdown<code>、</code>mousemove<code>、</code>mouseup<code>，移动端页面中绑定的事件为</code>touchstart<code>、</code>touchmove<code>、</code>touchend`，因此需要区分在不同端的事件绑定。</p><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scratch-card.vue</span></span><br><span class="line">...</span><br><span class="line"><span class="attribute">init</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">this</span>.bindEvent();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attribute">bindEvent</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">'ontouchstart'</span> <span class="keyword">in</span> <span class="built_in">window</span>) <span class="keyword">this</span>.supportTouch = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.events = <span class="keyword">this</span>.supportTouch ? [<span class="string">'touchstart'</span>, <span class="string">'touchmove'</span>, <span class="string">'touchend'</span>] : [<span class="string">'mousedown'</span>, <span class="string">'mousemove'</span>, <span class="string">'mouseup'</span>];</span><br><span class="line">    <span class="keyword">this</span>.addEvent();</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>为了减少篇幅，绑定事件<code>addEvent</code>的具体实现，可以查看源码。</p><p>刮刮卡擦拭的效果由<code>Canvas</code>的<code>globalCompositeOperation</code>属性实现，设置<code>globalCompositeOperation = &quot;destination-out&quot;</code>让手指或鼠标与<code>Canvas</code>画布重合区域不可见，就可以让刮刮卡的擦拭效果。在<code>touchmove</code>和<code>mousemove</code>绑定的事件中添加擦拭效果。实现如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">moveEventHandler : <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    </span><br><span class="line">    e = <span class="keyword">this</span>.supportTouch ? e.touches[<span class="number">0</span>] : e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> canvasPos = <span class="keyword">this</span>.canvas.getBoundingClientRect(),</span><br><span class="line">          scrollT = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop,</span><br><span class="line">          scrollL = <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">document</span>.body.scrollLeft,</span><br><span class="line">           <span class="comment">//获取鼠标或手指在canvas画布的位置</span></span><br><span class="line">          mouseX = e.pageX - canvasPos.left - scrollL, </span><br><span class="line">          mouseY = e.pageY - canvasPos.top - scrollT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">    <span class="keyword">this</span>.ctx.fillStyle = <span class="string">'#FFFFFF'</span>;</span><br><span class="line">    <span class="keyword">this</span>.ctx.globalCompositeOperation = <span class="string">"destination-out"</span>;</span><br><span class="line">    <span class="keyword">this</span>.ctx.arc(mouseX, mouseY, <span class="keyword">this</span>.moveRadius, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    <span class="keyword">this</span>.ctx.fill();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>每次手指或鼠标离开时，计算擦拭区域，当擦去的区域大于画布的约定的百分比时，清除整个<code>Canvas</code>画布。擦拭区域的计算相当于计算画布上的像素点是否还有数据，通过<code>getImageData</code>方法可获取画布的像素点。具体实现如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">caleArea : function()&#123;</span><br><span class="line">    let pixels = <span class="keyword">this</span>.ctx.getImageData(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.canvas.width,<span class="keyword">this</span>.canvas.height),</span><br><span class="line">        transPixels = [];</span><br><span class="line">    </span><br><span class="line">    pixels.<span class="keyword">data</span>.map((item , i) =&gt; &#123;</span><br><span class="line">        const pixel = pixels.<span class="keyword">data</span>[i+<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">if</span>(pixel === <span class="number">0</span>)&#123;</span><br><span class="line">            transPixels.push(pixel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(transPixels.length / pixels.<span class="keyword">data</span>.length &gt; <span class="keyword">this</span>.ratio)&#123;</span><br><span class="line">        <span class="keyword">this</span>.ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.canvas.width , <span class="keyword">this</span>.canvas.height);</span><br><span class="line">        <span class="keyword">this</span>.canvas.removeEventListener(<span class="keyword">this</span>.events[<span class="number">0</span>],<span class="keyword">this</span>.startMoveHandler);</span><br><span class="line">        <span class="keyword">this</span>.canvas.removeEventListener(<span class="keyword">this</span>.events[<span class="number">1</span>] , <span class="keyword">this</span>.moveHandler , <span class="literal">false</span>);</span><br><span class="line">        document.removeEventListener(<span class="keyword">this</span>.events[<span class="number">2</span>] , <span class="keyword">this</span>.endMoveHandler , <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.clearCallback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次手指或鼠标离开时，为了不污染其他区域的事件和占用内容，要清除绑定的事件。</p><p>那么到这里就实现了刮刮卡的所有逻辑，接下来就是要将刮刮卡组件封装成插件。</p><p><br></p><h4 id="3-封装成插件"><a href="#3-封装成插件" class="headerlink" title="3.封装成插件"></a>3.封装成插件</h4><p>将VUE组件封装成插件，就应该有一个公开的<code>install</code>方法，这样才可以通过<code>Vue.use()</code>调用插件。详细介绍可以看VUE的<a href="https://cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="noopener">官方文档</a>。</p><p>在<code>scratch-card</code>目录中新建<code>index.js</code>，用来封装<code>scratchCard</code>的<code>install</code>方法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scratch-card/index.js</span></span><br><span class="line"><span class="keyword">import</span> vueScratchCard <span class="keyword">from</span> <span class="string">'./scratch-card'</span></span><br><span class="line"></span><br><span class="line">vueScratchCard.install = <span class="function"><span class="params">Vue</span> =&gt;</span> Vue.component(vueScratchCard.name , vueScratchCard);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue)&#123;</span><br><span class="line">    <span class="built_in">window</span>.Vue.use(vueScratchCard);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> vueScratchCard;</span><br></pre></td></tr></table></figure><p>到这里我们封装好了我们的子组件刮刮卡，如果有其他子组件，可以继续往<code>packages</code>目录中添加，最后在<code>src</code>目录下新建<code>index.js</code>，组合所有的子组件。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> VueScratchCard <span class="keyword">from</span> <span class="string">'./packages/scratch-card/index.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue , opts = &#123;&#125;</span>)</span>&#123;</span><br><span class="line">    Vue.component(VueScratchCard.name , VueScratchCard);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//支持使用标签&lt;script&gt;的方式引入</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue)&#123;</span><br><span class="line">    install(<span class="built_in">window</span>.Vue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    install ,</span><br><span class="line">    VueScratchCard</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就完成了我们的组件啦～～</p><h2 id="三、发布到npm"><a href="#三、发布到npm" class="headerlink" title="三、发布到npm"></a>三、发布到npm</h2><p>发布到<code>npm</code>前，需要修改<code>package.json</code>，设置<code>&quot;private&quot;:true</code>，否则<code>npm</code>会拒绝发布私有包。除此之外，还需要添加入口文件，<code>&quot;main&quot;:&quot;dist/vue-scratch-card.js&quot;</code>，可以在当<code>require</code>或<code>import</code>包时加载模块。</p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"main"</span> : <span class="string">"dist/vue-scratch-card.js"</span>,</span><br></pre></td></tr></table></figure><p>npm发布流程如下：</p><p>1.在<a href="https://www.npmjs.com" target="_blank" rel="noopener">npm</a>注册账号</p><p>2.登陆npm，需要将镜像地址改为npm</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> login</span><br></pre></td></tr></table></figure><p>3.添加用户信息，输入账号密码</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> adduser</span><br></pre></td></tr></table></figure><p>4.发布</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> publish</span><br></pre></td></tr></table></figure><p>发布成功后，就可以在<a href="https://www.npmjs.com" target="_blank" rel="noopener">npm</a>搜索到发布的包。</p><p><br></p><h2 id="四、安装使用包"><a href="#四、安装使用包" class="headerlink" title="四、安装使用包"></a>四、安装使用包</h2><p>之后我们就可以在直接安装使用了～～</p><p>安装：</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span>vue-<span class="keyword">scratch-card0 </span>-S</span><br></pre></td></tr></table></figure><p>使用：</p><p>1.通过import使用</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">import ScratchCard from <span class="string">'vue-scratch-card0'</span></span><br><span class="line">Vue.<span class="keyword">use</span>(ScratchCard)</span><br><span class="line"></span><br><span class="line">&lt;vue-scratch-card </span><br><span class="line">    element-id=<span class="string">'scratchWrap'</span></span><br><span class="line">    <span class="symbol">:ratio=</span><span class="number">0</span>.<span class="number">5</span></span><br><span class="line">    <span class="symbol">:move-radius=</span><span class="number">50</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>2.通过标签<code>&lt;script&gt;</code>引用</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">vue-scratch-card</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">element-id</span>=<span class="string">'scratchWrap'</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:ratio</span>=<span class="string">0.5</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:move-radius</span>=<span class="string">50</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:start-callback</span>=<span class="string">startCallback</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:clear-callback</span>=<span class="string">clearCallback</span></span></span><br><span class="line"><span class="tag">    <span class="attr">cover-color</span>=<span class="string">'#caa'</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el : <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">      data () &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      methods : &#123;</span></span><br><span class="line"><span class="undefined">        startCallback()&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">'抽奖成功！'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        clearCallback()&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">'清除完毕！'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>发布npm包时，一直提示<code>Package name too similar to existing packages</code>，但是在npm官网中，又没有查到命名相同的包，这个时候就不停的换<code>package.json</code>中的name，最后终于发布成功了，太不容易了～_～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/10/21/基于刮刮卡vue组件发布一个npm包/luckymask.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#一、前言&quot;&gt;一、前言&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#二、刮刮卡vue组件的实现&quot;&gt;二、刮刮卡vue组件的实现
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://zengzoe.github.io/2018/09/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://zengzoe.github.io/2018/09/24/正则表达式/</id>
    <published>2018-09-24T10:45:39.000Z</published>
    <updated>2019-03-09T14:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于正则表达式可是又爱又恨，爱的是正则表达式在编程中实用作用大，恨的是学了太容易忘记，因此将正则表达式的语法记录下来，加深记忆，又方便查阅。</p><p>正则表达式（Regular Expression，简写：RegExp）可以用来匹配或替换某些模式的字符，而正则表达式则是这些模式。</p><p>当写的正则表达式不确定是否正确时，可以使用测试工具测试：<a href="http://tool.oschina.net/regex/" target="_blank" rel="noopener">在线表达式测试</a>。当不太确定正则表达式的意思时，可以使用分析工具分析：<a href="https://jex.im/regulex/" target="_blank" rel="noopener">正则分析器</a>。</p><p><br></p><h2 id="创建RegExp"><a href="#创建RegExp" class="headerlink" title="创建RegExp"></a>创建RegExp</h2><p>创建正则表达式的方法有两种：</p><p><strong>1. 直接量语法</strong></p><p>直接通过斜杠<code>/</code>包住元字符即可声明一个正则表达式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/hello/</span></span><br></pre></td></tr></table></figure><p><strong>2. 创建RegExp对象的语法</strong></p><p>通过RegExp实例化：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'hello'</span> , <span class="string">'g'</span>)</span><br></pre></td></tr></table></figure><p>RegExp第一个参数为正则表达式，第二个参数可选，修饰符。下面将会有详解介绍。</p><p><br></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>正则表达式由一些普通的字符和元字符组成。普通的字符比如匹配hello这个字符，那么正则表达式可以写为/hello/。而元字符有多种，可以根据元字符的用法分为几类：基本元字符、定义类元字符、数量类元字符、位置类元字符、修饰符类字符。</p><h4 id="基本元字符："><a href="#基本元字符：" class="headerlink" title="基本元字符："></a>基本元字符：</h4><p>基本元字符划分较基本的元字符：</p><ol><li><p><code>.</code> : 匹配除换行符<code>\n</code>之外的任何字符。如<code>/./</code>，可以匹配<code>a</code>、<code>A</code>或<code>_</code>等非换行符字符。</p></li><li><p><code>\</code> : 与下一个字符搭配，匹配为一个特殊字符。如<code>/n/</code>，匹配的是一个<code>n</code>字符，如果正则表达式为<code>/\n/</code>，则匹配一个换行符。</p></li><li><p><code>|</code> : 逻辑或操作符。</p></li></ol><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">var reg = /hello|world/g,</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">'world'</span>;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.<span class="built_in">match</span>(reg))  <span class="comment">// ["world"]</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>[ ]</code> : 匹配字符的合集，可匹配集合中的任何一个字符。在<code>[ ]</code>中<code>.</code>、<code>*</code>、<code>\</code>等表示其本身。</li></ol><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">var reg = /<span class="number">1</span>[<span class="number">234</span>]<span class="number">2</span>/g,</span><br><span class="line">    str = '<span class="number">12</span> <span class="number">122</span> <span class="number">112</span> <span class="number">1321</span>';</span><br><span class="line"></span><br><span class="line">console.log(str.match(reg)) <span class="comment">// ["122", "132"]</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p><code>[^]</code> :  表示非，对集合里面的字符取非。如<code>[^.*]</code>，可以匹配不为<code>.</code>或<code>*</code>的字符。</p></li><li><p><code>-</code> : 在<code>[]</code>中使用，定义一个区间。如<code>/[a-z]/</code>，可以匹配a到z的小写字母。</p></li><li><p><code>()</code> : 表示分组。</p></li></ol><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以用来匹配hello xxx也可以用来匹配helloworld</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = /(hello|helloworld) xxx/;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">reg</span>.<span class="keyword">test</span>('hello xxx'))      <span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">reg</span>.<span class="keyword">test</span>('helloworld xxx')) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><code>()</code>还可以用来表示捕获括号，捕获括号里的表达式叫做子表达式，捕获的子串可以通过RegExp的属性<code>$1、$2...$9</code>获得。</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = /(\<span class="keyword">d</span>+)-(\<span class="keyword">d</span>+)-(\<span class="keyword">d</span>+)/,</span><br><span class="line">    str = '1980-9-8';</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>(str);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(RegExp.<span class="variable">$1</span>); <span class="comment">//"1980"</span></span><br><span class="line">console.<span class="built_in">log</span>(RegExp.<span class="variable">$2</span>); <span class="comment">//"9"</span></span><br><span class="line">console.<span class="built_in">log</span>(RegExp.<span class="variable">$3</span>); <span class="comment">//"8"</span></span><br></pre></td></tr></table></figure><p>如果不想捕获，只想使用分组的功能，可以使用<code>(?:p)</code>表示不捕获。</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = /(\<span class="keyword">d</span>+)-(?:\<span class="keyword">d</span>+)-\<span class="keyword">d</span>+/,</span><br><span class="line">    str = '1980-9-7';</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">test</span>(str);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(RegExp.<span class="variable">$1</span>); <span class="comment">//"1980"</span></span><br><span class="line">console.<span class="built_in">log</span>(RegExp.<span class="variable">$2</span>); <span class="comment">//""</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="定义类元字符："><a href="#定义类元字符：" class="headerlink" title="定义类元字符："></a>定义类元字符：</h4><p>定义类元字符表示用某些字符表示一类字符：</p><ol><li><p><code>\d</code> : 匹配一个数字字符，等价于<code>/[0-9]/</code>。digit的缩写。</p></li><li><p><code>\D</code> : 匹配一个非数字的字符，等价于<code>/[^0-9]/</code>。</p></li><li><p><code>\w</code> : 匹配一个大小写字母数字下划线的字符，等价于<code>/[a-zA-Z0-9_]/</code>。word的缩写。</p></li><li><p><code>\W</code> : 匹配一个非大小写字母数字下划线的字符，等价于<code>/[^a-zA-Z0-9_]/</code>。</p></li><li><p><code>\s</code> : 匹配一个空白符，包括空格、换行符（<code>\n</code>）、回车符（<code>\r</code>）、水平制表符（<code>\t</code>）、垂直制表符（<code>\v</code>）、换页符（<code>\f</code>），等价于<code>/[\n\r\t\v\f]/</code>。space的缩写。</p></li><li><p><code>\S</code> : 表示一个非空白符。等价于<code>/[^\n\r\t\v\f]/</code>。</p></li></ol><p><br></p><h4 id="数量类元字符："><a href="#数量类元字符：" class="headerlink" title="数量类元字符："></a>数量类元字符：</h4><p>数量类元字符表示前面的字符匹配的数量：</p><ol><li><p><code>{m}</code> : 表示前面的字符重复m次。如<code>/\d{2}/</code>，匹配两个数字，如可以匹配12。</p></li><li><p><code>{m,n}</code> : 表示前面的字符至少重复m次，至多重复n次。如<code>/\d{2,4}/</code>，123和32都可以匹配得到。另外，{m,}表示至少m次。</p></li><li><p><code>?</code> : 表示前面的字符出现0次或1次。等价于{0,1}。还有一种情况，默认情况下，正则的匹配是贪婪模式，<code>?</code>如果跟在量词<code>*</code>、<code>{}</code>、<code>?</code>、<code>+</code>后面，就会使得匹配变成非贪婪模式。下面将会介绍贪婪模式和非贪婪模式。</p></li></ol><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">//贪婪模式: 尽可能的匹配更多的字符</span></span><br><span class="line">var reg = /\w&#123;<span class="number">2</span>,<span class="number">4</span>&#125;/;</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">'abcde'</span>;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.<span class="built_in">match</span>(reg)[<span class="number">0</span>]); <span class="comment">//abcd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//贪婪模式：按照至少的字符量来匹配</span></span><br><span class="line">var reg2 = /\w&#123;<span class="number">2</span>,<span class="number">4</span>&#125;?/;</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">'abcde'</span>;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.<span class="built_in">match</span>(reg2)[<span class="number">0</span>]);  <span class="comment">//ab</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p><code>+</code> : 表示前面的字符至少出现一次。等价于{1,}。</p></li><li><p><code>*</code> : 表示前面的字符出现零次或多次。等价于{0,}。</p></li></ol><p><br></p><h4 id="位置类元字符："><a href="#位置类元字符：" class="headerlink" title="位置类元字符："></a>位置类元字符：</h4><p>位置类元字符匹配的是位置，而非前面所说的字符。如字符串<code>abc</code>，这个字符共有4个位置：(位置)a(位置)b(位置)c(位置)。</p><ol><li><p><code>^</code> : 匹配的是表达式的开始位置。</p></li><li><p><code>$</code> : 匹配的是表达式的结束位置。</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在abc的开始位置和结束位置插入`*`</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^|$/g</span>,</span><br><span class="line">    str = <span class="string">'abc'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg , <span class="string">'*'</span>)) <span class="comment">//*abc*</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>(?=p)</code> : 匹配的是<code>p</code>前面的位置。如在字符<code>aa</code>前插入<code>bb</code>：</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'baac'</span>.replace(<span class="regexp">/(?=aa)/</span>,<span class="string">'bb'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">//bbbaac</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>(?!0)</code> : 匹配的不是<code>p</code>前面的位置。如在非字符<code>aa</code>前插入<code>dd</code>：</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'baac'</span>.replace(<span class="regexp">/(?!aa)/</span>,<span class="string">'dd'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">//ddbaac</span></span><br></pre></td></tr></table></figure><ol start="5"><li><code>\b</code> : 匹配单词的边界。单词边界指的是<code>\w([a-zA-Z0-9_])</code>和<code>\W</code>之前的边界，包括<code>\w</code>和<code>^</code>以及<code>$</code>之间的位置。</li></ol><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在单词边界插入*</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = /\b/<span class="keyword">g</span>,</span><br><span class="line">    str = 's<span class="variable">$kdh</span> ssdf[<span class="keyword">ac</span>] s_c#';</span><br><span class="line">str.<span class="keyword">replace</span>(<span class="keyword">reg</span> , '*')    <span class="comment">//*s*$*kdh* *ssdf*[*ac*] *s_c*#</span></span><br></pre></td></tr></table></figure><ol start="6"><li><code>\B</code> : 匹配非单词的边界。</li></ol><p><br></p><h4 id="修饰符类字符："><a href="#修饰符类字符：" class="headerlink" title="修饰符类字符："></a>修饰符类字符：</h4><ol><li><code>g</code> : 全局匹配</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用*代替ab，reg1为全局搜索，reg2未设全局搜索</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/ab/g</span>,   <span class="comment">//全局搜索，全部匹配的结果都替换掉</span></span><br><span class="line">    reg2 = <span class="regexp">/ab/</span>;    <span class="comment">//搜索成功一次就替换，不搜索下去</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abc abd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg1 , <span class="string">'*'</span>))   <span class="comment">//"*c *d"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg2 , <span class="string">'*'</span>))   <span class="comment">//"*c abd"</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>i</code> : 不区分大小写匹配</li></ol><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询字符串中是否包含a</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = /a/i,</span><br><span class="line">    reg2 = /a/;</span><br><span class="line"><span class="keyword">var</span> str = 'BAC';</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">reg</span>.<span class="keyword">test</span>(str))   <span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(reg2.<span class="keyword">test</span>(str))  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>m</code> : 多行搜索</li></ol><p><br></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>对于正则来说，可以有两种类型的调用方法进行：一个是正则对象上的方法，一个是string对象上的方法。</p><h4 id="正则对象上的方法"><a href="#正则对象上的方法" class="headerlink" title="正则对象上的方法"></a>正则对象上的方法</h4><p>正则对象上的方法有<code>test</code>、<code>exec</code>：</p><p><strong>1.test方法</strong></p><p>用于检测一个字符串是否匹配某个模式。</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">RegExpObject.test(<span class="built_in">string</span>)</span><br></pre></td></tr></table></figure><p>参数为一个字符串。如果匹配返回true，不匹配返回false。</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = /abc/,</span><br><span class="line">    str = 'abcedf';</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">reg</span>.<span class="keyword">test</span>(str)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><br><br><strong>2.exec方法</strong></p><p>用来检索字符串中的正则表达式的匹配。</p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">RegExpObject.<span class="built_in">exec</span>(<span class="keyword">string</span>)</span><br></pre></td></tr></table></figure><p>参数为一个字符串。当匹配时，返回一个数组。否则返回null。</p><p>返回的数组中，第0个元素为匹配的字符，第1个元素（如果有子表达式的话）为RegExpObject的第1个字表达式相匹配的的字符，第2个元素(如果有的话)为RegExpObject的第2个字表达式相匹配的的字符，以此类推。除此之外返回的数组还包含两个属性<code>index</code>和<code>input</code>，<code>index</code>为第0个元素匹配字符的第一个字符的位置，<code>input</code>为被检索的原字符string。</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = /([a-z])[a-z]&#123;1,3&#125;/;</span><br><span class="line"><span class="keyword">var</span> str = '<span class="keyword">ac</span> abcd eabc abcdes 23abc';</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">reg</span>.exec(str))  <span class="comment">//["ac", "a", index: 0, input: "ac abcd eabc abcdes 23abc", groups: undefined]</span></span><br></pre></td></tr></table></figure><p>还有另外一种情况，当RegExpObject为全局检索时，第一次检索时匹配的开始位置为0，即RegExpObject的属性lastIndex为0，第二次检索会从第一次匹配成功的字符的下一个位置开始检索，此时lastIndex为下一个位置，第三次检索会从第二次匹配成功的字符的下一个位置开始检索，以此类推，直到最后没有匹配返回null。</p><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">var reg = /([a-z])[a-z]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;/,</span><br><span class="line">    reg2 = /([a-z])[a-z]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;/g;</span><br><span class="line">var <span class="built_in">str</span> = <span class="string">'ac abcd eabc abcdes 23abc'</span>;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(reg.<span class="built_in">exec</span>(<span class="built_in">str</span>))  <span class="comment">//["ac", "a", index: 0, input: "ac abcd eabc abcdes 23abc", groups: undefined]</span></span><br><span class="line">console.<span class="built_in">log</span>(reg.lastIndex) <span class="comment">//0</span></span><br><span class="line">console.<span class="built_in">log</span>(reg.<span class="built_in">exec</span>(<span class="built_in">str</span>))  <span class="comment">//["ac", "a", index: 0, input: "ac abcd eabc abcdes 23abc", groups: undefined]</span></span><br><span class="line">console.<span class="built_in">log</span>(reg.lastIndex) <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(reg2.lastIndex);    <span class="comment">//0</span></span><br><span class="line">console.<span class="built_in">log</span>(reg2.<span class="built_in">exec</span>(<span class="built_in">str</span>));    <span class="comment">//["ac", "a", index: 0, input: "ac abcd eabc abcdes 23abc", groups: undefined]</span></span><br><span class="line">console.<span class="built_in">log</span>(reg2.lastIndex);    <span class="comment">//2</span></span><br><span class="line">console.<span class="built_in">log</span>(reg2.<span class="built_in">exec</span>(<span class="built_in">str</span>));    <span class="comment">//["abcd", "a", index: 3, input: "ac abcd eabc abcdes 23abc", groups: undefined]</span></span><br></pre></td></tr></table></figure><p>因此可以在循环中反复调用exec获得全部的匹配信息：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/([a-z])[a-z]&#123;1,3&#125;/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'2ac abcd'</span>;</span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"><span class="keyword">while</span>((result = reg2.exec(str)) !== <span class="literal">null</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="built_in">console</span>.log(reg2.lastIndex)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//["ac", "a", index: 1, input: "2ac abcd", groups: undefined]</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//["abcd", "a", index: 4, input: "2ac abcd", groups: undefined]</span></span><br><span class="line"><span class="comment">//8</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="string对象上的方法"><a href="#string对象上的方法" class="headerlink" title="string对象上的方法"></a>string对象上的方法</h4><p>string对象上支持正则的方法有：search、match、replace、split</p><p><strong>1.search</strong></p><p>用于检索字符串中与正则表达式匹配的字符的位置。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">stringObject</span><span class="selector-class">.search</span>(<span class="selector-tag">regexp</span>)</span><br></pre></td></tr></table></figure><p>如果找到匹配的字符串则返回匹配的第一个字符的位置，否则，返回－1。</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = /\<span class="keyword">d</span>/,</span><br><span class="line">    str = 'hello 2 world';</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(str.<span class="keyword">search</span>(<span class="keyword">reg</span>));       <span class="comment">//6</span></span><br></pre></td></tr></table></figure><p><br><br><strong>2.match</strong></p><p>用于检索字符串中匹配的字符。</p><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">stringObject.<span class="keyword">match</span>(regexp)</span><br></pre></td></tr></table></figure><p>如果检索到匹配的字符，则返回一个数组，否则，返回null。</p><p>当regexp不是全局匹配时，match方法返回的数组和exec方法没用全局匹配返回的数组相同。第0个元素为匹配的字符，第1个元素（如果有子表达式的话）为RegExpObject的第1个字表达式相匹配的的字符，以此类推。还有<code>index</code>和<code>input</code>属性。</p><p>当regexp是搜索时，match方法返回的包含所有匹配的字符的数据。</p><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">var reg = /([a-z])[a-z]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;/,</span><br><span class="line">    reg2 = /([a-z])[a-z]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;/g;</span><br><span class="line">var str = <span class="string">'ac abcd eabc abcdes 23abc'</span>;</span><br><span class="line"></span><br><span class="line">console.log(str.match(reg)); //[<span class="string">"ac"</span>, <span class="string">"a"</span>, index: <span class="number">0</span>, input: <span class="string">"ac abcd eabc abcdes 23abc"</span>, groups: undefined]</span><br><span class="line"></span><br><span class="line">console.log(str.match(reg2)); // [<span class="string">"ac"</span>, <span class="string">"abcd"</span>, <span class="string">"eabc"</span>, <span class="string">"abcd"</span>, <span class="string">"es"</span>, <span class="string">"abc"</span>]</span><br></pre></td></tr></table></figure><p><br><br><strong>3.replace</strong></p><p>用于替换正则表达式匹配的字符。</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">stringObject.<span class="built_in">replace</span>(regexp,<span class="keyword">string</span>/<span class="function"><span class="keyword">function</span>)</span></span><br></pre></td></tr></table></figure><p>第一个参数为正则表达式，第二个参数为替换文本或函数，返回的是替换之后的新字符串。</p><p>如果regexp是全局检索的，那么replace方法将会替换所有匹配的子串。否则，它只替换第一个匹配的子串。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/xxx/</span>,</span><br><span class="line">    reg2 = <span class="regexp">/xxx/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello xxx , welcom to xxx world'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg , <span class="string">'John'</span>));  <span class="comment">//"hello John , welcom to xxx world"</span></span><br><span class="line"></span><br><span class="line">str.replace(reg2 , <span class="string">'John'</span>);     <span class="comment">// "hello John , welcom to John world"</span></span><br></pre></td></tr></table></figure><p>第二个参数中可以使用具有特殊意义的<code>$</code>符号匹配：</p><p><code>$1、$2、...</code> : 与regexp中第1、第2子表达式相匹配的文本<br><br><code>$&amp;</code> : 与regexp相匹配的子串<br><br><code>$`</code> : 位于匹配字串左侧的文本<br><br><code>$&#39;</code> : 位于匹配字串右侧的文本<br><br><code>$$</code> : 直接量符号<br></p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = /(\w+) (\w+)/,</span><br><span class="line">    str = 'Hi,Jackie Chan,123';</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(str.<span class="keyword">replace</span>(<span class="keyword">reg</span> , '<span class="variable">$2</span> <span class="variable">$1</span>'));     <span class="comment">//"Hi,Chan Jackie,123"</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(str.<span class="keyword">replace</span>(<span class="keyword">reg</span> , '$&amp; , welcome'));     <span class="comment">//"Hi,Jackie Chan , welcome,123"</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(str.<span class="keyword">replace</span>(<span class="keyword">reg</span> , '$`'));       <span class="comment">//"Hi,Hi,,123"</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(str.<span class="keyword">replace</span>(<span class="keyword">reg</span> , `$'`));       <span class="comment">//"Hi,,123,123"</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(str.<span class="keyword">replace</span>(<span class="keyword">reg</span> , `$$`));       <span class="comment">//"Hi,$,123"</span></span><br></pre></td></tr></table></figure><p>如果第二个参数是函数的话，函数的入参如下：</p><p><code>match</code> : 与regexp相匹配的子串，同上<code>$&amp;</code>  <br><br><code>p1,p2...</code> : 与regexp中第1、第2子表达式相匹配的文本，同上<code>$1、$2、...</code>  <br><br><code>offset</code> : 匹配到子串第一个字符的位置    <br><br><code>string</code> : 被匹配的原字符串 <br></p><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w+) (\w+)/</span>,</span><br><span class="line">    str = <span class="string">'Hi,Jackie Chan,123'</span>;</span><br><span class="line"></span><br><span class="line">str.replace(reg , <span class="function"><span class="keyword">function</span>(<span class="params">match , p1 , p2 , offset , string</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'match:'</span> , match)   <span class="comment">//match: Jackie Chan</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p1:'</span> , p1)         <span class="comment">//p1: Jackie</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'p2:'</span> , p2)         <span class="comment">//p2: Chan</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'offset:'</span> , offset) <span class="comment">//offset: 3</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'string:'</span> , <span class="built_in">string</span>);    <span class="comment">//string: Hi,Jackie Chan,123</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;p2&#125;</span> <span class="subst">$&#123;p1&#125;</span> , welcome`</span>;</span><br><span class="line">&#125;)  <span class="comment">//"Hi,Chan Jackie , welcome,123"</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>4.split</strong></p><p>根据正则表达式匹配的子串分割成数组。</p><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">stringObject.<span class="keyword">split</span>(<span class="keyword">regexp</span> , howmany);</span><br></pre></td></tr></table></figure><p>第一个参数为正则表达式，第二个参数为指定返回数组的最大长度。split方法返回的是一个数组。</p><p>返回的数组中是不包含匹配的子串，如果想要包含匹配的子串，需要给正则加上捕获括号。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">var reg = <span class="regexp">/\,/</span>,</span><br><span class="line">    reg2 = <span class="regexp">/(\,)/</span>,</span><br><span class="line">    str = <span class="string">'hello,how,where'</span>;</span><br><span class="line"></span><br><span class="line">console.log(str.split(reg));    <span class="regexp">//</span>[<span class="string">"hello"</span>, <span class="string">"how"</span>, <span class="string">"where"</span>]</span><br><span class="line"></span><br><span class="line">console.log(str.split(reg2));   <span class="regexp">//</span>[<span class="string">"hello"</span>, <span class="string">","</span>, <span class="string">"how"</span>, <span class="string">","</span>, <span class="string">"where"</span>]</span><br></pre></td></tr></table></figure><p><br></p><h2 id="匹配特殊用法"><a href="#匹配特殊用法" class="headerlink" title="匹配特殊用法"></a>匹配特殊用法</h2><p><strong>反向引用</strong></p><p>将捕获括号内匹配的内容保存到一个以数字编号的组里，再使用该数字编号，则是反向引用。</p><p>比如想要匹配日期，正则表达式为<code>/(\d+)[./-](\d+)[./-](\d+)/</code>，可以匹配日期格式1980.09.07、1980/09/07、1980-09-07，那么可以匹配为1980/09.07，不是我们想要的结果，我们想要的日期分隔符能够统一，那么可以使用反向引用实现。</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">reg</span> = /(\<span class="keyword">d</span>+)([./-])(\<span class="keyword">d</span>+)\2(\<span class="keyword">d</span>+)/;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">reg</span>.<span class="keyword">test</span>('2018/09/07'));        <span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">reg</span>.<span class="keyword">test</span>('2018/09.07'));        <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>反向引用的数字编号<code>\n</code>中<code>n</code>为第n个捕获括号。</p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于正则表达式可是又爱又恨，爱的是正则表达式在编程中实用作用大，恨的是学了太容易忘记，因此将正则表达式的语法记录下来，加深记忆，又方便查阅。&lt;/p&gt;
&lt;p&gt;正则表达式（Regular Expression，简写：RegExp）可以用来匹配或替换某些模式的字符，而正则表达式则
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWA学习总结</title>
    <link href="http://zengzoe.github.io/2018/08/12/PWA%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://zengzoe.github.io/2018/08/12/PWA学习总结/</id>
    <published>2018-08-12T12:14:00.000Z</published>
    <updated>2019-03-09T14:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/08/12/PWA学习总结/pwa.jpg" alt=""></p><p><a href="#一、PWA是什么">一、PWA是什么</a><br><a href="#二、PWA的技术">二、PWA的技术</a><br><a href="#三、添加至桌面">三、添加至桌面</a><br><a href="#四、离线缓存">四、离线缓存</a><br><a href="#五、消息推送和提醒">五、消息推送和提醒</a><br><a href="#六、后台数据同步">六、后台数据同步</a><br><a href="#七、总结">七、总结</a><br><a href="#八、参考文档">参考文档</a></p><p>demo:新闻搜索demo <a href="https://github.com/ZENGzoe/pwa-exercise/tree/master" target="_blank" rel="noopener">(https://github.com/ZENGzoe/pwa-exercise/tree/master)</a></p><h1 id="一、PWA是什么"><a href="#一、PWA是什么" class="headerlink" title="一、PWA是什么"></a>一、PWA是什么</h1><p>PWA（Progress Web Apps）即渐进式网页应用，可以让用户在使用web页面的时候如同使用App，大大的提升了web页面的性能和体验。</p><p><br></p><h1 id="二、PWA的技术"><a href="#二、PWA的技术" class="headerlink" title="二、PWA的技术"></a>二、PWA的技术</h1><p>PWA不是一项技术，而是一系列技术的集合。<br><img src="/2018/08/12/PWA学习总结/technolodgeLink.png" alt=""><br>从上图可以看出，PWA中一系列的技术包括了Service worker、Manifest、Push、Notification、Sync等，其中Service worker技术较强大，大部分的功能都要基于它实现。</p><p>PWA可以实现添加至桌面、离线缓存、消息推送和提醒、后台同步数据等功能，使得web应用更加接近原生App。</p><p><br></p><h1 id="三、添加至桌面"><a href="#三、添加至桌面" class="headerlink" title="三、添加至桌面"></a>三、添加至桌面</h1><p>将web应用添加至桌面，启动时，可实现主屏幕即打开的原生app体验。</p><p>PWA中实现添加至桌面的功能通过,Manifest实现，通过一个json文件，就可配置web应用添加至桌面的标题、icon、描述、展示模式等。</p><p><br></p><h5 id="3-1-配置manifest-json"><a href="#3-1-配置manifest-json" class="headerlink" title="3.1. 配置manifest.json"></a>3.1. 配置manifest.json</h5><p>以下为manifest.json例子：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span> : <span class="string">"新闻搜索"</span>,</span><br><span class="line">    <span class="attr">"short_name"</span> : <span class="string">"news"</span>,</span><br><span class="line">    <span class="attr">"start_url"</span> : <span class="string">"/"</span>,</span><br><span class="line">    <span class="attr">"display"</span> : <span class="string">"standalone"</span>,       </span><br><span class="line">    <span class="attr">"background_color"</span> : <span class="string">"#02cfd4"</span>,</span><br><span class="line">    <span class="attr">"description"</span> : <span class="string">"可以用于新闻搜索的小应用"</span>,</span><br><span class="line">    <span class="attr">"theme_color"</span> : <span class="string">"#02cfd4"</span>,</span><br><span class="line">    <span class="attr">"orientation"</span> : <span class="string">"portrait-primary"</span>,</span><br><span class="line">    <span class="attr">"icons"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"src"</span> : <span class="string">"img/icon_32.png"</span>,</span><br><span class="line">            <span class="attr">"sizes"</span> : <span class="string">"32x32"</span>,</span><br><span class="line">            <span class="attr">"type"</span> : <span class="string">"image/png"</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">"src"</span> : <span class="string">"img/icon_72.png"</span>,</span><br><span class="line">            <span class="attr">"sizes"</span> : <span class="string">"72x72"</span>,</span><br><span class="line">            <span class="attr">"type"</span> : <span class="string">"image/png"</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">"src"</span> : <span class="string">"img/icon_128.png"</span>,</span><br><span class="line">            <span class="attr">"sizes"</span> : <span class="string">"128x128"</span>,</span><br><span class="line">            <span class="attr">"type"</span> : <span class="string">"image/png"</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">"src"</span> : <span class="string">"img/icon_144.png"</span>,</span><br><span class="line">            <span class="attr">"sizes"</span> : <span class="string">"144x144"</span>,</span><br><span class="line">            <span class="attr">"type"</span> : <span class="string">"image/png"</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">"src"</span> : <span class="string">"img/icon_192.png"</span>,</span><br><span class="line">            <span class="attr">"sizes"</span> : <span class="string">"192x192"</span>,</span><br><span class="line">            <span class="attr">"type"</span> : <span class="string">"image/png"</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">"src"</span> : <span class="string">"img/icon_256.png"</span>,</span><br><span class="line">            <span class="attr">"sizes"</span> : <span class="string">"256x256"</span>,</span><br><span class="line">            <span class="attr">"type"</span> : <span class="string">"image/png"</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            <span class="attr">"src"</span> : <span class="string">"img/icon_512.png"</span>,</span><br><span class="line">            <span class="attr">"sizes"</span> : <span class="string">"512x512"</span>,</span><br><span class="line">            <span class="attr">"type"</span> : <span class="string">"image/png"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置解释：</p><p><code>name</code> : 打开桌面web应用时，启动页的标题<br><code>short_name</code> : 添加至桌面应用的名称<br><code>start_url</code> : 桌面应用打开的地址，如设置为’/‘，为manifest.json当前路径的index.html<br><code>display</code> : 桌面应用打开后展示的模式，有四种模式：fullscreen、standalone、minimal-ui、browser<br>    -<code>fullscreen</code>模式 : 页面占满整个屏幕<br>    -<code>standalone</code>模式 : 此模式比较相似在app打开，与全屏模式相比，展示手机屏幕顶部信息时间、电量等信息栏。<br>    -<code>minimal-ui</code>模式 : 与standalone模式相比，多出浏览器地址栏<br>    -<code>browser</code>模式 : 浏览器模式，与浏览器打开一致</p><p><img src="/2018/08/12/PWA学习总结/display.jpg" alt=""></p><p>其中，部分Android手机Chrome浏览器能够兼容四种模式，部分Android手机Chrome浏览器目前只兼容standalone和browser模式，fullscreen和minimal-ui则向下兼容为standalone和browser模式。</p><p><code>background_color</code> : 启动页背景颜色<br><code>description</code> : web应用描述<br><code>theme_color</code> : 打开桌面应用，地址栏、信息栏主题颜色,可看上图的standalone和minimal-ui模式<br><code>orientation</code> : 指定页面的展示方向，会根据不同设备横竖屏的角度去定义。<br>    -<code>portrait</code>｜<code>portrait-primary</code>｜<code>portrait-secondary</code> : 竖屏<br>    -<code>portrait</code>｜<code>portrait-primary</code>｜<code>portrait-seconday</code> : 横屏<br>    -<code>natural</code> :  设备屏幕旋转角度为0° 对应的方向<br>    -<code>any</code> : 可根据设备屏幕角度旋转页面<br><code>icons</code> : 桌面应用icon图、开启页展示图，数组格式，浏览器会选择适合的尺寸作为icon图<br>    -<code>src</code> : icon地址<br>    -<code>sizes</code> : icon尺寸，单位为px，格式为宽x高<br>    -<code>type</code> : icon格式，如png为image/png、jpg为image/jpg、jpeg为image/jpeg</p><p><br></p><h5 id="3-2-引入manifest-json"><a href="#3-2-引入manifest-json" class="headerlink" title="3.2. 引入manifest.json"></a>3.2. 引入manifest.json</h5><p>配置完manifest.json后，在index.html中链入：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"manifest.json"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只需要以上两步，就可以实现页面添加至桌面的功能。</p><p><br></p><h5 id="3-3-兼容性"><a href="#3-3-兼容性" class="headerlink" title="3.3. 兼容性"></a>3.3. 兼容性</h5><p>Manifest兼容性可以在<a href="https://caniuse.com/#search=manifest" target="_blank" rel="noopener">caniuse.com</a>查看：<br><img src="/2018/08/12/PWA学习总结/manifestCompatibility.png" alt=""></p><p>目前Android的Chrome浏览器和UC支持Manifest，而iOS要在11.4以上版本才支持。</p><p><br></p><h1 id="四、离线缓存"><a href="#四、离线缓存" class="headerlink" title="四、离线缓存"></a>四、离线缓存</h1><p>缓存web的资源，当用户再次访问页面时，可以优先从缓存中读取数据渲染页面，提升访问速度。在无网络的环境下，也可以继续访问web页面。比如当缓存了h5小游戏，可随时随地离线刷游戏。实现离线缓存，需要Service Worker和Cache API的结合。</p><p><br></p><h4 id="4-1-Service-Worker介绍"><a href="#4-1-Service-Worker介绍" class="headerlink" title="4.1. Service Worker介绍"></a>4.1. Service Worker介绍</h4><p>Service Worker：服务工作线程，是浏览器在后台独立于网页运行的脚本。因此Service Worker的运行不会阻塞js脚本的运行。除了可以实现离线缓存，Service Worker在消息推送、后台同步等功能中都扮演着重要的角色，详细的api将会随着余下章节介绍。</p><p>使用Service Worker，可以拦截请求，具有一定的安全性问题，因此项目部署发布时，Service Worker只能HTTPS域下内使用。为了方便开发调试，规定还可在<code>localhost</code>或<code>127.0.0.1</code>下使用。</p><p>Service Worker有自己的生命周期，当在Javascript注册Service Worker后，Service Worker的生命周期开始。</p><p>Service Worker生命周期：installing（安装中） -&gt; installed（安装后） -&gt; activating（激活中） -&gt; activated（激活后） -&gt; redunbant（无用）。</p><p><strong>installing阶段：</strong> 通常用来缓存资源。</p><p><code>event.waitUntil()</code> : 参数为一个promise，在该promise中进行资源的缓存，缓存资源成功则安装成功，缓存资源失败则安装失败。</p><p><code>self.skipWaiting()</code> : 可跳过安装等待阶段，直接进入激活阶段，加快工作进程。</p><p><strong>installed阶段：</strong> 表示Service Worker安装成功。</p><p><strong>activating阶段：</strong> 通常用来清除旧缓存。</p><p><code>event.waitUntil()</code> : 参数为一个promise，在该promise中清除旧缓存。</p><p><code>self.client.claim()</code> : 控制未受控制的客户端。默认情况下，安装Service Worker之后，需要刷新页面才能有Service Worker系列操作，执行该方法，可改变该默认情况，无需重新刷新页面。</p><p><strong>activated阶段：</strong> 表示Service Worker可以控制客户端。</p><p><strong>redunbant阶段：</strong> 无用阶段。当Service Worker install失败、activate失败或有新的Service Worker代替，则Service Worker变为redunbant。</p><p><img src="/2018/08/12/PWA学习总结/workerLifecycle.png" alt=""></p><p><br></p><h4 id="4-2-Cache-API介绍"><a href="#4-2-Cache-API介绍" class="headerlink" title="4.2. Cache API介绍"></a>4.2. Cache API介绍</h4><p>caches是window的属性之一，用于缓存静态资源或请求返回的数据。</p><p>主要的缓存数据来源：<br>1.Service Sorker的install事件中缓存静态资源，比如缓存html、css、js等静态资源<br>2.Service Worker的fetch事件中缓存请求的数据<br>3.用户交互请求的数据，比如查看某些图片、视频等</p><p>使用caches之前，需要判断浏览器是否支持：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">'caches'</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">    <span class="comment">//支持</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Caches API：</strong></p><p>1.创建或打开cache</p><p>如果缓存中存在cacheName则直接打开，不存在则创建新的cacheName。</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">caches.<span class="built_in">open</span>(cacheName)  <span class="comment">//自定义cacheName</span></span><br></pre></td></tr></table></figure><p>返回一个promise，对cacheName的存储、删除等操作需要在返回的promise中进行。</p><p>2.缓存数据</p><p>（1）<code>add(url)</code>：缓存单个静态数据，参数为静态数据路径。路径错误，则缓存失败。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">caches.open(cacheName).then(<span class="function"><span class="params">cache</span> =&gt;</span> &#123;</span><br><span class="line">    cache.add(<span class="string">'./index.js'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>（2）<code>allAll(urlArray)</code>：缓存多个静态数据，参数为静态数据路径的数组。如果数组中某一项的路径错误，整个数组的静态数据缓存失败。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">caches.open(cacheName).then(<span class="function"><span class="params">cache</span> =&gt;</span> &#123;</span><br><span class="line">    cache.add([</span><br><span class="line">        <span class="string">'/'</span>,</span><br><span class="line">        <span class="string">'./index.html'</span>,</span><br><span class="line">        <span class="string">'./js/index.js'</span>,</span><br><span class="line">        <span class="string">'./css/index.css'</span>,</span><br><span class="line">    ])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>（3）<code>put(request,response)</code>：缓存请求的数据，第一个参数为请求的url，第二个参数为请求返回数据。</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">fetch</span><span class="params">(url)</span></span>.then(response =&gt; &#123;</span><br><span class="line">    cache.put(url,response)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.查找缓存</p><p>缓存的查找是根据cacheName中的请求进行查找。</p><p>（1）<code>match(request,options)</code> : 查找第一个匹配的缓存。</p><p>第一个参数为需要匹配的请求，第二个参数为请求的过滤：</p><p><code>ignoreSearch</code> ：Boolean值，默认值为false，当设置为true，则过滤掉hash，如请求为<code>http://xxx.com?q=xxx</code>将会被过滤掉。<br><code>ignoreMethod</code> ：Boolean值，默认值为false，当设置为true，则阻止对request请求的http方法的验证（通常只允许GET和HEAD两种请求方法）。<br><code>ignoreVary</code> ：Boolean值，默认值为false，当设置为true，则忽略对VARY头信息的匹配。如当请求的request匹配成功，对与获取的response值，不会进行VARY头信息的匹配。<br><code>cacheName</code> ：缓存名，一般忽略。</p><p>如果不匹配，则返回undefined。匹配成功，则返回带有reponse的promise。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">caches.<span class="built_in">open</span>(cacheName).<span class="keyword">then</span>(cache =&gt; &#123;</span><br><span class="line">    cache.<span class="built_in">match</span>(<span class="string">'./index.js'</span>).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(response)</span></span>&#123;</span><br><span class="line">        //response为返回结果</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>（2）<code>matchAll(request,options)</code> ：查找全部匹配的缓存。参数和返回结果同<code>match</code>。</p><p>4.删除缓存 </p><p><code>delete(key)</code> : 删除流程为找到匹配的缓存并删除，返回的结果为promise。</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">caches.<span class="built_in">open</span>(cacheName).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(cache)</span></span> &#123;</span><br><span class="line">  cache.matchAll(<span class="string">'./images/'</span>).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(response)</span></span> &#123;</span><br><span class="line">    response.forEach(<span class="function"><span class="keyword">function</span><span class="params">(element, index, array)</span></span> &#123;</span><br><span class="line">      cache.delete(element);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>5.遍历缓存</p><p>遍历所有的缓存,参数同match，非必参，当为传入参数，则返回所有的缓存。</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">caches.<span class="built_in">keys</span>(request,options).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span>(<span class="title">keys</span>)&#123;</span></span><br><span class="line">   <span class="comment"> //返回的keys为数组</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><br></p><h4 id="4-3-离线缓存实践"><a href="#4-3-离线缓存实践" class="headerlink" title="4.3. 离线缓存实践"></a>4.3. 离线缓存实践</h4><p>Service Worker可以监听web发出的请求，同时作为代理，向服务器发起请求，并判断是否需要使用缓存作为web的请求返回。</p><p><img src="/2018/08/12/PWA学习总结/cachePro.png" alt=""></p><p>如果缓存中存在请求的数据，则Service Worker不发起请求，直接返回缓存。如果缓存中不存在请求的数据，则Service Worker代理发起请求，缓存数据，并返回浏览器数据。</p><p><br></p><h5 id="4-3-1-注册Service-worker"><a href="#4-3-1-注册Service-worker" class="headerlink" title="4.3.1. 注册Service worker"></a>4.3.1. 注册Service worker</h5><p>使用Service Worker第一步，创建serviceWorker.js，并在js中注册Service Worker</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//判断是否支持serviceWorker</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator)&#123;</span><br><span class="line">    <span class="comment">//serviceWorker.js后缀为随机戳，方便更新serviceWorker.js</span></span><br><span class="line">    navigator.serviceWorker.register(<span class="string">'./serviceWorker.js'</span>, &#123; <span class="attr">scope</span> : <span class="string">'/'</span>&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'service worker注册成功'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>navigator.serviceWorker.register(url,scope)</code>注册Service Worker，第一个参数为<code>serviceWorker.js</code>的地址，第二个参数<code>scope</code>为缓存文件的范围，最大范围是<code>serviceWorker.js</code>所在的当前目录，范围的设定只能为<code>serviceWorker.js</code>同目录或子目录，比如<code>serviceWorker.js</code>的路径为<code>app/public/</code>，子文件有<code>img</code>，范围可以设定为同目录<code>/</code>或子目录<code>/img/</code>，不能设为<code>app/static/</code>等非同目录和子目录，因此需要将<code>serviceWorker.js</code>放在需要缓存的文件的最外层路径里。当第二个参数为空时，默认是范围是同目录范围，即<code>/</code>。</p><p><br></p><h5 id="4-3-2-缓存静态资源"><a href="#4-3-2-缓存静态资源" class="headerlink" title="4.3.2. 缓存静态资源"></a>4.3.2. 缓存静态资源</h5><p>1.缓存静态数据，在install事件中缓存</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//serviceWorker.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cacheName = <span class="string">'news-v1'</span>,  <span class="comment">//唯一的缓存名</span></span><br><span class="line">    cacheFiles = [          <span class="comment">//需要缓存的静态文件地址</span></span><br><span class="line">        <span class="string">'/'</span>,</span><br><span class="line">        <span class="string">'./index.html'</span>,</span><br><span class="line">        <span class="string">'./js/index.js'</span>,</span><br><span class="line">        <span class="string">'./css/index.css'</span>,</span><br><span class="line">        <span class="string">'./img/white.jpg'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听service worker安装事件，在install事件中缓存静态文件</span></span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'install'</span>);</span><br><span class="line">    <span class="comment">//在安装前执行</span></span><br><span class="line">    e.waitUntil(</span><br><span class="line">        <span class="comment">//存储</span></span><br><span class="line">        caches.open(cacheName).then(<span class="function"><span class="keyword">function</span>(<span class="params">cache</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cache.addAll(cacheFiles);</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.使用缓存的静态文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//serviceworker.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//监听客户端所有的请求</span></span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span> , <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.respondWith(</span><br><span class="line">        caches.match(e.request).then(<span class="function"><span class="keyword">function</span>(<span class="params">cache</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//如果缓存中有匹配的请求，返回缓存的静态资源</span></span><br><span class="line">            <span class="keyword">return</span> cache || fetch(e.request)</span><br><span class="line">        &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//没有缓存</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'err'</span>,err);</span><br><span class="line">            <span class="keyword">return</span> fetch(e.request)</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>添加上面的代码后，就可以在离线的状态下继续访问页面。</p><p><br></p><h5 id="4-3-3-缓存API请求"><a href="#4-3-3-缓存API请求" class="headerlink" title="4.3.3. 缓存API请求"></a>4.3.3. 缓存API请求</h5><p>除了静态资源，还可以缓存动态请求的数据，动态请求的数据与静态数据的差异在于如果本地缓存中有请求的缓存，在服务器请求未返回前使用缓存的数据，服务器请求返回后，更新数据。</p><p>在demo中的缓存搜索新闻的请求：</p><p>1.缓存搜索api的数据</p><p>在fetch事件中缓存动态请求的数据</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//serviceWorker.js</span></span><br><span class="line"><span class="keyword">var</span> fetchCacheName = <span class="string">'news-api-v1'</span>, <span class="comment">//唯一的缓存名</span></span><br><span class="line">    cacheFetchUrls = [      <span class="comment">//缓存的api</span></span><br><span class="line">        <span class="string">'/news?'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span> , <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//判断请求是否需要缓存</span></span><br><span class="line">    <span class="keyword">var</span> needCache = cacheFetchUrls.some(<span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e.request.url.indexOf(url) &gt; <span class="number">1</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(needCache)&#123;</span><br><span class="line">        caches.open(fetchCacheName).then(<span class="function"><span class="keyword">function</span>(<span class="params">cache</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> fetch(e.request).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">                <span class="comment">//缓存请求</span></span><br><span class="line">                <span class="keyword">if</span>(response.statusText !== <span class="string">'Not Found'</span>)&#123;</span><br><span class="line">                    cache.put(e.request.url,response.clone())</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> response;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>由于内存效率问题，请求的response流只能读一次，如果直接执行<code>cache.put(request, response)</code>将response流存入内存中，将不能返回给浏览器，因此需要将response复制再存储。详细介绍可参考<a href="https://jakearchibald.com/2014/reading-responses/" target="_blank" rel="noopener">What happens when you read a response?</a></p><p>2.从缓存中读取</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">getDataFromCache : <span class="function"><span class="keyword">function</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">'caches'</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> caches.match(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">cache</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!cache || cache.responseText == <span class="string">'Not Found'</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果缓存中有匹配的请求，返回数据</span></span><br><span class="line">            <span class="keyword">return</span> cache.json();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装从缓存中搜索匹配的请求，如匹配成功，返回缓存的数据。</p><p>3.请求数据</p><p>请求数据，当数据未返回时，优先展示缓存中的数据，数据返回后，当新数据和缓存数据不同时，重新更新数据，并缓存新数据。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">queryNews : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>,</span><br><span class="line">        newsName = <span class="built_in">document</span>.querySelector(<span class="string">'#input'</span>).value;</span><br><span class="line">        url = <span class="string">'/news?q='</span> + newsName;    <span class="comment">//搜索新闻接口</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(newsName === <span class="string">''</span>)&#123;</span><br><span class="line">        alert(<span class="string">'请输入想要了解的新闻'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fetchData = _this.fetchNewsApi(url);        <span class="comment">//fetch搜索新闻接口</span></span><br><span class="line">    <span class="keyword">var</span> cacheData;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//缓存中匹配请求</span></span><br><span class="line">    _this.getDataFromCache(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//匹配成功</span></span><br><span class="line">        <span class="keyword">if</span>(data &amp;&amp; data.data &amp;&amp;  data.data.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            _this.fillNews(data.data)</span><br><span class="line">        &#125;</span><br><span class="line">        cacheData = data || &#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span> fetchData;</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//请求成功，重新渲染数据</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">JSON</span>.stringify(data) !== <span class="built_in">JSON</span>.stringify(cacheData))&#123;</span><br><span class="line">            _this.fillNews(data.data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当断网后，就可以继续搜索同样的新闻～</p><p><br></p><h5 id="4-3-4-更新缓存"><a href="#4-3-4-更新缓存" class="headerlink" title="4.3.4. 更新缓存"></a>4.3.4. 更新缓存</h5><p>当修改代码时，需要客户端更新数据，可通过两种方法：</p><p>1.url加时间戳或随机数戳</p><p>如注册Service Worker中serviceworker.js后面添加的戳</p><p>2.修改cacheName，并删除无用的cacheName</p><p>在activate事件中删除无用缓存</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//serviceWorker.js</span></span><br><span class="line"><span class="comment">//监听激活事件，删除无用的缓存</span></span><br><span class="line"><span class="keyword">self</span>.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span><br><span class="line">    <span class="comment">//在激活前之行</span></span><br><span class="line">    e.waitUntil(</span><br><span class="line">        caches.keys().then(<span class="function"><span class="keyword">function</span><span class="params">(keys)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Promise().all(keys.map(<span class="function"><span class="keyword">function</span><span class="params">(key)</span></span>&#123;</span><br><span class="line">                <span class="comment">//通过修改cacheName来更新缓存，并删掉无用缓存</span></span><br><span class="line">                <span class="keyword">if</span>(key !== cacheName)&#123;</span><br><span class="line">                    <span class="keyword">return</span> caches.delete(key)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;))</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.clients.claim();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><br></p><h4 id="4-3-兼容性"><a href="#4-3-兼容性" class="headerlink" title="4.3. 兼容性"></a>4.3. 兼容性</h4><p>从caniuse中查看<a href="https://caniuse.com/#search=service%20workers" target="_blank" rel="noopener">Service Worker</a>的兼容性：</p><p><img src="/2018/08/12/PWA学习总结/serviceworkeruse.png" alt=""></p><p>大部分主流浏览器支持Service Worker，苹果从ios11.4的系统版本中也开始支持Service Worker。</p><p><br></p><h1 id="五、消息推送和提醒"><a href="#五、消息推送和提醒" class="headerlink" title="五、消息推送和提醒"></a>五、消息推送和提醒</h1><p>消息推送和提醒可以说是App常规的功能，在自己的web应用中加入消息推送和提醒功能，可以让我们的页面更接近APP。消息推送和提醒的技术实现基于Service Worker，因此在页面没有打开的情况下也能消息提醒进行操作。</p><p>消息推送和提醒使用不同的API实现，分别是push API和notification API，push可以让服务器发送消息给Service Worker，notification可以给用户显示提醒信息。</p><p><br></p><h4 id="5-1-Push"><a href="#5-1-Push" class="headerlink" title="5.1. Push"></a>5.1. Push</h4><p>消息推送流程比较复杂，在消息推送过程中还需要保证传递的信息的安全性，具体内容请往下看。</p><p><br></p><h5 id="5-1-1-推送消息的三个流程"><a href="#5-1-1-推送消息的三个流程" class="headerlink" title="5.1.1. 推送消息的三个流程"></a>5.1.1. 推送消息的三个流程</h5><p>在开始使用push API之前，需要了解消息推送的工作流程。主要由三个部分组成：</p><p>1.客户端订阅消息推送<br>2.服务器端推送消息给浏览器<br>3.Service Worker接收消息</p><p>下面是关于这三部分的详细介绍。</p><p><br></p><h5 id="5-1-2-客户端订阅消息推送"><a href="#5-1-2-客户端订阅消息推送" class="headerlink" title="5.1.2. 客户端订阅消息推送"></a>5.1.2. 客户端订阅消息推送</h5><p>消息推送的第一步是订阅，订阅又分为三部分：</p><p>（1）向用户请求消息推送<br>（2）向push service发送订阅消息<br>（3）将PushSubscription发送至服务器</p><p><img src="/2018/08/12/PWA学习总结/pushprocess.png" alt=""></p><p><br></p><p><strong>（1）向用户请求消息推送：</strong></p><p>通过向用户弹出推送请求弹窗向用户请求：</p><p><img src="/2018/08/12/PWA学习总结/access.png" alt=""></p><p>实现方法通过<code>Notification.requestPermission()</code>:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">askPermission</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve , reject</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> permissionResult = Notification.requestPermission(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//旧版本</span></span><br><span class="line">            resolve(result);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span>(permissionResult)&#123;</span><br><span class="line">            <span class="comment">//新版本</span></span><br><span class="line">            permissionResult.then(resolve , reject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">permissionResult</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(permissionResult !== <span class="string">'granted'</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'We weren\'t granted permission.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新的语法会返回一个promise处理请求结果，旧版本则通过回调函数处理，因此需要同时处理这两种情况。</p><p><code>permissionResult</code>返回结果有三种，<code>granted</code>、<code>denied</code>、<code>default</code>，<code>granted</code>为允许，<code>denied</code>为禁止，<code>default</code>为默认浏览器处理结果。</p><p>在注册Service Worker成功后进行推送的请求：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js </span></span><br><span class="line"><span class="comment">//在使用之前还需判断是否支持PushManager</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator &amp;&amp; <span class="string">'PushManager'</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">    navigator.serviceWorker.register(<span class="string">'./serviceWorker.js'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">            registration,</span><br><span class="line">            askPermission()</span><br><span class="line">        ])</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上上面的代码之后，刷新页面就会出现推送请求的弹窗：</p><p><img src="/2018/08/12/PWA学习总结/access.png" alt=""></p><p>当用户点击之后，无论用户选择什么，浏览器后记住用户的操作，再次访问时，不会再弹出该窗口，即该窗口指出现一次。</p><p><br></p><p><strong>（2）向push service发送订阅消息</strong></p><p>应用服务钥匙有一个公钥和一个私钥，私钥用于服务器，公钥用于push service。在订阅消息时，需要将公钥发送给push service。push service创建<code>endpoint</code>传递给浏览器，浏览器将<code>endpoint</code>加到<code>PushScription</code>，通过<code>subsribe()</code>的<code>promise</code>返回，这就是发送订阅消息的过程。</p><p><img src="/2018/08/12/PWA学习总结/subscribeProcess.png" alt=""></p><p><strong>push service</strong>的功能是接收请求，验证并发送消息至指定的页面，操控消息的接收和推送。甚至在页面断网时，将会继续等待直到浏览器联网时推送消息。push service存在浏览器中，每个浏览器都会使用不同的push service，庆幸的是，push service遵循<a href="https://tools.ietf.org/html/draft-ietf-webpush-protocol-12" target="_blank" rel="noopener">Web Push Protocal</a>，使用相同的API，就可以在不同的push service通用。</p><p><strong>PushSubscription</strong>可作为一个用户的id信息，包含了订阅的所有信息，例如：</p><p><img src="/2018/08/12/PWA学习总结/pushscription.png" alt=""></p><p>上图中的<code>endpoint</code>中可以得出该浏览器使用的push service是<code>fcm.googleapis.com</code>，<code>eq2HeeL0Mcs...</code>是指向的用户。</p><p>公钥和私钥的创建可以通过<code>web-push</code>：</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">npm install -g web-push</span><br><span class="line">web-push <span class="keyword">generate</span>-vapid-keys</span><br></pre></td></tr></table></figure><p>向push service发送订阅信息通过<code>registration.pushManager.subscribe()</code>发送，需要向<code>subscribe()</code>传入一个对象，该对象中包含<code>userVisibleOnly</code>和<code>applicationServerKey</code>。</p><p><strong>userVisibleOnly</strong>：boolean值，标志消息的推送通过发送消息提醒用户，还是在后台默默的发送不提醒用户。部分浏览器只支持<code>userVisibleOnly</code>为<code>true</code>，如果设置为<code>false</code>或不设置，浏览器报错。</p><p><img src="/2018/08/12/PWA学习总结/uservisibleerr.png" alt=""></p><p><strong>applicationServerKey</strong>：客户端的公钥，要求Uint8Array类型。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subscribeUserToPush</span>(<span class="params">registration , publicKey</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> subscribeOptions = &#123;</span><br><span class="line">        userVisibleOnly : <span class="literal">true</span>,</span><br><span class="line">        applicationServerKey : <span class="built_in">window</span>.urlBase64ToUint8Array(publicKey)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> registration.pushManager.subscribe(subscribeOptions).then(<span class="function"><span class="keyword">function</span>(<span class="params">pushSubscription</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'pushscription'</span> ,pushSubscription)</span><br><span class="line">        <span class="keyword">return</span> pushSubscription;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>applicationServerKey</code>要求参数是Uint8Array类型，而创建的公钥是base64类型，因此使用<code>urlBase64ToUint8Array</code>方法将base64转为Uint8Array。<code>urlBase64ToUint8Array</code>方法来自<a href="https://github.com/alienzhou/learning-pwa/blob/push/public/base64util.js" target="_blank" rel="noopener">base64util.js</a>。</p><p>在请求推送消息用户允许后发送订阅信息：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator &amp;&amp; <span class="string">'PushManager'</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">    <span class="comment">//公钥</span></span><br><span class="line">    <span class="keyword">var</span> publicKey = <span class="string">'BBP3Ni05GCu_RTb7rAkOqfFPiDQkNhcAfOAhqxpaxmuKLhF3DYTldbl3vrmfTfHSHhCBXPgKhQXexEmDLLqV1sQ'</span>;</span><br><span class="line">    </span><br><span class="line">    navigator.serviceWorker.register(<span class="string">'./serviceWorker.js'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">            registration,</span><br><span class="line">            askPermission()</span><br><span class="line">        ])</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> registration = result[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> subscribeUserToPush(registration,publicKey)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><br></p><p><strong>（3）将PushSubscription发送至服务器</strong></p><p>拿到<code>PushSubscription</code>后，将<code>PushSubscription</code>发送到后台服务器，后台服务器将会存储该用户的信息，并通过<code>PushSubscription</code>来推送信息。</p><p>假设服务器端用Nodejs已经实现接收并存储<code>PushSubscription</code>的接口<code>/subscription</code>，具体实现可查看<a href="https://github.com/ZENGzoe/pwa-exercise/blob/master/app.js" target="_blank" rel="noopener">源码</a>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//将PushSubscription发送至服务器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendSubscriptionToServer</span>(<span class="params">body</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">'/subscription'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve , reject</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        xhr.timeout = <span class="number">7000</span>;</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> response = &#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    response = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                    response = xhr.responseText</span><br><span class="line">                &#125;</span><br><span class="line">                resolve(response)</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">                resolve();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.onabort = reject;</span><br><span class="line">        xhr.onerror = reject;</span><br><span class="line">        xhr.ontimeout = reject;</span><br><span class="line">        xhr.open(<span class="string">'POST'</span> , url , <span class="literal">true</span>);</span><br><span class="line">        xhr.setRequestHeader(<span class="string">'Content-Type'</span> , <span class="string">'application/json'</span>);</span><br><span class="line">        xhr.send(body)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在获得<code>subscription</code>后发送至服务器：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator &amp;&amp; <span class="string">'PushManager'</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    navigator.serviceWorker.register(<span class="string">'./serviceWorker.js'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">subscription</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> body = &#123;<span class="attr">subscription</span> : subscription&#125;;</span><br><span class="line"></span><br><span class="line">        body.uniqueid = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();   <span class="comment">//为方便服务器推送消息至指定的客户端</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'uniqueid'</span> , body.uniqueid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sendSubscriptionToServer(<span class="built_in">JSON</span>.stringify(body));</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>给每个打开的页面都设定唯一的<code>uniqueid</code>，方便服务器对特定的客户端推送消息。</p><p><br></p><h5 id="5-1-3-服务器端推送消息给浏览器"><a href="#5-1-3-服务器端推送消息给浏览器" class="headerlink" title="5.1.3. 服务器端推送消息给浏览器"></a>5.1.3. 服务器端推送消息给浏览器</h5><p>服务器端发送消息给浏览器需要保证信息的安全性，那么这就需要公钥私钥来保证信息的安全性。上文也提到私钥用户服务器，公钥用于push service,那么公钥私钥的使用逻辑如下：</p><p><img src="/2018/08/12/PWA学习总结/serviceKey.png" alt=""></p><p>（1）服务器用私钥对验证头签名<br>（2）服务器将用私钥签名了的消息发送至对应的push service<br>（3）push service收到消息后，用公钥验证解密<br>（4）push service确认验证通过无误，告诉服务器验证通过<br>（5）push service将消息发送至正确的客户端</p><p>由于消息推送的流程过于复杂，较难定位出现的问题，因此推荐使用<a href="https://github.com/web-push-libs/web-push" target="_blank" rel="noopener">web push</a>这个库进行消息加密、格式化和触发Service Worker的<code>push</code>事件。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">var</span> webpush = <span class="built_in">require</span>(<span class="string">'web-push'</span>);</span><br></pre></td></tr></table></figure><p>由于服务器需要使用私钥，因此需要在<code>web-push</code>设置应用服务钥匙：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先前生成的公钥和私钥</span></span><br><span class="line"><span class="keyword">var</span> vapidKeys = &#123;</span><br><span class="line">    privateKey:<span class="string">"9mHKxhF60T4iApR4f4dDKtdXL8PK5dj3TfDBAK8iufI"</span>,</span><br><span class="line">    publicKey:<span class="string">"BBP3Ni05GCu_RTb7rAkOqfFPiDQkNhcAfOAhqxpaxmuKLhF3DYTldbl3vrmfTfHSHhCBXPgKhQXexEmDLLqV1sQ"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">webpush.setVapidDetails(</span><br><span class="line">    <span class="string">'mailto:563282341@qq.com'</span>,</span><br><span class="line">    vapidKeys.publicKey,</span><br><span class="line">    vapidKeys.privateKey</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>web push</code>要求传入发送者的邮箱，为了能够方便地联系到发送者传递有用的信息。</p><p>在服务器端，我们使用<code>/push</code>路由，向客户端发送消息推送：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">router.post(&apos;/push&apos; , koaBody() , async ctx =&gt; &#123;</span><br><span class="line">    let &#123; uniqueid , payload &#125; = ctx.request.body;</span><br><span class="line">    let list = uniqueid ? await util.find(&#123;uniqueid&#125;) : await util.findAll();   //查找指定的用户</span><br><span class="line">    let status = list.length &gt; 0 ? 0 : -1;</span><br><span class="line"></span><br><span class="line">    for(let i = 0 ; i &lt; list.length ; i++)&#123;</span><br><span class="line">        let subscription = list[i].subscription;</span><br><span class="line">        pushMessage(subscription , JSON.stringify(payload));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.response.body = &#123;</span><br><span class="line">        status</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在demo中，使用了<code>nedb</code>数据库存储用户的<code>pushSubscription</code>，详细实现代码可以查看<a href="https://github.com/ZENGzoe/pwa-exercise/blob/master/util.js" target="_blank" rel="noopener">源码</a></p><p>在<code>pushMessage</code>方法中使用了<code>web-push</code>的<code>sendNotification</code>方法推送消息：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushMessage</span>(<span class="params">subscription , data = &#123;&#125;</span>)</span>&#123;</span><br><span class="line">    webpush.sendNotification(subscription , data , options).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'push service的相应数据'</span> , <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//410和404表示subscription过期不再有效</span></span><br><span class="line">        <span class="keyword">if</span>(err.statusCode === <span class="number">410</span> || err.statusCode === <span class="number">404</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="keyword">return</span> util.remove(subscription)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(subscription);</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>webpush.sendNotification</code>推送消息的事件能被客户端的<code>push</code>事件捕获。</p><p><br></p><h5 id="5-1-4-Service-Worker接收消息"><a href="#5-1-4-Service-Worker接收消息" class="headerlink" title="5.1.4. Service Worker接收消息"></a>5.1.4. Service Worker接收消息</h5><p>服务器推送消息至push service，push service再推送消息给用户，因此服务器发送的消息先是被Service Worker的<code>push</code>事件捕获。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//serviceWorker.js</span></span><br><span class="line">self.addEventListener(<span class="string">'push'</span> , <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = e.data;</span><br><span class="line">    <span class="keyword">if</span>(data)&#123;</span><br><span class="line">        self.registration.showNotification(data);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'push没有任何数据'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>self</code>指向的是<code>serviceWorker</code>，push service通过<code>self.registration.showNotification</code>方法向用户发送提醒。</p><p>这就是消息推送的三大流程，到这里就可以直接给用户推送消息。可以新建一个后台页面进行消息推送，也可以使用<a href="https://www.getpostman.com/" target="_blank" rel="noopener">postman</a>模拟后台推送消息。在demo中，我简单地搭了一个后台页面：</p><p><img src="/2018/08/12/PWA学习总结/backend.png" alt=""></p><p>用户id指的是打开页面时生成的uniqueid，输入用户id和要传送的消息后，点击推送，就会收到推送消息。</p><p><img src="/2018/08/12/PWA学习总结/push.png" alt=""></p><p>由于chrome浏览器的<code>push service</code>是FCM，需要翻墙和配置<a href="https://console.firebase.google.com/" target="_blank" rel="noopener">firbase</a>才能使用。firfox浏览器使用的是自家的<code>push service</code>，不需要其他操作就可以收到消息推送。</p><p><br></p><h4 id="5-2-Notification"><a href="#5-2-Notification" class="headerlink" title="5.2. Notification"></a>5.2. Notification</h4><p><code>Notification</code>主要是显示提醒界面和对提醒界面的操作。</p><p><br></p><h5 id="5-2-1-提醒界面"><a href="#5-2-1-提醒界面" class="headerlink" title="5.2.1. 提醒界面"></a>5.2.1. 提醒界面</h5><p>丰富的提醒界面可以是这样的：</p><p><img src="/2018/08/12/PWA学习总结/notification.png" alt=""></p><p>显示提醒界面的接口在5.1.3节中已经使用过：<code>showNotification(title,options)</code>，第一个参数<code>title</code>很明显是消息界面的标题，第二个参数<code>options</code>是消息界面其他相关的配置，例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> options = &#123;</span><br><span class="line">    body : <span class="string">'邀请你一起学习，邀请你一起学习邀请你一起学习'</span>,     </span><br><span class="line">    icon : <span class="string">'/img/icon_128.png'</span>, </span><br><span class="line">    actions : [&#123;</span><br><span class="line">        action : <span class="string">'show-jd'</span>,</span><br><span class="line">        title : <span class="string">'去京东'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        action : <span class="string">'contact-me'</span>,</span><br><span class="line">        title : <span class="string">'联系我'</span></span><br><span class="line">    &#125;],</span><br><span class="line">    tag : <span class="string">'pwa-starter'</span>,</span><br><span class="line">    renotify : <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>title</code>、<code>options</code>配置对应的消息界面如下：</p><p><img src="/2018/08/12/PWA学习总结/signedNotice1.png" alt=""></p><p><img src="/2018/08/12/PWA学习总结/signedNotice2.png" alt=""></p><p><code>title</code>：标题，不限制字数，当文字过多以省略号显示<br><code>body</code>：简介，不限制字数，当文字过多以省略号显示<br><code>icon</code> ： 图片，未规定图片尺寸大小<br><code>actions</code> ： 新的按钮操作<br>    -<code>action</code> ：按钮的动作函数<br>    -<code>title</code> ：按钮的标题<br><code>tag</code> ： 消息界面唯一的标志<br><code>renotify</code> ： 表示是否重复多次显示消息界面，当设为<code>false</code>，出现过一次的<code>tag</code>消息，将不会再出现</p><p>将配置加入<code>serviceWorker.js</code>的<code>push</code>事件中：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//serviceWorker.js</span></span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">'push'</span> , <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = e.data;</span><br><span class="line">    <span class="keyword">if</span>(e.data)&#123;</span><br><span class="line">        data = data.json();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'push的数据为：'</span>,data);</span><br><span class="line">        <span class="keyword">var</span> title = data;</span><br><span class="line">        <span class="keyword">var</span> options = &#123;</span><br><span class="line">            body : <span class="string">'邀请你一起学习'</span>,</span><br><span class="line">            icon : <span class="string">'/img/icon_128.png'</span>,</span><br><span class="line">            actions : [&#123;</span><br><span class="line">                action : <span class="string">'show-jd'</span>,</span><br><span class="line">                title : <span class="string">'去京东'</span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                action : <span class="string">'contact-me'</span>,</span><br><span class="line">                title : <span class="string">'联系我'</span></span><br><span class="line">            &#125;],</span><br><span class="line">            tag : <span class="string">'pwa-starter'</span>,</span><br><span class="line">            renotify : <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">        self.registration.showNotification(title,options);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'push没有任何数据'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也可以在<code>index.js</code>中通过点击某个按钮直接显示消息提醒，配置相同：</p><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">...</span><br><span class="line"> <span class="built_in">document</span>.querySelector(<span class="string">'.J_notification'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> title = <span class="string">'PWA学习'</span>;</span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;;</span><br><span class="line">    registration.showNotification(title,options)</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><br></p><h5 id="5-2-2-提醒交互"><a href="#5-2-2-提醒交互" class="headerlink" title="5.2.2. 提醒交互"></a>5.2.2. 提醒交互</h5><p>提醒界面已经出来了，那么怎么去捕获用户在提醒界面上的操作呢。</p><p>在Service Worker中，可以通过<code>notificationclick</code>去捕获用户的点击。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//serviceworker.js</span></span><br><span class="line">self.addEventListener(<span class="string">'notificationclick'</span> , <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> action = e.action;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`action tag:<span class="subst">$&#123;e.notification.tag&#125;</span>`</span>,<span class="string">`action:<span class="subst">$&#123;action&#125;</span>`</span>,e);</span><br><span class="line">    <span class="keyword">switch</span>(action)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'show-jd'</span> : </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'show-jd'</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'contact-me'</span> :</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'contact-me'</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> :</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`未处理的action：<span class="subst">$&#123;e.action&#125;</span>`</span>);</span><br><span class="line">            action = <span class="string">'default'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e.notification.close(); <span class="comment">//关闭通知栏</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在<code>notificationclick</code>事件中，可以通过<code>e.notification.close()</code>关闭通知栏。还可以获取<code>action</code>，那么就可以根据<code>action</code>进行不同的操作。在上节中，我们加了<code>show-jd</code>和<code>contact-me</code>的<code>action</code>，那么我们可以这些<code>action</code>添加不同的操作，比如点击“去京东”，则新增标签页跳去京东首页，点击“联系我”，则唤起发给我的邮件。</p><p>但是Service Worker不能直接操作DOM，我们可以让Service Worker和客户端通信。在Service Worker中可以使用<code>postMessage</code>向客户端发送消息，而客户端可以用<code>message</code>事件捕获Service Worker发送的消息。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//serviceworker.js</span></span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">'notificationclick'</span> , <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> action = e.action;</span><br><span class="line">    ...</span><br><span class="line">    e.waitUntil(</span><br><span class="line">        self.clients.matchAll().then(<span class="function"><span class="keyword">function</span>(<span class="params">clients</span>)</span>&#123;</span><br><span class="line">            clients.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">client</span>)</span>&#123;</span><br><span class="line">                client.postMessage(action);    <span class="comment">//向客户端发送用户点击的`action`。</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    e.notification.close();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用<code>e.waitUntil</code>可以在程序繁忙后也能保证将信息发送到客户端。</p><p>捕获<code>service worker</code>发送的消息：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">navigator.serviceWorker.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> action = e.data;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`用户点击的action是：<span class="subst">$&#123;e.data&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">switch</span>(action)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'show-jd'</span> :</span><br><span class="line">            location.href = <span class="string">'https://www.jd.com'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'contact-me'</span> :</span><br><span class="line">            location.href = <span class="string">'mailto:563282341@qq.com'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> :   <span class="comment">//点击除show-jd和contact-me区域，显示页面提示</span></span><br><span class="line">            <span class="built_in">document</span>.querySelector(<span class="string">'.tips'</span>).style.display = <span class="string">'block'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>还可以点击通知栏时切换到当前客户端标签页，也可以在未打开客户端时，打开客户端标签页：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'notificationclick'</span> , <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> action = e.action;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    e.waitUntil(</span><br><span class="line">        self.clients.matchAll().then(<span class="function"><span class="keyword">function</span>(<span class="params">clients</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!clients || clients.length == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//打开标签页</span></span><br><span class="line">                self.clients.openWindow &amp;&amp; self.clients.openWindow(<span class="string">'http://127.0.0.1:3034'</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//切换到指定客户端页</span></span><br><span class="line">            clients[<span class="number">0</span>].focus &amp;&amp; clients[<span class="number">0</span>].focus();</span><br><span class="line">            ...</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    e.notification.close();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="5-3-兼容性"><a href="#5-3-兼容性" class="headerlink" title="5.3. 兼容性"></a>5.3. 兼容性</h4><p>在caniuse查看<a href="https://caniuse.com/#search=push" target="_blank" rel="noopener">Push API</a>和<a href="https://caniuse.com/#search=notification" target="_blank" rel="noopener">Notification API</a>的兼容性：</p><p><img src="/2018/08/12/PWA学习总结/pushUse.png" alt=""></p><p><img src="/2018/08/12/PWA学习总结/notificationUse.png" alt=""></p><p>1.<code>Push API</code>在ios safari不兼容，在Android和pc端兼容性较好。如果浏览器使用的是FCM的<code>push service</code>在国内不能使用。</p><p>2.<code>Notification API</code>在移动端兼容性较差，在pc端得到比较好的支持。其中<code>actions</code>目前只在Chrome浏览器支持。</p><p><br></p><h1 id="六、后台数据同步"><a href="#六、后台数据同步" class="headerlink" title="六、后台数据同步"></a>六、后台数据同步</h1><h4 id="6-1-后台同步介绍"><a href="#6-1-后台同步介绍" class="headerlink" title="6.1. 后台同步介绍"></a>6.1. 后台同步介绍</h4><p>当我们在页面进行某个操作，需要将数据提交后台，可能会因为网络慢或无网络，最后用户直接关闭网络，导致数据无法提交到后台，再次进入页面时，还需要重新进行同样的操作。那么后台同步功能的实现就能解决这样的问题，可以将操作保存在Service Worker，在有网络时，Service Worker将用户的操作同步到后台，大大的提升了用户体验。</p><p>后台同步的流程如下：<br>1.在浏览器中发起后台同步请求<br>2.在Service Worker中监听<code>sync</code>事件，并发起请求</p><p>接下来我们看看如何实现后台同步。</p><p><br></p><h4 id="6-2-实现后台同步"><a href="#6-2-实现后台同步" class="headerlink" title="6.2. 实现后台同步"></a>6.2. 实现后台同步</h4><p>后台同步的实现，需要依赖于Service Worker监听浏览器发起的<code>sync</code>后台同步事件：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'sync'</span> , <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>除此之外，后台同步还需要使用到<code>SyncManager</code>接口，通过<code>registration.sync</code>调用，返回包含<code>getTags</code>和<code>register</code>方法的<code>SyncManager</code>对象。</p><p><code>register(tag)</code>：发起同步，tag为唯一的同步请求标志，返回一个promise。</p><p><code>getTags()</code>：获取所有在SyncManager注册的tag，返回一个promise。</p><p><strong>1.在浏览器中发起后台同步请求</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator &amp;&amp; <span class="string">'SyncManager'</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">    <span class="comment">//在service worker激活成功后进行</span></span><br><span class="line">    navigator.serviceWorker.ready.then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tag = <span class="string">"sample_sync"</span>;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'.J_sync'</span>).addEventListener(<span class="string">'click'</span> , <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'同步后台'</span>,registration.sync)</span><br><span class="line"></span><br><span class="line">            registration.sync.register(tag).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'同步后台已触发'</span>,tag);</span><br><span class="line">            &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'后台同步出发失败'</span>,err);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.在Service Worker中监听<code>sync</code>事件，并发起请求</strong></p><p>假设在Nodejs中已经实现接口<code>/sync</code>：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//serviceworker.js</span></span><br><span class="line">self.addEventListener(<span class="string">'sync'</span> , <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> init = &#123;</span><br><span class="line">        method : <span class="string">'GET'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(e.tag === <span class="string">'sample_sync'</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> Request(<span class="string">`/sync?name=xxx`</span> , init);</span><br><span class="line">        </span><br><span class="line">        e.waitUntil(</span><br><span class="line">            fetch(request).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> response;</span><br><span class="line">            &#125;)</span><br><span class="line">        )</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用<code>waitUntil</code>可以保证在用户在页面关闭后，Service Worker可以继续发起请求，这样就可以在用户恢复网络时，Service Worker发起未完成的请求。</p><p><br></p><h4 id="6-3-提交数据到后台同步"><a href="#6-3-提交数据到后台同步" class="headerlink" title="6.3. 提交数据到后台同步"></a>6.3. 提交数据到后台同步</h4><p>有时候我们的操作需要将我们录入的数据提交到后台，比如提交姓名、图片等，那么就需要我们将数据提交到Service Worker中，可以通过使用<code>postMessage</code>提交数据。</p><p><strong>1.postMessage提交数据</strong></p><p>postMessage传递数据：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">navigator.serviceWorker.ready.then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tag = <span class="string">'sample_sync_event'</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'.J_sync_event'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            registration.sync.register(tag).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`后台同步已触发：<span class="subst">$&#123;tag&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> inputValue = <span class="built_in">document</span>.querySelector(<span class="string">'#input'</span>).value;</span><br><span class="line">                <span class="keyword">var</span> msg = <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">type</span> : <span class="string">'bgsync'</span> , <span class="attr">msg</span> : &#123;<span class="attr">name</span> : inputValue&#125;&#125;);</span><br><span class="line">                navigator.serviceWorker.controller.postMessage(msg);</span><br><span class="line">            &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`后台同步触发失败：<span class="subst">$&#123;err&#125;</span>`</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>数据传递到Service Worker，监听<code>message</code>事件和监听<code>sync</code>事件需要交叉处理，为了保证Service Worker拿到数据后再发起请求，创建<code>DealData</code>函数用于处理数据，并解耦<code>message</code>事件和<code>sync</code>事件。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//serviceworker.jd</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DealData</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.tagDatas = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//存储tag和回调函数</span></span><br><span class="line">    once(tag , callback)&#123;</span><br><span class="line">        <span class="keyword">this</span>.tagDatas[tag] || (<span class="keyword">this</span>.tagDatas[tag] = []);</span><br><span class="line">        <span class="keyword">this</span>.tagDatas[tag].push(callback);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//收到数据后，执行回调函数</span></span><br><span class="line">    trigger(tag , data)&#123;</span><br><span class="line">        <span class="keyword">this</span>.tagDatas[tag] = <span class="keyword">this</span>.tagDatas[tag] || [];</span><br><span class="line">        <span class="keyword">let</span> tagCallback ;</span><br><span class="line">        <span class="keyword">while</span>(tagCallback = <span class="keyword">this</span>.tagDatas[tag].shift())&#123;</span><br><span class="line">            tagCallback(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dealData = <span class="keyword">new</span> DealData();</span><br></pre></td></tr></table></figure><p>监听message事件：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//serviceworker.js</span></span><br><span class="line">self.addEventListener(<span class="string">'message'</span> , <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(e.data),</span><br><span class="line">        type = data.type,</span><br><span class="line">        msg = data.msg;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`service worker收到消息 type: <span class="subst">$&#123;type&#125;</span> ; msg : <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(msg)&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">    dealData.trigger(type , msg);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>监听sync事件：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//serviceworker.js</span></span><br><span class="line">self.addEventListener(<span class="string">'sync'</span> , <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> init = &#123;</span><br><span class="line">        method : <span class="string">'GET'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(e.tag === <span class="string">'sample_sync'</span>)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e.tag === <span class="string">'sample_sync_event'</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> msgPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve , reject</span>)</span>&#123;</span><br><span class="line">            dealData.once(<span class="string">'bgsync'</span> , <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                resolve(data)</span><br><span class="line">            &#125;);</span><br><span class="line">            setTimeout(resolve , <span class="number">5000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        e.waitUntil(</span><br><span class="line">            msgPromise.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> name = data &amp;&amp; data.name ? data.name : <span class="string">'anonymous'</span>;</span><br><span class="line">                <span class="keyword">var</span> request = <span class="keyword">new</span> Request(<span class="string">`sync?name=<span class="subst">$&#123;name&#125;</span>`</span> , init);</span><br><span class="line">                <span class="keyword">return</span> fetch(request)</span><br><span class="line">            &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> response;</span><br><span class="line">            &#125;)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>到这里就可以将数据传递到后台同步。</p><p><br></p><h4 id="6-4-兼容性"><a href="#6-4-兼容性" class="headerlink" title="6.4. 兼容性"></a>6.4. 兼容性</h4><p>从caniuse查看<a href="https://caniuse.com/#search=background%20sync" target="_blank" rel="noopener">sync API</a>的兼容性：</p><p><img src="/2018/08/12/PWA学习总结/syncUse.png" alt=""></p><p>很可惜，目前只有Chrome浏览器和Android的Chrome、UC浏览器支持Sycn API。</p><h1 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h1><p>通过PWA的学习和实践，发现PWA功能的实现给页面的体验带来了更好的突破。虽然目前PWA的支持率不高，但是Google、Microsoft、Apple已经全数宣布支持PWA技术，许多平台已经开始引入了PWA技术，比如淘宝、饿了么、美团等。相信未来PWA的普及会带来更大的突破。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://alienzhou.gitbook.io/learning-pwa/" target="_blank" rel="noopener">PWA学习与实践（https://alienzhou.gitbook.io/learning-pwa/）</a><br><a href="https://developers.google.com/web/ilt/pwa/" target="_blank" rel="noopener">Progressive Web Apps Training（https://developers.google.com/web/ilt/pwa/）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/08/12/PWA学习总结/pwa.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#一、PWA是什么&quot;&gt;一、PWA是什么&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#二、PWA的技术&quot;&gt;二、PWA的技术&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#三
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>水波纹进度条实现原理</title>
    <link href="http://zengzoe.github.io/2018/08/02/%E6%B0%B4%E6%B3%A2%E7%BA%B9%E8%BF%9B%E5%BA%A6%E6%9D%A1%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://zengzoe.github.io/2018/08/02/水波纹进度条实现原理/</id>
    <published>2018-08-01T20:45:16.000Z</published>
    <updated>2019-03-09T14:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/08/02/水波纹进度条实现原理/designSketch.gif" alt=""></p><p>项目中使用水波纹进度条，可以让项目的预加载更加生动，用户等待阶段相对也没那么无聊～～</p><p>本项目中使用Canvas模拟水波纹滚动效果来实现，主要原理是数学的正弦曲线。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>水波纹外形上酷似正弦曲线，于是通过正弦曲线去分析水波纹的实现原理。</p><p><img src="/2018/08/02/水波纹进度条实现原理/sinusoid.jpg" alt=""></p><blockquote><p>正弦曲线公式为<code>y=Asin(ωx+φ)+k</code></p></blockquote><p>A为振幅，改变该值，可改变水波纹波浪的深度，A越大，水波纹越陡，A越小，水波纹越平。</p><p><img src="/2018/08/02/水波纹进度条实现原理/sinusoid2.jpg" alt=""></p><p>φ为出相，改变该值，可改变水波纹水平方向的位置，φ为正数，水波纹向右移动，φ为负数，水波纹向左移动。</p><p><img src="/2018/08/02/水波纹进度条实现原理/sinusoid3.jpg" alt=""></p><p>k为偏距，改变改值，可改变水波纹垂直方向的位置。</p><p><img src="/2018/08/02/水波纹进度条实现原理/sinusoid4.jpg" alt=""></p><p>ω为角速度，改变改值，可改变水波纹波浪的宽度，ω越大，水波纹越窄，ω越小，水波纹越宽。</p><p><img src="/2018/08/02/水波纹进度条实现原理/sinusoid5.jpg" alt=""></p><p>通过正弦曲线的原理，水波纹进度条由下往上移动，可以通过增大k向上移动实现，水波纹的滚动可以通过φ从右至左移动，水波纹的形状由正弦曲线形成。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><strong> 1.画出波浪线 </strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> wave = &#123;</span><br><span class="line">    init : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>),</span><br><span class="line">            winW = <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">        canvas.width = winW * <span class="number">0.6</span>;</span><br><span class="line">        canvas.height = winW * <span class="number">0.6</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.canvasW = canvas.width;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.draw()</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有绘制</span></span><br><span class="line">    draw : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.drawWave(<span class="keyword">this</span>.ctx);</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画波浪线</span></span><br><span class="line">    drawWave : <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> canvasW = <span class="keyword">this</span>.canvasW,</span><br><span class="line">            startX = <span class="number">0</span>,     <span class="comment">//波浪线初始x轴坐标</span></span><br><span class="line">            waveH = <span class="number">6</span>,      <span class="comment">//波浪深度</span></span><br><span class="line">            waveW = <span class="number">0.04</span>,   <span class="comment">//波浪宽度</span></span><br><span class="line">            offsetY = canvasW*<span class="number">0.5</span>;     <span class="comment">//波浪垂直距离</span></span><br><span class="line"></span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> x = startX ; x &lt; canvasW ; x += <span class="number">20</span> / canvasW)&#123;</span><br><span class="line">            <span class="comment">//正弦曲线公式：y=Asin(ωx+φ)+k</span></span><br><span class="line">            <span class="keyword">var</span> y = waveH * <span class="built_in">Math</span>.sin((startX + x) * waveW) + offsetY;   </span><br><span class="line">            points.push([x ,y]);</span><br><span class="line">            ctx.lineTo(x , y);</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">wave.init()</span><br></pre></td></tr></table></figure><p>根据想要的效果设定波浪深度<code>waveH</code>、波浪宽度<code>waveW</code>。</p><p><img src="/2018/08/02/水波纹进度条实现原理/wave.png" alt=""></p><p><strong> 2.添加波浪流动效果 </strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wave = &#123;</span><br><span class="line">    speed : <span class="number">50</span> ,   <span class="comment">//波浪横向流动速度</span></span><br><span class="line">    offsetX : <span class="number">0</span> ,   <span class="comment">//波浪横向偏移量</span></span><br><span class="line">    init : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有绘制</span></span><br><span class="line">    draw : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.canvasW,<span class="keyword">this</span>.canvasW);</span><br><span class="line">        <span class="keyword">this</span>.offsetX += <span class="keyword">this</span>.speed;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.drawWave(<span class="keyword">this</span>.ctx);</span><br><span class="line"></span><br><span class="line">        requestAnimationFrame(<span class="keyword">this</span>.draw.bind(<span class="keyword">this</span>));</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画波浪线</span></span><br><span class="line">    drawWave : <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> x = startX ; x &lt; canvasW ; x += <span class="number">20</span> / canvasW)&#123;</span><br><span class="line">            <span class="comment">//正弦曲线公式：y=Asin(ωx+φ)+k</span></span><br><span class="line">            <span class="keyword">var</span> y = waveH * <span class="built_in">Math</span>.sin((startX + x) * waveW + <span class="keyword">this</span>.offsetX) + offsetY;   </span><br><span class="line">            ctx.lineTo(x , y);</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">wave.init()</span><br></pre></td></tr></table></figure><p>通过波浪快速水平滑动，做出波浪流动效果。通过循环修改<code>φ</code>即<code>offsetX</code>，移动波浪线。每次循环绘制波浪线前需要清除画板<code>this.ctx.clearRect(0,0,this.canvasW,this.canvasW);</code>，重新绘制波浪线。</p><p><img src="/2018/08/02/水波纹进度条实现原理/waving.gif" alt=""></p><p><strong> 3.雏形 </strong></p><p>画出水波纹进度条整体雏形，添加色彩～</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wave = &#123;</span><br><span class="line">    ...</span><br><span class="line">    isDrawContainer : <span class="literal">false</span>,        <span class="comment">//判断是否画了容器</span></span><br><span class="line">    init : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有绘制</span></span><br><span class="line">    draw : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.isDrawContainer)&#123;</span><br><span class="line">            <span class="keyword">this</span>.drawContainer(ctx);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    drawContainer : <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pointR = <span class="keyword">this</span>.canvasW / <span class="number">2</span>,</span><br><span class="line">            lineWidth = <span class="number">10</span> ,</span><br><span class="line">            circleR = pointR - (lineWidth);</span><br><span class="line"></span><br><span class="line">        ctx.lineWidth = lineWidth;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.arc(pointR,pointR,circleR,<span class="number">0</span>,<span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">        ctx.strokeStyle = <span class="string">'rgba(192,225,242,0.3)'</span>;</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.clip();</span><br><span class="line">        <span class="keyword">this</span>.isDrawContainer = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画波浪线</span></span><br><span class="line">    drawWave : <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//画出完整的波浪形状</span></span><br><span class="line">        ctx.lineTo(canvasW , canvasW);</span><br><span class="line">        ctx.lineTo(startX , canvasW);</span><br><span class="line">        ctx.lineTo(startPos[<span class="number">0</span>] , startPos[<span class="number">1</span>]);</span><br><span class="line">        ctx.fillStyle = <span class="string">'#a4def6'</span>;</span><br><span class="line">        ctx.fill();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">wave.init()</span><br></pre></td></tr></table></figure><p>通过｀drawContainer｀函数画出滚动条容器，并剪切出需要的区域，通过<code>isDrawContainer</code>判断，优化性能。</p><p><img src="/2018/08/02/水波纹进度条实现原理/container.gif" alt=""></p><p><strong> 4.添加波浪溢满效果 </strong></p><p>可以通过偏距<code>k</code>即<code>offsetY</code>来移动波浪的垂直方向的高度，但由于canvas的y轴方向与正弦曲线的y轴相反，填充的方向相同，故在本例子中，通过修改y轴初始值来实现该效果。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wave = &#123;</span><br><span class="line">    offsetYRange : <span class="number">1.1</span> ,            <span class="comment">//波浪垂直方向最大范围</span></span><br><span class="line">    offsetY : <span class="number">0</span>,                    <span class="comment">//波浪垂直方向位移</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有绘制</span></span><br><span class="line">    draw : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.offsetY &lt; <span class="keyword">this</span>.offsetYRange)&#123;</span><br><span class="line">            <span class="keyword">this</span>.offsetY += <span class="number">0.003</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画波浪线</span></span><br><span class="line">    drawWave : <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> x = startX ; x &lt; canvasW ; x += <span class="number">20</span> / canvasW)&#123;</span><br><span class="line">            <span class="comment">//正弦曲线公式：y=Asin(ωx+φ)+k</span></span><br><span class="line">            <span class="keyword">var</span> y = (<span class="number">1</span>-<span class="keyword">this</span>.offsetY) * canvasW + waveH * <span class="built_in">Math</span>.sin((startX + x) * waveW + <span class="keyword">this</span>.offsetX); </span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...    &#125;</span><br><span class="line">&#125;</span><br><span class="line">wave.init()</span><br></pre></td></tr></table></figure><p><img src="/2018/08/02/水波纹进度条实现原理/fill.gif" alt=""></p><p><strong> 5.添加海浪真实感 </strong></p><p>通过添加多一条颜色深的波浪来实现海浪真实感。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wave = &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有绘制</span></span><br><span class="line">    draw : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.drawWave(ctx , <span class="keyword">this</span>.offsetX , <span class="keyword">this</span>.offsetY , <span class="number">0.04</span> , <span class="number">6</span> , <span class="string">'#a4def6'</span>);</span><br><span class="line">        <span class="keyword">this</span>.drawWave(ctx , <span class="keyword">this</span>.offsetX + <span class="number">2</span> , <span class="keyword">this</span>.offsetY  - <span class="number">0.02</span>, <span class="number">0.04</span> , <span class="number">8</span>, <span class="string">'#79d4f9'</span>);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画波浪线</span></span><br><span class="line">    drawWave : <span class="function"><span class="keyword">function</span>(<span class="params">ctx , offsetX , offsetY , waveW , waveH , color</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> canvasW = <span class="keyword">this</span>.canvasW,</span><br><span class="line">            startX = <span class="number">0</span>;     <span class="comment">//波浪线初始x轴坐标</span></span><br><span class="line"></span><br><span class="line">        ctx.beginPath();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> startPos = [startX];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> x = startX ; x &lt; canvasW ; x += <span class="number">20</span> / canvasW)&#123;</span><br><span class="line">            <span class="comment">//正弦曲线公式：y=Asin(ωx+φ)+k</span></span><br><span class="line">            <span class="keyword">var</span> y = (<span class="number">1</span> - offsetY) * canvasW + waveH * <span class="built_in">Math</span>.sin((startX + x) * waveW + offsetX); </span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">wave.init()</span><br></pre></td></tr></table></figure><p>波浪数据通过多次测试出最佳效果而得出。</p><p><img src="/2018/08/02/水波纹进度条实现原理/addWave.gif" alt=""></p><p><strong> 6.添加进度数据 </strong></p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wave = &#123;</span><br><span class="line">    ...</span><br><span class="line">    offsetYSpeed : <span class="number">0.003</span>,            <span class="comment">//波浪溢满</span></span><br><span class="line">    progressNum : <span class="number">0</span>,                    <span class="comment">//进度</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有绘制</span></span><br><span class="line">    draw : function()&#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.offsetY &lt; <span class="keyword">this</span>.offsetYRange)&#123;</span><br><span class="line">            <span class="keyword">this</span>.offsetY += <span class="keyword">this</span>.offsetYSpeed;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.progressNum += <span class="number">100</span>/(<span class="keyword">this</span>.offsetYRange/<span class="keyword">this</span>.offsetYSpeed);</span><br><span class="line"></span><br><span class="line">            document.querySelector(<span class="string">'.proNum'</span>).innerHTML = parseInt(<span class="keyword">this</span>.progressNum) + <span class="string">'%'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">wave.init()</span><br></pre></td></tr></table></figure><p>最终效果如下：</p><p><img src="/2018/08/02/水波纹进度条实现原理/designSketch.gif" alt=""></p><p>源码：<a href="https://github.com/ZENGzoe/wave-progress" target="_blank" rel="noopener">https://github.com/ZENGzoe/wave-progress</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/08/02/水波纹进度条实现原理/designSketch.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;项目中使用水波纹进度条，可以让项目的预加载更加生动，用户等待阶段相对也没那么无聊～～&lt;/p&gt;
&lt;p&gt;本项目中使用Canvas模拟水波纹滚动效果
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>charles使用总结</title>
    <link href="http://zengzoe.github.io/2018/06/04/charles%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://zengzoe.github.io/2018/06/04/charles使用总结/</id>
    <published>2018-06-04T10:59:54.000Z</published>
    <updated>2019-03-09T14:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Charles是一款可以代理调试的工具，适用于Mac，Windows系统设备可以使用Fiddler。使用Charles工具可以更方便地调试请求：</p><p>1.可获取手机上的请求<br>2.可模拟慢速<br>3.可修改网络请求内容<br>4.可修改服务器返回的内容</p><p>接下来，我将从以上几个方面去总结Charles的使用。</p><h4 id="设置系统代理"><a href="#设置系统代理" class="headerlink" title="设置系统代理"></a>设置系统代理</h4><p>将Charles设置为系统代理才可以监控请求，所以使用Charles的第一步是设置为系统代理，步骤如下：</p><p>1.选择左上角“Proxy -&gt; macOS Proxy”，开启macOS Proxy。<br><img src="/2018/06/04/charles使用总结/charles01.png" alt=""></p><p>2.在“系统偏好设置 -&gt; 网络 -&gt; 高级 -&gt; 代理”，选择如下：<br><img src="/2018/06/04/charles使用总结/charles02.png" alt=""><br>注意：自动代理配置选项不能选中哦，否则检测不到请求</p><p>操作完之后就可以在Charles主页看到请求。<br><img src="/2018/06/04/charles使用总结/charles03.png" alt=""></p><h4 id="获取手机上的请求"><a href="#获取手机上的请求" class="headerlink" title="获取手机上的请求"></a>获取手机上的请求</h4><p>有时想要手机设备上进行一些操作，需要调试查看服务器返回的数据，Charles在此提供了大大的便利。</p><p><strong> 1.打开Charles的代理功能 </strong> </p><p>(1) 选择左上角“Proxy -&gt; Proxy settings”<br><img src="/2018/06/04/charles使用总结/charles04.png" alt=""><br>(2) 勾选“Enable transparent HTTP proxing”,Port端口填8888<br><img src="/2018/06/04/charles使用总结/charles05.png" alt=""></p><p>(3) 设置SSL Proxying<br> 选择“Proxy -&gt; SSL Proxing Settings -&gt; add”<br><img src="/2018/06/04/charles使用总结/charles23.png" alt=""></p><p><strong> 2.抓https请求，需安装Charles根证书 </strong></p><p>(1)选择左上角“help -&gt; SSL Proxing -&gt; Install Charles Root Certificate”<br><img src="/2018/06/04/charles使用总结/charles06.png" alt=""><br>(2) 点击添加<br><img src="/2018/06/04/charles使用总结/charles07.png" alt=""><br>(3) 在钥匙串访问中找到Charles Proxy CA，选中双击<br><img src="/2018/06/04/charles使用总结/charles08.png" alt=""><br>(4) 点击信任，展示内容，选择始终信任<br><img src="/2018/06/04/charles使用总结/charles09.png" alt=""></p><p>安装完成。</p><p><strong> 3.手机设置代理 </strong></p><p>(1) 首先需要找到电脑的IP地址，在“系统偏好设置 -&gt; 网络”可以查看得到IP地址。<br><img src="/2018/06/04/charles使用总结/charles10.png" alt=""></p><p>(2) 在手机“设置 -&gt; Wi-Fi”找到跟电脑相同域的wifi，点击该wifi进入wifi详情页，点击Configure Proxy<br><img src="/2018/06/04/charles使用总结/charles12.png" alt=""></p><p>(3) 在Configure Proxy中，在Server填入电脑的IP地址，Port为Charles设置的代理端口。<br><img src="/2018/06/04/charles使用总结/charles13.png" alt=""></p><p>(4) 此时Charles弹出手机连接信号，选择Alloy。<br><img src="/2018/06/04/charles使用总结/charles11.png" alt=""></p><p>(5) 在手机浏览器上访问地址：<a href="http://chls.pro/ssl" target="_blank" rel="noopener">http://chls.pro/ssl</a>，打开安装证书页面，点击Allow。<br><img src="/2018/06/04/charles使用总结/charles14.png" alt=""></p><p>(6) 安装证书。<br><img src="/2018/06/04/charles使用总结/charles15.png" alt=""></p><p>(7) 完成安装<br><img src="/2018/06/04/charles使用总结/charles16.png" alt=""></p><p>(8) 证书任性设置</p><p>在“设置 -&gt; 通用 -&gt; 证书信任设置”里勾选安装的证书：</p><p><img src="/2018/06/04/charles使用总结/charles22.jpeg" alt=""></p><p>手机浏览页面，即可在Charles看到请求。</p><h4 id="模拟慢速环境"><a href="#模拟慢速环境" class="headerlink" title="模拟慢速环境"></a>模拟慢速环境</h4><p>有时项目需要在慢速情况下进行对应的操作，那么可以通过Charles的Throttle设置模拟慢速环境。</p><p>1.在左上角选择“Proxy -&gt; Throttle settings”<br><img src="/2018/06/04/charles使用总结/charles17.png" alt=""></p><p>2.选中Enable Throttling，在下面的配置中填入需要的参数，选择ok<br><img src="/2018/06/04/charles使用总结/charles18.png" alt=""></p><p>3.手机重新刷新页面，会发现网络速度降低了，完成配置。</p><h4 id="修改网络请求内容"><a href="#修改网络请求内容" class="headerlink" title="修改网络请求内容"></a>修改网络请求内容</h4><p>有时为了测试服务器接口的不同参数情况下的请求，那么可以通过Charles修改接口的请求并重新请求。</p><p>在需要修改的请求上右击，选择“Compose”，即可进入该请求的编辑页。可以修改该请求的请求方式、请求地址、协议等，修改完成后点击“Execute”执行，返回结果。<br><img src="/2018/06/04/charles使用总结/charles19.png" alt=""></p><h4 id="修改服务器返回的内容"><a href="#修改服务器返回的内容" class="headerlink" title="修改服务器返回的内容"></a>修改服务器返回的内容</h4><p>在项目中，较常使用Map Local来修改服务器返回的内容，Map Local可以将网络请求重定向到本地文件，主要用途如下：</p><p>1.直接修改某个接口返回的内容，比如可以模拟接口异常。<br>2.将线上html、css、js等文件重定向到本地进行调试。</p><p>直接选择接口或文件右击，选择Map Local，打开Edit Mapping页，在Local path选中需要模拟接口异常的json文件或需要重定向的静态文件，点击ok即可，重新刷新页面。<br><img src="/2018/06/04/charles使用总结/charles20.png" alt=""></p><h4 id="模拟网络延迟"><a href="#模拟网络延迟" class="headerlink" title="模拟网络延迟"></a>模拟网络延迟</h4><p>项目中，可能有这样的需求，比如网络延迟10s要弹出网络延迟的toast，那么Charles可以使用Breakpoints模拟网络延迟的环境来测试页面。</p><p>Breakpoints类似断点，可以在某网络请求时，截断该请求，可修改请求的内容，在截断过程中，请求还在进行，当请求超过10s时，达到前端设置的10s延迟时间，导致页面请求超时，即可模拟网络延迟。</p><p><img src="/2018/06/04/charles使用总结/charles21.png" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Charles的功能强大，在我们开发和测试阶段提供很大的帮忙，我会继续挖掘哒！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Charles是一款可以代理调试的工具，适用于Mac，Windows系统设备可以使用Fiddler。使用Charles工具可以更方便地调试请求：&lt;/p&gt;
&lt;p&gt;1.可获取手机上的请求&lt;br&gt;2.可模拟慢速&lt;br&gt;3.可修改网络请求内容&lt;br&gt;4.可修改服务器返回的内容&lt;/p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo博客如何提速</title>
    <link href="http://zengzoe.github.io/2018/06/04/hexo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E6%8F%90%E9%80%9F/"/>
    <id>http://zengzoe.github.io/2018/06/04/hexo博客如何提速/</id>
    <published>2018-06-03T22:22:47.000Z</published>
    <updated>2019-03-09T14:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直发现我的hexo搭建的博客打开速度慢，加载时间长，终于看不下去，排查原因优化优化速度。</p><h2 id="原因及解决方法"><a href="#原因及解决方法" class="headerlink" title="原因及解决方法"></a>原因及解决方法</h2><p>我的博客主页内容较少，且请求的图片数量只有一张。在排查多个请求过程中发现，我使用的<code>apollo</code>主题请求了一个其他域的样式文件<code>https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,600</code>，多次打开该文件都需要较长的加载时间。</p><p>尝试将改样式文件存储为本地，在<code>/themes/apollo/laylout/partial/head.jade</code>文件中，修改导入文件如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">link(rel="stylesheet", href="css/googleapisFonts.css" type='text/css')</span><br></pre></td></tr></table></figure><p>修改完毕，发布！</p><p>访问速度终于杠杠滴！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一直发现我的hexo搭建的博客打开速度慢，加载时间长，终于看不下去，排查原因优化优化速度。&lt;/p&gt;
&lt;h2 id=&quot;原因及解决方法&quot;&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sprite雪碧图生成方法</title>
    <link href="http://zengzoe.github.io/2017/05/25/sprite%E9%9B%AA%E7%A2%A7%E5%9B%BE%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/"/>
    <id>http://zengzoe.github.io/2017/05/25/sprite雪碧图生成方法/</id>
    <published>2017-05-25T15:07:48.000Z</published>
    <updated>2019-03-09T14:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在项目中，有时候需要用到很多小的图片，那么页面访问过程中就需要一次一次地向服务器很多的这样小的图片，严重影响到页面的性能。我们可以将多个小的图片合成一张图片，这样的话页面会只请求一次，从而优化我们的性能。这样的图片叫做CSS Sprites,也叫雪碧图。<br><img src="/2017/05/25/sprite雪碧图生成方法/01.png" alt=""></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>要合成雪碧图的方法很多，从总体上可按照生成的环境分为项目外生成和项目中生成，项目外生成即用其他工具合并生成，比如线上工具<a href="http://spritegen.website-performance.org/" target="_blank" rel="noopener">CSS Sprite Generator</a>、Animation CC等，除了生成雪碧图外，还可以导出雪碧图中包含各个子图的尺寸和偏移量的文本。具体实现方法可自行搜索，在这篇文章中，主要是介绍项目中生成的方法，即在项目开发过程中，可配置相关代码自动生成雪碧图。与项目外生成方法相比，这个比较大的优点是不用手动添加各个子图的尺寸和背景位置，能够减少较大的时间成本，有利于项目的快速开发。</p><h3 id="方法一：Postcss"><a href="#方法一：Postcss" class="headerlink" title="方法一：Postcss"></a>方法一：Postcss</h3><p><code>PostCss</code>是一种可以用Javascript代码来处理CSS的工具，可对CSS进行模块化转换，将CSS代码解析成抽象语法树结构，再由插件来进行处理。因此在项目中，可使用其<code>postcss-sprites</code>插件将图片生成雪碧图图。同时，使用Webpack模块加载器来处理CSS和图片。具体实现方法如下：</p><p><strong> 1.安装加载器与插件 </strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -<span class="keyword">save</span>-dev <span class="keyword">style</span>-loader css-loader postcss-loader <span class="keyword">file</span>-loader postcss-sprites <span class="keyword">extract</span>-<span class="built_in">text</span>-webpack-<span class="keyword">plugin</span> html-webpack-<span class="keyword">plugin</span></span><br></pre></td></tr></table></figure><p>使用postcss，需要用到样式加载器、css加载器、postcss加载器三种加载器来处理css。<br><code>postcss-sprite</code> ：用来合并雪碧图。<br><code>file-loader</code> ：用来处理图片。<br><code>extract-text-webpack-plugin</code> ： 用来从出口文件中提取文本到一个单独的文件中。<br><code>html-webpack-plugin</code> ： 创建HTML文件</p><p><strong> 2.配置webpack.config.js </strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool : <span class="string">"inline-source-map"</span>,          </span><br><span class="line">    entry : <span class="string">"./src/js/index.js"</span>,</span><br><span class="line">    output : &#123;</span><br><span class="line">        path : __dirname + <span class="string">"/dist/js"</span>,</span><br><span class="line">        filename : <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devServer : &#123;</span><br><span class="line">        compress : <span class="literal">false</span>,</span><br><span class="line">        contentBase : __dirname,</span><br><span class="line">        publicPath : <span class="string">'/'</span>,</span><br><span class="line">        port : <span class="number">8081</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span> : &#123;</span><br><span class="line">        loaders : [</span><br><span class="line">            &#123; </span><br><span class="line">                test : <span class="regexp">/\.js|.jsx?$/</span>, </span><br><span class="line">                loader : <span class="string">'babel-loader'</span>,</span><br><span class="line">                exclude : <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        rules : [</span><br><span class="line">            &#123;</span><br><span class="line">                test : <span class="regexp">/\.css$/</span>,</span><br><span class="line">                exclude : <span class="regexp">/dist/</span>,</span><br><span class="line">                use : ExtractTextPlugin.extract(&#123;</span><br><span class="line">                    fallback : <span class="string">'style-loader'</span>,</span><br><span class="line">                    use : [<span class="string">'css-loader?module&amp;localIdentName=[local]'</span>,<span class="string">'postcss-loader'</span>]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test : <span class="regexp">/\.(jpg|png)$/</span>,</span><br><span class="line">                use : <span class="string">'file-loader?name=../img/[name].[ext]'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins : [</span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"../css/global.css"</span>),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            title : <span class="string">"postcss生成雪碧图"</span>,</span><br><span class="line">            filename : <span class="string">"../index.html"</span>,</span><br><span class="line">            template : <span class="string">'src/index.html'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入口文件为<code>src/js/index.js</code>，<code>ExtractTextPlugin</code>将出口文件<code>bundle.js</code>中的css分离出成为一个独立<code>global.css</code>文件。</p><p><strong> 3.配置postcss </strong><br>在根目录下，创建文件<code>postcss.config.js</code>，配置如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> opts = &#123;</span><br><span class="line">    stylesheetPath : <span class="string">'./src/img'</span>,</span><br><span class="line">    spritePath : <span class="string">'./dist/img/'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins : [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'postcss-sprites'</span>)(opts)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>stylesheetPath</code>为源图片路径，<code>spritePath</code>为生成雪碧图地址。</p><p><strong> 4.运行 </strong></p><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">webpack-dev-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>到这里就可以生成想要的雪碧图：</p><p><strong> Before: </strong></p><p>图片：</p><p><img src="/2017/05/25/sprite雪碧图生成方法/02.png" alt=""></p><p>CSS：</p><p><img src="/2017/05/25/sprite雪碧图生成方法/03.png" alt=""></p><p><strong> After: </strong></p><p>图片：</p><p><img src="/2017/05/25/sprite雪碧图生成方法/04.png" alt=""></p><p>CSS：</p><p><img src="/2017/05/25/sprite雪碧图生成方法/05.png" alt=""></p><p><strong> 5.添加分组 </strong></p><p>如果图片太多，可将图片合成多个雪碧图，这时需要根据分组修改图片名称。<br>比如，当我需要将以上的11张图片合成两张雪碧图<code>sprite1.png</code>和<code>sprite2.png</code>，则需要将图片名称改为包含sprite1或sprite2的新名称，包含sprite1或sprite2名称的图片合并到<code>sprite1.png</code>或<code>sprite2.png</code>。如下：<br><img src="/2017/05/25/sprite雪碧图生成方法/06.png" alt=""></p><p>并修改<code>postcss.config.js</code>如下：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> opts = &#123;</span><br><span class="line">    stylesheetPath : <span class="string">'./src/img'</span>,</span><br><span class="line">    spritePath : <span class="string">'./dist/img/'</span>,</span><br><span class="line">    groupBy : [</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (image.url.indexOf(<span class="string">'sprite1'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'sprite1'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (image.url.indexOf(<span class="string">'sprite2'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'sprite2'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins : [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'postcss-sprites'</span>)(opts)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>groupBy</code>来配置我们的分组。</p><p>最终图片合成如下：<br><img src="/2017/05/25/sprite雪碧图生成方法/07.png" alt=""></p><p><strong> 6.修改图片单位 </strong></p><p>在项目中，我们可能会使用REM布局，需要将图片的单位改为<code>rem</code>。直接修改<code>postcss.config.js</code>如下：<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">let psdSize = <span class="number">750</span>;      <span class="comment">//设计稿宽度</span></span><br><span class="line">let RemRatio = <span class="number">16</span>;      <span class="comment">//REM 换算比值</span></span><br><span class="line">let postcss = require(<span class="string">'postcss'</span>);</span><br><span class="line">let opts = &#123;</span><br><span class="line">    <span class="string">stylesheetPath :</span> <span class="string">'./src/img'</span>,</span><br><span class="line">    <span class="string">spritePath :</span> <span class="string">'./dist/img/'</span>,</span><br><span class="line">    <span class="string">hooks :</span> &#123;</span><br><span class="line">        <span class="string">onUpdateRule :</span> function(rule,token,image)&#123;</span><br><span class="line">            let backgroundSizeX = image.spriteWidth<span class="regexp">/(psdSize/</span>RemRatio/<span class="number">1</span>),</span><br><span class="line">                backgroundSizeY = image.spriteHeight<span class="regexp">/(psdSize/</span>RemRatio/<span class="number">1</span>),</span><br><span class="line">                backgroundPositionX = image.coords.x<span class="regexp">/(psdSize/</span>RemRatio/<span class="number">1</span>),</span><br><span class="line">                backgroundPositionY = image.coords.y<span class="regexp">/(psdSize/</span>RemRatio/<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            backgroundSizeX = isNaN(backgroundSizeX) ? 0 : backgroundSizeX.toFixed(<span class="number">3</span>);</span><br><span class="line">            backgroundSizeY = isNaN(backgroundSizeY) ? 0 : backgroundSizeY.toFixed(<span class="number">3</span>);</span><br><span class="line">            backgroundPositionX = isNaN(backgroundPositionX) ? 0 : backgroundPositionX.toFixed(<span class="number">3</span>);</span><br><span class="line">            backgroundPositionY = isNaN(backgroundPositionY) ? 0 : backgroundPositionY.toFixed(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            let backgroundImage = postcss.decl(&#123;</span><br><span class="line">                <span class="string">prop :</span> <span class="string">'background-image'</span>,</span><br><span class="line">                <span class="string">value :</span> <span class="string">'url('</span> + image.spriteUrl + <span class="string">')'</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            let backgroundSize = postcss.decl(&#123;</span><br><span class="line">                <span class="string">prop :</span> <span class="string">'background-size'</span>,</span><br><span class="line">                <span class="string">value :</span> backgroundSizeX + <span class="string">'rem '</span> + backgroundSizeY + <span class="string">'rem'</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            let backgroundPosition = postcss.decl(&#123;</span><br><span class="line">                <span class="string">prop :</span> <span class="string">'background-position'</span>,</span><br><span class="line">                <span class="string">value :</span> backgroundPositionX + <span class="string">'rem '</span> + backgroundPositionY + <span class="string">'rem'</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            rule.insertAfter(token,backgroundImage);</span><br><span class="line">            rule.insertAfter(backgroundImage,backgroundPosition);</span><br><span class="line">            rule.insertAfter(backgroundPosition,backgroundSize);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    <span class="string">plugins :</span> [</span><br><span class="line">        require(<span class="string">'postcss-sprites'</span>)(opts)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>hooks.onUpdateRule</code>来重写输出的图片样式。换算公式可根据自己的需求修改。<br>最终CSS结果如下：<br><img src="/2017/05/25/sprite雪碧图生成方法/08.png" alt=""></p><h3 id="方法二：Composs-Sass"><a href="#方法二：Composs-Sass" class="headerlink" title="方法二：Composs+Sass"></a>方法二：Composs+Sass</h3><p>Sass是一种CSS预处理器，通过搭配Compass,可以更好的实现合并生成雪碧图。</p><p><strong> 1.声明雪碧图 </strong></p><p>Compass中有多种包装好的模块，使用其中的雪碧地图(Sprite maps)来实现雪碧图的合成。声明雪碧图如下：</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$sprite1 : sprite-<span class="keyword">map</span>(<span class="string">"sprite1/*.png"</span>,$spacing : <span class="number">10</span>px , $layout : <span class="string">'vertical'</span>);</span><br><span class="line">$sprite2 : sprite-<span class="keyword">map</span>(<span class="string">"sprite2/*.png"</span>,$spacing : <span class="number">10</span>px , $layout : <span class="string">'vertical'</span>);</span><br></pre></td></tr></table></figure><p>声明两个雪碧图分别为<code>$sprite1</code>和<code>$sprite2</code>,<code>sprite-map</code>第一个参数为<code>config.rb</code>配置文件中<code>images_dir</code>下雪碧图集的地址，$spacing为图片间隔，默认为0。<code>$layout</code>为图片的排列方式。有四种排列方式：<code>vertical</code>、<code>horizontal</code>、<code>diagonal</code>、<code>smart</code>。主要分别如下：<br><img src="/2017/05/25/sprite雪碧图生成方法/09.jpg" alt=""></p><p><strong> 2.完成style.scss </strong></p><p>根据需求，配置样式如下：</p><p><code>style.scss</code>:<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sprite1</span> : sprite-map(<span class="string">"sprite1/*.png"</span>,<span class="variable">$spacing</span> : <span class="number">10px</span> , <span class="variable">$layout</span> : <span class="string">'vertical'</span>);</span><br><span class="line"><span class="variable">$sprite2</span> : sprite-map(<span class="string">"sprite2/*.png"</span>,<span class="variable">$spacing</span> : <span class="number">10px</span> , <span class="variable">$layout</span> : <span class="string">'vertical'</span>);</span><br><span class="line"></span><br><span class="line">@function pxToRem (<span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="variable">$value</span> : <span class="variable">$value</span> / (<span class="variable">$value</span> * <span class="number">0</span> + <span class="number">1</span>);  <span class="comment">//去单位px</span></span><br><span class="line">    @return <span class="variable">$value</span>/(<span class="number">750px</span>/<span class="number">16px</span>/<span class="number">1rem</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">mixin</span> spritesMixin(<span class="variable">$name</span>,<span class="variable">$sprites</span>)&#123;</span><br><span class="line">    <span class="variable">$iconPath</span>:sprite-file(<span class="variable">$sprites</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="variable">$iconWidth</span>:image-width(<span class="variable">$iconPath</span>);</span><br><span class="line">    <span class="variable">$iconHeight</span>:image-height(<span class="variable">$iconPath</span>);</span><br><span class="line">    <span class="variable">$iconPosX</span> : nth(sprite-position(<span class="variable">$sprites</span>,<span class="variable">$name</span>),<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$iconPosY</span> : nth(sprite-position(<span class="variable">$sprites</span>,<span class="variable">$name</span>),<span class="number">2</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">    <span class="attribute">background-image</span>:sprite-url(<span class="variable">$sprites</span>);</span><br><span class="line">    <span class="attribute">width</span>:pxToRem(<span class="variable">$iconWidth</span>);</span><br><span class="line">    <span class="attribute">height</span>: pxToRem(<span class="variable">$iconHeight</span>);</span><br><span class="line">    <span class="attribute">background</span>:pxToRem(<span class="variable">$iconPosX</span>) pxToRem(<span class="variable">$iconPosY</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">    @<span class="keyword">include</span> spritesMixin(a,<span class="variable">$sprite1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b</span>&#123;</span><br><span class="line">    @<span class="keyword">include</span> spritesMixin(b,<span class="variable">$sprite1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>pxToRem</code> : 将px转化为rem。<br><code>spritesMixin</code> : 声明需要引用雪碧图的代码块。<br><code>sprite-file</code> : 用于在雪碧图上找到需要的图片。<br><code>image-width</code>、<code>image-height</code> : 获取该图片的长度和宽度。<br><code>sprite-position</code> : 获取该图片在雪碧图上的位置。<br><code>nth</code> : 取值。</p><p>在每个需要雪碧图的位置上直接引入<code>@include spritesMixin($name,$sprites)</code>即可，<code>$name</code>为该图片的名称，<code>$sprites</code>为声明的雪碧图。</p><p>转化后的<code>style.css</code>:<br><img src="/2017/05/25/sprite雪碧图生成方法/10.png" alt=""></p><p>如果想要更简单的自动生成，只需要改为简单的几行：<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"compass/utilities/sprites"</span>;       <span class="comment">//导入sprites模块</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"sprite1/*.png"</span>;                   <span class="comment">//导入sprite1的图片</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"sprite2/*.png"</span>;                   <span class="comment">//导入sprite2的图片</span></span><br><span class="line">@<span class="keyword">include</span> all-sprite1-sprites;              <span class="comment">//自动根据文件名生成类</span></span><br><span class="line">@<span class="keyword">include</span> all-sprite2-sprites;              <span class="comment">//自动根据文件名生成类</span></span><br></pre></td></tr></table></figure></p><p>这样转化后的样式中就能根据文件名来生成类，所以我们在使用之前能够根据文件名来定义我们的类并且加入到我们的结构中，这样不用在每一个需要的地方重新加入相应的样式。</p><h3 id="方法三：Grunt"><a href="#方法三：Grunt" class="headerlink" title="方法三：Grunt"></a>方法三：Grunt</h3><p>如果使用了工具Grunt,那么就可以使用<code>grunt-css-sprite</code>插件来实现雪碧图的生成。</p><p><strong> 1.安装插件 </strong></p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">npm install grunt-css-sprite --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p><strong> 2.配置Gruntfile.js </strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">    grunt.initConfig(&#123;</span><br><span class="line">        pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动雪碧图</span></span><br><span class="line">        sprite: &#123;</span><br><span class="line">            options: &#123;</span><br><span class="line">                <span class="comment">// sprite背景图源文件夹</span></span><br><span class="line">                imagepath: <span class="string">'src/img/'</span>,</span><br><span class="line">                <span class="comment">// 映射CSS中背景路径</span></span><br><span class="line">                imagepath_map: <span class="literal">null</span>,</span><br><span class="line">                <span class="comment">// 雪碧图输出目录</span></span><br><span class="line">                spritedest: <span class="string">'build/img/'</span>,</span><br><span class="line">                <span class="comment">// 替换后的背景路径</span></span><br><span class="line">                spritepath: <span class="string">'../img/'</span>,</span><br><span class="line">                <span class="comment">// 图片间间距</span></span><br><span class="line">                padding: <span class="number">2</span>,</span><br><span class="line">                <span class="comment">// 是否使用 image-set 作为2x图片实现</span></span><br><span class="line">                useimageset: <span class="literal">false</span>,</span><br><span class="line">                <span class="comment">// 是否以时间戳为文件名生成新的雪碧图文件</span></span><br><span class="line">                newsprite: <span class="literal">false</span>,</span><br><span class="line">                <span class="comment">// 给雪碧图追加时间戳</span></span><br><span class="line">                spritestamp: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 在CSS文件末尾追加时间戳</span></span><br><span class="line">                cssstamp: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 默认使用二叉树最优排列算法</span></span><br><span class="line">                algorithm: <span class="string">'binary-tree'</span>,</span><br><span class="line">                <span class="comment">// 默认使用`pngsmith`图像处理引擎</span></span><br><span class="line">                engine: <span class="string">'pngsmith'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            autoSprite: &#123;</span><br><span class="line">                files: [&#123;</span><br><span class="line">                    <span class="comment">// 启用动态扩展</span></span><br><span class="line">                    expand: <span class="literal">true</span>,</span><br><span class="line">                    <span class="comment">// css文件源的文件夹</span></span><br><span class="line">                    cwd: <span class="string">'src/css/'</span>,</span><br><span class="line">                    <span class="comment">// 匹配规则</span></span><br><span class="line">                    src: <span class="string">'*.css'</span>,</span><br><span class="line">                    <span class="comment">// 导出css和sprite的路径地址</span></span><br><span class="line">                    dest: <span class="string">'build/css/'</span>,</span><br><span class="line">                    <span class="comment">// 导出的css名</span></span><br><span class="line">                    ext: <span class="string">'.sprite.css'</span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载指定插件任务</span></span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-css-sprite'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认执行的任务</span></span><br><span class="line">    grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'sprite'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>grunt-css-sprite</code>插件会根据样式文件中引用的图片来进行雪碧图的合并。</p><p><code>algorithm</code>配置图片的排列方式，有五个选项，分别为<code>top-down</code>(从上至下)、<code>left-right</code>(从左至右)、<code>diagonal</code>(从左上至右下)、<code>alt-diagonal</code>(从左下至右上)、<code>binary-tree</code>(二叉树排列)，可根据自己的爱好进行配置。</p><p>但由于其配置参数的限制，不能满足较特殊的项目需求，比如不能对图片分组合并等。</p><h3 id="方法四：Gulp"><a href="#方法四：Gulp" class="headerlink" title="方法四：Gulp"></a>方法四：Gulp</h3><p>如果使用了工具Gulp，可使用插件<code>grunt.spritesmith</code>来合成雪碧图。</p><p><strong> 1.安装插件 </strong></p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">npm install gulp.spritesmith --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p><strong> 2.配置Gulpfile.js </strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    spritesmith = <span class="built_in">require</span>(<span class="string">'gulp.spritesmith'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"src/img/*.png"</span>)</span><br><span class="line">        .pipe(spritesmith(&#123;</span><br><span class="line">            imgName : <span class="string">'img/sprite.png'</span>,</span><br><span class="line">            cssName : <span class="string">'css/style.css'</span>,</span><br><span class="line">            padding : <span class="number">5</span> ,</span><br><span class="line">            algorithm : <span class="string">'binary-tree'</span>,</span><br><span class="line">            cssTemplate : <span class="string">'src/css/spriteTemplate.css'</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist/'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>Gulpfile.js</code>的配置相对简单，<code>grunt.spritesmith</code>插件则会根据<code>src/img/*.png</code>目录中配置的图片进行合并雪碧图。<br><code>algorithm</code>配置图片的排列方式，同<code>grunt-css-sprite</code>中<code>algorithm</code>的配置。<br><code>cssTemplate</code>为生成雪碧图样式的模版文件，可以是字符串也可以是函数。如果是字符串，则为模版的地址，则在样式文件中的配置请看3.配置css模版。如果是函数，则可以配置为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">cssTemplate: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr=[];</span><br><span class="line">    data.sprites.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span> <span class="params">(sprite)</span> </span>&#123;</span><br><span class="line">        arr.push(<span class="string">".icon-"</span>+sprite.name+</span><br><span class="line">        <span class="string">"&#123;"</span> +</span><br><span class="line">        <span class="string">"background-image: url('"</span>+sprite.escaped_image+<span class="string">"');"</span>+</span><br><span class="line">        <span class="string">"background-position: "</span>+sprite.px.offset_x+<span class="string">"px "</span>+sprite.px.offset_y+<span class="string">"px;"</span>+</span><br><span class="line">        <span class="string">"width:"</span>+sprite.px.width+<span class="string">";"</span>+</span><br><span class="line">        <span class="string">"height:"</span>+sprite.px.height+<span class="string">";"</span>+</span><br><span class="line">        <span class="string">"&#125;\n"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong> 3.配置css模版 </strong></p><p>在<code>style.css</code>中，</p><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&#123;&#123;#sprites&#125;&#125;   //模版开始</span><br><span class="line">.icon-&#123;&#123;name&#125;&#125;&#123;</span><br><span class="line">    background-image: url(<span class="string">"&#123;&#123;escaped_image&#125;&#125;"</span>);                </span><br><span class="line">    background-position: &#123;&#123;px.offset_x&#125;&#125; &#123;&#123;px.offset_y&#125;&#125;;</span><br><span class="line">    width: &#123;&#123;px.width&#125;&#125;;</span><br><span class="line">    height: &#123;&#123;px.height&#125;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#123;&#123;/sprites&#125;&#125;   //模版开始</span><br></pre></td></tr></table></figure><p><code>name</code>：图片名。<br><code>escaped_image</code>：图片的地址。<br><code>px</code>：图片在雪碧图的数据对象，offset_x为x偏移单位，offset_y为y偏移单位，width为宽度，height为高度。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面主要是总结了四种方法，各有各的优势，可根据自己的需求进行配置。磨刀不误砍柴工，配置好了，才能更好地节省时间完成项目开发。</p><p>DEMO源码地址：<img src="https://github.com/ZENGzoe/Stylesheet" alt="demo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在项目中，有时候需要用到很多小的图片，那么页面访问过程中就需要一次一次地向服务器很多的这样小的图片，严重影响到页面的性能。我们可以将多个小的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于react+nodejs+mongodb+webpack+redux实现图片上传应用</title>
    <link href="http://zengzoe.github.io/2017/04/18/%E5%9F%BA%E4%BA%8Ereact-nodejs-mongodb-webpack-redux%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8/"/>
    <id>http://zengzoe.github.io/2017/04/18/基于react-nodejs-mongodb-webpack-redux实现图片上传应用/</id>
    <published>2017-04-18T12:40:49.000Z</published>
    <updated>2019-03-09T14:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了能够更好地掌握react、nodejs、webpack等知识，开始这个基于react+nodejs+mongodb+webpack+redux实现前后端图片上传的应用。这个项目从开始到实现，包括了登陆、注册、图片展示等页面，功能较简单，有登录、注册、上传图片、复制图片链接、删除图片等功能。在这过程中，遇到了很多个bug，但每一个bug都可以让我对知识的学习了解更加巩固。</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>react+webpack+mongodb+webpack+redux+ES6+fetch</p><h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//下载项目</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/ggstudy-ddup/react-pic-uploader.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> react-pic-uploader/demo</span></span><br><span class="line">//安装依赖</span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line">//启动项目</span><br><span class="line"><span class="meta">$</span><span class="bash"> webpack &amp;&amp; node server.js</span></span><br></pre></td></tr></table></figure><h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><hr><h4 id="npm初始化"><a href="#npm初始化" class="headerlink" title="npm初始化"></a>npm初始化</h4><p>首先创建名为uploader的目录，切换到此目录，然后初始化文件。<br><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> uploader &amp;&amp; <span class="built_in">cd</span> uploader</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure></p><h4 id="安装必要的开发工具包"><a href="#安装必要的开发工具包" class="headerlink" title="安装必要的开发工具包"></a>安装必要的开发工具包</h4><ul><li>webpack : 模块打包工具</li><li>redux : javascript状态容器</li><li>formidable : 用于上传文件的node.js模块包</li><li>express-session : 用于将数据存储在服务器上的node.js中间件</li><li>body-parser : node.js解析body的中间键</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> webpack redux formidable express-<span class="keyword">session</span> <span class="keyword">body</span>-parser <span class="comment">--save-dev</span></span><br></pre></td></tr></table></figure><h4 id="安装生产环境依赖包"><a href="#安装生产环境依赖包" class="headerlink" title="安装生产环境依赖包"></a>安装生产环境依赖包</h4><ul><li>react : 主要框架</li><li>react-dom : React的DOM操作类</li><li>react-router : React的路由库</li><li>express : 主要的node.js Web应用框架</li><li>cookie-parser : express中使用cookie的API</li><li>csurf : node.js csrf防御中间件</li><li>mongoose : mongoose数据库</li><li>path : node.js用于处理文件路径的模块</li><li>fs : node.js用于提供本地文件读写能力的模块</li></ul><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">npm install react react-dom react-router <span class="built_in">express</span> cookie-parser csurf mongoose --<span class="built_in">save</span></span><br></pre></td></tr></table></figure><h4 id="搭建node-js服务器"><a href="#搭建node-js服务器" class="headerlink" title="搭建node.js服务器"></a>搭建node.js服务器</h4><p>这个项目中使用<a href="http://expressjs.com/zh-cn/" target="_blank" rel="noopener">express</a>框架搭建。搭建express基本目录结构：<br><img src="/2017/04/18/基于react-nodejs-mongodb-webpack-redux实现图片上传应用/01.png" alt=""><br><strong> public是项目的静态文件，</strong>放置js css img等文件<br><strong> routes是项目的路由信息文件，</strong>控制地址路由<br>在uploader的目录中，创建名为server.js的文件，添加如下代码：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="keyword">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="keyword">require</span>(<span class="string">"cookie-parser"</span>);</span><br><span class="line"><span class="keyword">var</span> csrf = <span class="keyword">require</span>(<span class="string">'csurf'</span>);</span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="keyword">require</span>(<span class="string">"mongoose"</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="keyword">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="keyword">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> routes = <span class="keyword">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line"><span class="keyword">var</span> checkedRoutes = <span class="keyword">require</span>(<span class="string">'./routes/checkedIndex'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//mongoose数据库</span></span><br><span class="line"><span class="keyword">global</span>.dbHandle = <span class="keyword">require</span>(<span class="string">'./database/dbHandle'</span>);</span><br><span class="line"><span class="keyword">global</span>.db = mongoose.connect(<span class="string">"mongodb://localhost:27017/uploadimgdb"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.<span class="keyword">use</span>(cookieParser());</span><br><span class="line">app.<span class="keyword">use</span>(express.<span class="keyword">static</span>(__dirname));</span><br><span class="line">app.<span class="keyword">use</span>(bodyParser.json());</span><br><span class="line">app.<span class="keyword">use</span>(bodyParser.urlencoded(&#123;extended : <span class="keyword">true</span>&#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="keyword">use</span>(session(&#123;</span><br><span class="line">    secret : <span class="string">'hello'</span>,</span><br><span class="line">    resave : <span class="keyword">false</span>,</span><br><span class="line">    saveUninitialized : <span class="keyword">true</span>,</span><br><span class="line">    cookie : &#123;</span><br><span class="line">        path : <span class="string">"/"</span>,</span><br><span class="line">        maxAge : <span class="number">600000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">"/"</span>,routes);</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">'/upload'</span>, routes);</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">'/register'</span>, routes);</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">'/login'</span>, routes);</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">'/logout'</span>, routes);</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">'/getImages'</span>, routes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// csrf防御</span></span><br><span class="line">app.<span class="keyword">use</span>(csrf());</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">"/"</span>,checkedRoutes);</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">'/isLogin'</span>, checkedRoutes);</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">'/deleteImages'</span>, checkedRoutes);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//error handle</span></span><br><span class="line">app.<span class="keyword">use</span>((err,req,res,next) =&gt; &#123;</span><br><span class="line">    res.status(err.status || <span class="number">500</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器</span></span><br><span class="line"><span class="keyword">var</span> PORT = process.env.PORT || <span class="number">9990</span>;</span><br><span class="line">app.listen(PORT,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    console.log(<span class="string">'Production Express server running at localhost:'</span> + PORT)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在server.js源码中的判断是否登录与删除图片需要csrf防御，所以将这两个路由放入到另外的路由页面中。<br>另外项目中包含注册登录上传图片，所以需要数据库来存储这些数据，这个项目使用mongodb进行数据的存储。详细mongodb可自行查阅～</p><h4 id="安装mongoDB，配置项目数据库"><a href="#安装mongoDB，配置项目数据库" class="headerlink" title="安装mongoDB，配置项目数据库"></a>安装mongoDB，配置项目数据库</h4><p>1.下载mongodb<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl http:<span class="regexp">//</span>downloads.mongodb.org<span class="regexp">/osx/m</span>ongodb-osx-x86_64-<span class="number">2.4</span>.<span class="number">6</span>.tgz &gt; mongodb.tgz</span><br></pre></td></tr></table></figure></p><p>2.解压mongodb<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">mongodb-osx-x86_64-2</span><span class="selector-class">.4</span><span class="selector-class">.6</span></span><br></pre></td></tr></table></figure></p><p>3.将解压的安装文件移动到想要存放的位置,我的是从Download移动到Applications的mongodb中<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mv -n ~<span class="regexp">/Downloads/m</span>ongodb-osx-x86_64-<span class="number">2.4</span>.<span class="number">6</span> ~<span class="regexp">/Applications/m</span>ongodb<span class="regexp">/</span></span><br></pre></td></tr></table></figure></p><p>4.在mongodb根目录下创建data/db目录，用于存放mongodb数据，并给改目录设置权限<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">sudo</span> mkdir -p <span class="class"><span class="keyword">data</span>/db</span></span><br><span class="line"><span class="title">sudo</span> chown -<span class="type">R</span> zengjieyi /<span class="class"><span class="keyword">data</span></span></span><br></pre></td></tr></table></figure></p><p>5.启动mongodb<br><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> bin</span><br><span class="line"><span class="string">./mongod</span></span><br></pre></td></tr></table></figure></p><p><img src="/2017/04/18/基于react-nodejs-mongodb-webpack-redux实现图片上传应用/02.png" alt=""><br>6.进入mongodb shell,可直接编辑数据库<br> 打开另外一个终端<br> <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> Applications/mongodb/bin</span><br><span class="line"><span class="string">./mongo</span></span><br></pre></td></tr></table></figure></p><p><img src="/2017/04/18/基于react-nodejs-mongodb-webpack-redux实现图片上传应用/03.png" alt=""><br>7.在uploader的项目中，创建database文件路径，建立models.js存放数据model，建立dbHandle.js，存放对数据的操作。<br><strong> models.js </strong><br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主要存储用户姓名、密码、上传的图片</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    <span class="string">users :</span>&#123;</span><br><span class="line">        <span class="string">name :</span> &#123; <span class="string">type :</span> String , <span class="string">required :</span><span class="literal">true</span>&#125;,</span><br><span class="line">        <span class="string">password :</span> &#123; <span class="string">type :</span> String , <span class="string">required :</span> <span class="literal">true</span>&#125;,</span><br><span class="line">        <span class="string">imageUpload :</span> [&#123; <span class="string">imgUrl :</span> String , <span class="string">name :</span> String &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong> dbHandle.js </strong><br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于获取数据的操作</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</span><br><span class="line"><span class="keyword">var</span> models = <span class="built_in">require</span>(<span class="string">'./models.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> m <span class="keyword">in</span> models)&#123;</span><br><span class="line">    mongoose.model(m,<span class="keyword">new</span> Schema(models[m]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    getModel : <span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">type</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _getModel(<span class="keyword">type</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _getModel = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">type</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mongoose.model(<span class="keyword">type</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>8.项目绑定数据库已在server.js添加<br><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mongoose数据库</span></span><br><span class="line">    <span class="built_in">global</span>.dbHandle = <span class="keyword">require</span>(<span class="string">'./database/dbHandle'</span>);</span><br><span class="line">    <span class="built_in">global</span>.db = mongoose.connect(<span class="string">"mongodb://localhost:27017/uploadimgdb"</span>);</span><br></pre></td></tr></table></figure></p><h4 id="建立项目路由"><a href="#建立项目路由" class="headerlink" title="建立项目路由"></a>建立项目路由</h4><p>这个项目根据需要csrf防御与否分为两个路由文件，index.js主要是登录、注册、退出登录、上传图片、获取图片、主页，checkIndex.js主要是判断是否登录、删除图片、主页。<br><strong> index.js </strong><br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">"formidable"</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> csrf = <span class="built_in">require</span>(<span class="string">'csurf'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line">router.post(<span class="string">"/register"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> User = global.dbHandle.getModel(<span class="string">"users"</span>);</span><br><span class="line">    <span class="keyword">var</span> uname = req.body.uname,</span><br><span class="line">        upwd = req.body.upwd,</span><br><span class="line">        result = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    User.findOne(&#123;name : uname &#125;,<span class="function">(<span class="params">err , doc</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.rend(<span class="number">500</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(doc)&#123;</span><br><span class="line">            res.send(<span class="number">501</span>);  <span class="comment">//用户名已经存在</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            User.create(&#123;</span><br><span class="line">                name : uname,</span><br><span class="line">                password : upwd</span><br><span class="line">            &#125;,<span class="function">(<span class="params">err , doc </span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(err)&#123;    </span><br><span class="line">                    res.send(<span class="number">500</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> user = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(doc));</span><br><span class="line">                    req.session.user = user.name;</span><br><span class="line">                    res.send(<span class="number">200</span>);  <span class="comment">//注册成功</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//登陆</span></span><br><span class="line">router.post(<span class="string">"/login"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> User = global.dbHandle.getModel(<span class="string">'users'</span>),</span><br><span class="line">        uname = req.body.uname,</span><br><span class="line">        sess = req.session;</span><br><span class="line"></span><br><span class="line">    User.findOne(&#123;</span><br><span class="line">        name : uname</span><br><span class="line">    &#125;, <span class="function">(<span class="params">err,doc</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;    </span><br><span class="line">            res.sendStatus(<span class="number">500</span>);      <span class="comment">//登陆失败</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!doc)&#123;</span><br><span class="line">            res.sendStatus(<span class="number">404</span>);      <span class="comment">//用户名不存在</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(req.body.upwd != doc.password)&#123;</span><br><span class="line">                res.sendStatus(<span class="number">403</span>);      <span class="comment">//密码错误</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> user = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(doc));</span><br><span class="line">                sess.user = user.name;</span><br><span class="line">                res.sendStatus(<span class="number">200</span>);        <span class="comment">//登陆成功</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//退出登陆</span></span><br><span class="line">router.post(<span class="string">"/logout"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    req.session.user = <span class="literal">null</span>;</span><br><span class="line">    req.session.imgUrl = <span class="literal">null</span>;</span><br><span class="line">    res.send(<span class="string">"200"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//上传图片</span></span><br><span class="line">router.post(<span class="string">"/upload"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm(),</span><br><span class="line">        targetDir = path.join(__dirname,<span class="string">"../public/uploadImages"</span>),</span><br><span class="line">        User = global.dbHandle.getModel(<span class="string">'users'</span>),</span><br><span class="line">        filesArr = [],</span><br><span class="line">        extName = <span class="string">''</span>,</span><br><span class="line">        times = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">        imgArr = req.session.imgArr == <span class="literal">undefined</span> ? [] : req.session.imgArr;</span><br><span class="line"></span><br><span class="line">    form.encoding = <span class="string">'utf-8'</span>;        <span class="comment">//设置编码</span></span><br><span class="line">    form.uploadDir = targetDir;     <span class="comment">//设置上传目录</span></span><br><span class="line">    form.keepExtensions = <span class="literal">true</span>;       <span class="comment">//保留后缀</span></span><br><span class="line">    form.maxFieldsSize = <span class="number">2</span>*<span class="number">1024</span>*<span class="number">1024</span>;       <span class="comment">//设置图片大小</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//检验存储上传的文件是否存在</span></span><br><span class="line">    fs.access(targetDir,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            fs.mkdirSync(targetDir);</span><br><span class="line">        &#125;</span><br><span class="line">        _fileParse();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_fileParse</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        form.on(<span class="string">"file"</span>,<span class="function">(<span class="params">filed,file</span>) =&gt;</span> &#123;</span><br><span class="line">            filesArr.push(file);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        form.parse(req, <span class="function">(<span class="params">err, fields, files</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                res.locals.error = err;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> obj of filesArr)&#123;</span><br><span class="line">                <span class="keyword">var</span> filePath = obj.path,</span><br><span class="line">                    fileOleName = obj.name.substring(<span class="number">0</span>,obj.name.lastIndexOf(<span class="string">'.'</span>)),</span><br><span class="line">                    fileExt = filePath.substring(filePath.lastIndexOf(<span class="string">'.'</span>)),</span><br><span class="line">                    curTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"></span><br><span class="line">                times = times == curTime ? (curTime+<span class="number">1</span>) : curTime;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> fileName = times + fileExt,</span><br><span class="line">                    targetFile = path.join(targetDir,fileName);</span><br><span class="line"></span><br><span class="line">                fs.renameSync(filePath, targetFile);</span><br><span class="line">                imgArr.push(&#123;imgUrl:<span class="string">`/public/uploadImages/<span class="subst">$&#123;fileName&#125;</span>`</span>,name:fileOleName &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            User.update(&#123;</span><br><span class="line">                name : req.session.user</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                imageUpload : imgArr</span><br><span class="line">            &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                    res.send(<span class="number">500</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            req.session.imgArr = imgArr;</span><br><span class="line">            res.sendStatus(<span class="number">200</span>);</span><br><span class="line">            <span class="comment">// res.redirect("/");</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取图片</span></span><br><span class="line">router.get(<span class="string">"/getImages"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> User = global.dbHandle.getModel(<span class="string">"users"</span>);</span><br><span class="line">    <span class="keyword">var</span> imgArr = req.session.imgArr == <span class="literal">undefined</span> ? [] : req.session.imgArr;</span><br><span class="line"></span><br><span class="line">    User.findOne(&#123;</span><br><span class="line">        name : req.session.user</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err,doc</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.send(<span class="number">404</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(doc)&#123;</span><br><span class="line">            doc = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(doc));</span><br><span class="line">            <span class="keyword">if</span>(doc.imageUpload)&#123;</span><br><span class="line">                imgArr = doc.imageUpload;</span><br><span class="line">                req.session.imgArr = imgArr;</span><br><span class="line">                <span class="built_in">console</span>.log(imgArr);</span><br><span class="line">                res.json(imgArr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.json(imgArr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">"/"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sess = req.session;</span><br><span class="line">    res.send(<span class="number">200</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p><p><strong> checkedIndex.js </strong><br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> csrf = <span class="built_in">require</span>(<span class="string">'csurf'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否登陆</span></span><br><span class="line">router.get(<span class="string">"/isLogin"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sess = req.session,</span><br><span class="line">        token = sess.token;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sess.user)&#123;</span><br><span class="line">        token = token == <span class="literal">undefined</span> ? req.csrfToken() : token;</span><br><span class="line">        sess.token = token;</span><br><span class="line"></span><br><span class="line">        res.send(<span class="built_in">JSON</span>.stringify(&#123;code : <span class="number">200</span> , user : sess.user , token : token&#125;));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.send(<span class="built_in">JSON</span>.stringify(&#123;code : <span class="number">403</span>&#125;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除图片</span></span><br><span class="line">router.post(<span class="string">"/deleteImages"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> User = global.dbHandle.getModel(<span class="string">"users"</span>),</span><br><span class="line">        num = req.body.num,</span><br><span class="line">        imgArr = req.session.imgArr,</span><br><span class="line">        imgUrl = imgArr[num].imgUrl,</span><br><span class="line">        filePath = imgUrl.substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本地文件删除</span></span><br><span class="line">    fs.unlink(filePath,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    imgArr.splice(num,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    User.update(&#123;</span><br><span class="line">        name : req.session.user</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        imageUpload : imgArr</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.send(<span class="number">500</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            req.session.imgArr = imgArr;</span><br><span class="line">            res.send(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">"/"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sess = req.session;</span><br><span class="line">    res.send(<span class="number">200</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p><p>到这里node.js搭建服务器与相关后端接口已经差不多了，接下来开始搭建页面吧～～</p><h2 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h2><p>由于项目中使用到react和es6，需要webpack编译，在uploader目录下添加webpack.config.js文件<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;    </span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'./build/index.js'</span>,</span><br><span class="line">        publicPath : <span class="string">'/'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader: <span class="string">'babel-loader?presets[]=es2015&amp;presets[]=react'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>src/index.js为项目的编写react内容的主文件，此时需要在uploader目录下创建src文件夹并创建index.js。<br>项目中使用到webpack-dev-server的inline模式，需要修改package.json添加启动代码，将以下代码插入package.json中：<br><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"if-env NODE_ENV=production &amp;&amp; npm run start:prod || npm run start:dev"</span>,</span><br><span class="line">    <span class="string">"start:dev"</span>: <span class="string">"webpack-dev-server --inline --content-base . --histroy-api-fallback"</span>,</span><br><span class="line">    <span class="string">"start:prod"</span>: <span class="string">"webpack &amp;&amp; node server.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="string">"keywords"</span>: [</span><br><span class="line">    <span class="string">"react"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>启动项目文件可以通过<code>npm run start:prod</code>命令。</p><h2 id="搭建页面"><a href="#搭建页面" class="headerlink" title="搭建页面"></a>搭建页面</h2><p>1.建立主页面<br>在uploader的目录下，创建index.html<br><strong> index.html </strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基于React实现的前后端分离图片上传系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"./public/css/index.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./build/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>index.css为样式文件，此时需要在public创建css文件目录并在css中创建index.css样式文件。<br>index.js为webpack编译src/index.js后的文件。</p><p>2.引入redux，控制项目的数据状态<br>在redux中，Store用来存储数据，类似一个大的容器。State对象包含所有的数据，可以在某个点获取当时的数据。Action可以发出通知，让State发生变化。<br>在src文件夹内创建action文件目录和reducers文件目录分别存放对应的index.js。<br><strong> action/index.js </strong><br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REQUEST_ISLOGIN = <span class="string">"REQUEST_ISLOGIN"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RECEIVE_LOGINED = <span class="string">"RECEIVE_LOGINED"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RECEIVE_NOT_LOGIN = <span class="string">"RECEIVE_NOT_LOGIN"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REQUEST_IMAGES = <span class="string">"REQUEST_IMAGES"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RECEIVE_IMAGES = <span class="string">"RECEIVE_IMAGES"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> UPLOAD_IMAGES = <span class="string">"UPLOAD_IMAGES"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> EXIT_LOGIN = <span class="string">"EXIT_LOGIN"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//退出登录操作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> exitLogin = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="keyword">type</span> : EXIT_LOGIN</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//判断是否登录前操作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> requestIslogin = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="keyword">type</span> : REQUEST_ISLOGIN</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//判断是否登录后，返回已登陆的操作，返回用户名跟唯一的token</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> receiveLogined = <span class="function"><span class="params">json</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="keyword">type</span> : RECEIVE_LOGINED,</span><br><span class="line">    user : json.user,</span><br><span class="line">    token : json.token</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//判断是否登录后，返回为登录的操作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> receiveNotLogined = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="keyword">type</span> : RECEIVE_NOT_LOGIN</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//请求图片前操作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> requestImages = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="keyword">type</span> : REQUEST_IMAGES</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//请求图片后的操作，返回获取的图片</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> receiveImages = <span class="function"><span class="params">json</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="keyword">type</span> : RECEIVE_IMAGES,</span><br><span class="line">    images : json</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否登录</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchIslogin = <span class="function"><span class="params">()</span> =&gt;</span> dispatch =&gt; &#123;</span><br><span class="line">    dispatch(requestIslogin())</span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">"/isLogin"</span>,&#123;</span><br><span class="line">                method : <span class="string">"get"</span>,</span><br><span class="line">                credentials: <span class="string">'include'</span>,</span><br><span class="line">                header : &#123;</span><br><span class="line">                    <span class="string">"Content-Type"</span> : <span class="string">"application/json"</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">        .then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(json.code == <span class="number">200</span>)&#123;</span><br><span class="line">                dispatch(receiveLogined(json))</span><br><span class="line">                dispatch(requestImages())</span><br><span class="line">                <span class="keyword">return</span> fetch(<span class="string">"/getImages"</span>,&#123;</span><br><span class="line">                    method : <span class="string">"get"</span>,</span><br><span class="line">                    credentials: <span class="string">'include'</span>,</span><br><span class="line">                    header : &#123;</span><br><span class="line">                        <span class="string">"Content-Type"</span> : <span class="string">"application/json"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">                .then(<span class="function"><span class="params">json</span> =&gt;</span> dispatch(receiveImages(json)))</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dispatch(receiveNotLogined())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请求图片</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchImages = <span class="function"><span class="params">()</span> =&gt;</span> dispatch =&gt; &#123;</span><br><span class="line">    dispatch(requestImages())</span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">"/getImages"</span>,&#123;</span><br><span class="line">        method : <span class="string">"get"</span>,</span><br><span class="line">        credentials: <span class="string">'include'</span>,</span><br><span class="line">        header : &#123;</span><br><span class="line">            <span class="string">"Content-Type"</span> : <span class="string">"application/json"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">    .then(<span class="function"><span class="params">json</span> =&gt;</span> dispatch(receiveImages(json)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据是否登录来能否请求图片</span></span><br><span class="line"><span class="keyword">const</span> shouldFetchImages = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isLogin = state.user;</span><br><span class="line">    <span class="keyword">if</span>(isLogin.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据是否登录来能否请求图片</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchImagesIfNeeded = <span class="function"><span class="params">()</span> =&gt;</span> (dispatch,getState) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(getState());</span><br><span class="line">    <span class="keyword">if</span>(shouldFetchImages(getState()))&#123;</span><br><span class="line">        <span class="keyword">return</span> dispatch(fetchImages())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上传图片</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> uploadImages = <span class="function"><span class="params">images</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="keyword">type</span> : UPLOAD_IMAGES,</span><br><span class="line">    images</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在这个项目中，需要从Store读取四个数据，分别是用户名user、csrf防御的token、用户的图片images，所以需要在reducers中合并输出这三个数据。<br><strong> reducers/index.js </strong><br><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">"redux"</span></span><br><span class="line">import &#123; REQUEST_ISLOGIN , RECEIVE_LOGINED , RECEIVE_NOT_LOGIN , REQUEST_IMAGES , RECEIVE_IMAGES , UPLOAD_IMAGES , EXIT_LOGIN&#125; <span class="keyword">from</span> <span class="string">"../actions"</span></span><br><span class="line"></span><br><span class="line">const<span class="built_in"> user </span>= (state = <span class="string">""</span>,action) =&gt; &#123;</span><br><span class="line">    switch(action.type)&#123;</span><br><span class="line">        case RECEIVE_LOGINED :</span><br><span class="line">            return action.user</span><br><span class="line">        case REQUEST_ISLOGIN :</span><br><span class="line">        case RECEIVE_NOT_LOGIN :</span><br><span class="line">        case EXIT_LOGIN : </span><br><span class="line">            return <span class="string">""</span>;</span><br><span class="line">       <span class="built_in"> default </span>:</span><br><span class="line">            return state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const token = (<span class="attribute">state</span>=<span class="string">""</span>,action) =&gt; &#123;</span><br><span class="line">    switch(action.type)&#123;</span><br><span class="line">        case RECEIVE_LOGINED : </span><br><span class="line">            return action.token</span><br><span class="line">       <span class="built_in"> default </span>:</span><br><span class="line">            return state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const images = (state = [] , action) =&gt; &#123;</span><br><span class="line">    switch(action.type)&#123;</span><br><span class="line">        case RECEIVE_IMAGES :</span><br><span class="line">            return [<span class="built_in">..</span>.state,<span class="built_in">..</span>.action.images]</span><br><span class="line">        case UPLOAD_IMAGES : </span><br><span class="line">        console.log(<span class="string">"length:"</span>,action.images);</span><br><span class="line">            return [<span class="built_in">..</span>.state,<span class="built_in">..</span>.action.images]</span><br><span class="line">        case REQUEST_IMAGES :</span><br><span class="line">       <span class="built_in"> default </span>:</span><br><span class="line">            return state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const rootReducer = combineReducers(&#123;</span><br><span class="line">    user,</span><br><span class="line">    images,</span><br><span class="line">    token</span><br><span class="line">&#125;)</span><br><span class="line"><span class="builtin-name">export</span><span class="built_in"> default </span>rootReducer</span><br></pre></td></tr></table></figure></p><p>3.react组件化<br>项目中，页面分为注册、登录、主页三个页面，主页的组件分为头部组件、上传图片组件、图片列表组件。架构图如下：<br><img src="/2017/04/18/基于react-nodejs-mongodb-webpack-redux实现图片上传应用/04.png" alt=""><br>因此，添加以上文件与文件夹，uploader文件目录如下：<br><img src="/2017/04/18/基于react-nodejs-mongodb-webpack-redux实现图片上传应用/05.png" alt=""><br>页面代码如下：<br><strong> src/index.js </strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'redux-logger'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./container/App'</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middleware = [ thunk ];</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">  middleware.push(createLogger());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  applyMiddleware(...middleware)</span><br><span class="line">)</span><br><span class="line">render(</span><br><span class="line">    (</span><br><span class="line">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">            &lt;App /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    ),</span></span><br><span class="line"><span class="regexp">    document.getElementById('app')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure></p><p>在上面代码中，将store存入Provider，方便子组件获取数据。<br><strong> Container/App.js </strong><br><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route, hashHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../page/Home'</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'../page/Login'</span>;</span><br><span class="line"><span class="keyword">import</span> Register <span class="keyword">from</span> <span class="string">'../page/Register'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>   (</span><br><span class="line">            &lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">                &lt;Route path=<span class="string">'/'</span> component=&#123;Home&#125; /&gt;            </span><br><span class="line">                &lt;Route path=<span class="string">'/login'</span> component=&#123;Login&#125;/&gt;</span><br><span class="line">                &lt;Route path=<span class="string">'/register'</span> component=&#123;Register&#125;/&gt;</span><br><span class="line">            &lt;/Router&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>上面代码中，使用到Router设置三个页面的路由。<br><strong> Page/Register.js </strong><br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React from <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; from <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// components</span></span><br><span class="line"><span class="keyword">import</span> Login from <span class="string">'./Login'</span></span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">    getInitialState() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            username : <span class="string">""</span>,</span><br><span class="line">            password : <span class="string">""</span>,</span><br><span class="line">            rePassword : <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleChange(e) &#123;</span><br><span class="line">        <span class="keyword">var</span> newState = &#123;&#125;;</span><br><span class="line">        newState[e.target.name] = e.target.value;</span><br><span class="line">        <span class="keyword">this</span>.setState(newState);</span><br><span class="line">    &#125;,</span><br><span class="line">    contextTypes : &#123;</span><br><span class="line">        router : React.PropTypes.<span class="keyword">object</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick(e)&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state.username == <span class="literal">null</span> || <span class="keyword">this</span>.state.username == <span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.username.focus();</span><br><span class="line">            <span class="keyword">this</span>.showErr(<span class="string">"用户名不能为空"</span>,<span class="keyword">this</span>.refs.username);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.state.password == <span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.password.focus();</span><br><span class="line">            <span class="keyword">this</span>.showErr(<span class="string">"密码不能为空"</span>,<span class="keyword">this</span>.refs.password);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.state.rePassword == <span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.rePassword.focus();</span><br><span class="line">            <span class="keyword">this</span>.showErr(<span class="string">"确认密码不能为空"</span>,<span class="keyword">this</span>.refs.rePassword);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.state.password != <span class="keyword">this</span>.state.rePassword)&#123;</span><br><span class="line">            <span class="keyword">this</span>.showErr(<span class="string">"密码与确认密码不匹配"</span>,<span class="keyword">this</span>.refs.rePassword);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">data</span> = &#123;</span><br><span class="line">                <span class="string">"uname"</span> : <span class="keyword">this</span>.state.username,</span><br><span class="line">                <span class="string">"upwd"</span> :<span class="keyword">this</span>.state.password</span><br><span class="line">            &#125;;</span><br><span class="line">            fetch(<span class="string">'/register'</span>,&#123;</span><br><span class="line">                method : <span class="string">"post"</span>,</span><br><span class="line">                credentials: <span class="string">'include'</span>,</span><br><span class="line">                headers : &#123;</span><br><span class="line">                    <span class="string">'Content-Type'</span> : <span class="string">'application/json'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                body : JSON.stringify(<span class="keyword">data</span>)</span><br><span class="line">            &#125;).then((res) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(res.ok)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.refs.err.innerHTML = <span class="string">"注册成功"</span>;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        <span class="keyword">this</span>.context.router.push(<span class="string">"/"</span>)</span><br><span class="line">                    &#125;,<span class="number">1000</span>)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(res.status == <span class="number">501</span>)&#123;</span><br><span class="line">                        <span class="keyword">this</span>.showErr(<span class="string">"用户名已经存在"</span>,<span class="keyword">this</span>.refs.username);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,(err) =&gt; &#123;</span><br><span class="line">                <span class="keyword">this</span>.refs.err(<span class="string">"注册失败"</span>);</span><br><span class="line">                <span class="keyword">this</span>.context.router.push(<span class="string">"/register"</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    showErr(errStr,box)&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">        that.refs.err.innerHTML = errStr;</span><br><span class="line">        box.onchange = function()&#123;</span><br><span class="line">            that.refs.err.innerHTML = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"box"</span>&gt;</span><br><span class="line">                &lt;form action=<span class="string">"/register"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">                    &lt;h2&gt;注册页&lt;/h2&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li&gt;&lt;input name=<span class="string">"username"</span> ref=<span class="string">"username"</span> value=&#123;<span class="keyword">this</span>.state.uasername&#125; placeholder=<span class="string">"请输入用户名"</span> type=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125;/&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;input name=<span class="string">"password"</span> ref=<span class="string">"password"</span> value=&#123;<span class="keyword">this</span>.state.password&#125; placeholder=<span class="string">"请输入密码"</span> type=<span class="string">"password"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;input name=<span class="string">"rePassword"</span> ref=<span class="string">"rePassword"</span> value=&#123;<span class="keyword">this</span>.state.rePassword&#125; placeholder=<span class="string">"请再次输入密码"</span> type=<span class="string">"password"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;input name=<span class="string">"login"</span> value=<span class="string">"注册"</span> ref=<span class="string">"login"</span> type=<span class="string">"submit"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125; className=<span class="string">"box_btn"</span> /&gt; &lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;p className=<span class="string">"err"</span> ref=<span class="string">"err"</span>&gt;&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">                    &lt;/ul&gt;                 </span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">                &lt;ul className=<span class="string">"go"</span>&gt;</span><br><span class="line">                    &lt;li className=<span class="string">"other"</span>&gt;&lt;Link to=<span class="string">"/"</span> &gt;主页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                    &lt;li className=<span class="string">"other"</span>&gt;&lt;Link to=<span class="string">"Login"</span> &gt;登陆&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在上面代码中，注册使用了register接口，注意需要fetch中添加<code>credentials: &#39;include&#39;</code>，因为fetch不会添加cookie到服务器，这个配置就是将cookie添加保存到服务器。</p><p><strong> page/Login.js </strong><br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React from <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; from <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// components</span></span><br><span class="line"><span class="keyword">import</span> Register from <span class="string">'./Register'</span></span><br><span class="line"><span class="keyword">import</span> Home from <span class="string">'./Home'</span></span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">    getInitialState()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            username : <span class="string">""</span>,</span><br><span class="line">            password : <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    showErr(errStr,box)&#123;</span><br><span class="line">        let that = <span class="keyword">this</span>;</span><br><span class="line">        that.refs.err.innerHTML = errStr;</span><br><span class="line">        box.onchange = function()&#123;</span><br><span class="line">            that.refs.err.innerHTML = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleChange(e)&#123;</span><br><span class="line">        <span class="keyword">var</span> newState = &#123;&#125;;</span><br><span class="line">        newState[e.target.name] = e.target.value;</span><br><span class="line">        <span class="keyword">this</span>.setState(newState);</span><br><span class="line">    &#125;,</span><br><span class="line">    contextTypes : &#123;</span><br><span class="line">        router : React.PropTypes.<span class="keyword">object</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick(e)&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state.username == <span class="string">""</span> || <span class="keyword">this</span>.state.username == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.username.focus();</span><br><span class="line">            <span class="keyword">this</span>.showErr(<span class="string">"用户名不能为空"</span>,<span class="keyword">this</span>.refs.username);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.state.password == <span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.password.focus();</span><br><span class="line">            <span class="keyword">this</span>.showErr(<span class="string">"密码不能为空"</span>,<span class="keyword">this</span>.refs.password);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            let <span class="keyword">data</span> = &#123;</span><br><span class="line">                <span class="string">"uname"</span> : <span class="keyword">this</span>.state.username,</span><br><span class="line">                <span class="string">"upwd"</span> : <span class="keyword">this</span>.state.password</span><br><span class="line">            &#125;</span><br><span class="line">            fetch(<span class="string">'/login'</span>,&#123;</span><br><span class="line">                method : <span class="string">"post"</span>,</span><br><span class="line">                credentials: <span class="string">'include'</span>,</span><br><span class="line">                headers : &#123;</span><br><span class="line">                    <span class="string">'Content-Type'</span> : <span class="string">'application/json'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                body : JSON.stringify(<span class="keyword">data</span>)</span><br><span class="line">            &#125;).then((res) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(res.ok)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.refs.err.innerHTML = <span class="string">"登陆成功！"</span>;</span><br><span class="line">                    <span class="keyword">this</span>.context.router.push(<span class="string">"/"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(res.status == <span class="number">404</span>)&#123;</span><br><span class="line">                        <span class="keyword">this</span>.refs.username.focus();</span><br><span class="line">                        <span class="keyword">this</span>.showErr(<span class="string">"用户名不存在！"</span>,<span class="keyword">this</span>.refs.username);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.status == <span class="number">403</span>)&#123;</span><br><span class="line">                        <span class="keyword">this</span>.refs.password.focus();</span><br><span class="line">                        <span class="keyword">this</span>.showErr(<span class="string">"密码错误"</span>,<span class="keyword">this</span>.refs.password);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">this</span>.showErr(<span class="string">"登陆失败"</span>,<span class="keyword">this</span>.refs.username);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,(err) =&gt; &#123;</span><br><span class="line">                <span class="keyword">this</span>.showErr(<span class="string">"登陆失败"</span>,<span class="keyword">this</span>.refs.username);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"box"</span>&gt;</span><br><span class="line">                &lt;form action=<span class="string">"login"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">                    &lt;h2&gt;登录页&lt;/h2&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li&gt;&lt;input name=<span class="string">"username"</span> ref=<span class="string">"username"</span> value=&#123;<span class="keyword">this</span>.state.username&#125; placeholder=<span class="string">"请输入用户名"</span> type=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;input name=<span class="string">"password"</span> ref=<span class="string">"password"</span> value=&#123;<span class="keyword">this</span>.state.password&#125; placeholder=<span class="string">"请输入密码"</span> type=<span class="string">"password"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;input name=<span class="string">"login"</span> ref=<span class="string">"login"</span> value=<span class="string">"登录"</span> type=<span class="string">"submit"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125; className=<span class="string">"box_btn"</span> /&gt; &lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;p ref=<span class="string">"err"</span> className=<span class="string">"err"</span>&gt;&lt;/p&gt;&lt;/li&gt; </span><br><span class="line">                    &lt;/ul&gt;                  </span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">                &lt;ul className=<span class="string">"go"</span>&gt;</span><br><span class="line">                    &lt;li className=<span class="string">"other"</span>&gt;&lt;Link to=<span class="string">"/"</span> &gt;主页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                    &lt;li className=<span class="string">"other"</span>&gt;&lt;Link to=<span class="string">"Register"</span> &gt;注册&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong> components/Header.js </strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass (&#123;</span><br><span class="line">    contextTypes : &#123;</span><br><span class="line">        router : React.PropTypes.object</span><br><span class="line">    &#125;,</span><br><span class="line">    logout(e)&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; exitLogin &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        fetch(<span class="string">"/logout"</span>,&#123;</span><br><span class="line">            method : <span class="string">"post"</span>,</span><br><span class="line">            credentials: <span class="string">'include'</span>,</span><br><span class="line">            header : &#123;</span><br><span class="line">                <span class="string">"Content-Type"</span> : <span class="string">"application/json"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(res.ok)&#123;</span><br><span class="line">                exitLogin();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;header&gt;</span><br><span class="line">                &lt;h1&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>基于React实现的前后端分离图片上传系统<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">                &lt;nav&gt;                     </span><br><span class="line">                    &#123; <span class="keyword">this</span>.props.user != <span class="string">""</span> ? <span class="keyword">this</span>.renderLoginedBtn() : <span class="keyword">this</span>.renderNotLoginBtn() &#125;</span><br><span class="line">                &lt;<span class="regexp">/nav&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>header&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;,</span><br><span class="line">    renderNotLoginBtn() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/Login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/Register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    renderLoginedBtn(name) &#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;ul&gt;    </span></span><br><span class="line"><span class="regexp">                &lt;li&gt;&lt;p className="name"&gt;&#123;this.props.user&#125;&lt;/</span>p&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">onClick</span>=<span class="string">&#123;this.logout&#125;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure></p><p>在上面代码中，需要根据登录与否修改状态，如已登录，显示用户名。</p><p><strong> components/Upload.js </strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">    contextTypes : &#123;</span><br><span class="line">        router : React.PropTypes.object</span><br><span class="line">    &#125;,</span><br><span class="line">    handleUpload(e) &#123;</span><br><span class="line">        <span class="keyword">let</span> isAllImage = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">let</span> &#123; uploadFuc &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="comment">//判断是否都是图片</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> <span class="keyword">this</span>.refs.upload.files)&#123;</span><br><span class="line">            <span class="keyword">let</span> _type = val.type;</span><br><span class="line">            <span class="keyword">if</span>(!_type.includes(<span class="string">"image"</span>))&#123;</span><br><span class="line">                isAllImage = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">this</span>.showErr(<span class="string">"只能上传图片"</span>,<span class="number">3000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全是图片</span></span><br><span class="line">        <span class="keyword">if</span>(isAllImage)&#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.formupload.submit();</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                location.reload();</span><br><span class="line">            &#125;,<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    showErr(errStr,time)&#123;</span><br><span class="line">        <span class="keyword">this</span>.refs.err.innerHTML = errStr;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.err.innerHTML = <span class="string">""</span>;</span><br><span class="line">        &#125;,time)</span><br><span class="line">    &#125;,</span><br><span class="line">    uploadForm() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;section className=<span class="string">"col col_left"</span>&gt;</span><br><span class="line">                &lt;div className=<span class="string">"upload_wrap"</span>&gt;</span><br><span class="line">                    &lt;em&gt;上传图片&lt;<span class="regexp">/em&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;form action="/u</span>pload<span class="string">" method="</span>POST<span class="string">" encType="</span>multipart/form-data<span class="string">" role="</span>form<span class="string">" ref="</span>formupload<span class="string">" target="</span>showResult<span class="string">"&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type="</span>file<span class="string">" multiple="</span>multiple<span class="string">" accept="</span>image<span class="comment">/*" ref="upload" name="upload" className="upload" onChange=&#123;this.handleUpload&#125; /&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/form&gt;</span></span><br><span class="line"><span class="comment">                    &lt;p className="err" ref="err"&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">                    &lt;iframe ref="showResult" className="result" name="showResult"&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="comment">                &lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;/section&gt;</span></span><br><span class="line"><span class="comment">        )</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    render() &#123;</span></span><br><span class="line"><span class="comment">        let &#123; user &#125;  = this.props;</span></span><br><span class="line"><span class="comment">        return user.length &gt; 0 ? this.uploadForm() : (&lt;p&gt;&lt;/p&gt;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br></pre></td></tr></table></figure></p><p>在上面代码中，由于node.js使用了formidable模块，页面中，只需要submit即可。</p><p><strong> components/Images.js </strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">    handleCopy(e)&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> parent = e.target.parentNode,</span><br><span class="line">            item_act_input = parent.querySelector(<span class="string">".item_act_input"</span>),</span><br><span class="line">            range = <span class="built_in">document</span>.createRange();</span><br><span class="line"></span><br><span class="line">        item_act_input.innerHTML = <span class="string">`<span class="subst">$&#123;location.host&#125;</span><span class="subst">$&#123;item_act_input.innerHTML&#125;</span>`</span>;</span><br><span class="line">        range.selectNode(item_act_input);</span><br><span class="line">        <span class="built_in">window</span>.getSelection().addRange(range);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> copy = <span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>);</span><br><span class="line">        alert(<span class="string">"复制成功"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleDelete(e)&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="keyword">var</span> num = e.target.getAttribute(<span class="string">"data-id"</span>),</span><br><span class="line">            url = <span class="string">"/deleteImages"</span>,</span><br><span class="line">            parents = e.target.parentNode.parentNode,</span><br><span class="line">            token = <span class="keyword">this</span>.props.token;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> isDelete = confirm(<span class="string">"确定删除这张图片吗？"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isDelete)&#123;</span><br><span class="line">            fetch(url,&#123;</span><br><span class="line">                method : <span class="string">"POST"</span>,</span><br><span class="line">                credentials: <span class="string">'include'</span>,</span><br><span class="line">                headers : &#123;</span><br><span class="line">                    <span class="string">'Content-Type'</span> : <span class="string">'application/json'</span>,</span><br><span class="line">                    <span class="string">'X-CSRF-Token'</span>: token</span><br><span class="line">                &#125;,</span><br><span class="line">                body : <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">                    num : num</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(res.ok)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.refs.imgbox.removeChild(parents);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; imageList &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> imageList.length &lt;= <span class="number">0</span> ? (<span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">"col col_right"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span>) : (</span><br><span class="line">            &lt;section className=<span class="string">"col col_right"</span>&gt;</span><br><span class="line">                &lt;ul ref=<span class="string">"imgbox"</span>&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        imageList.map( <span class="function">(<span class="params">image, i</span>) =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> (</span><br><span class="line">                                &lt;li key=&#123;i&#125; className=<span class="string">"item"</span>&gt;</span><br><span class="line">                                    &lt;div className=<span class="string">"item_img"</span>&gt;</span><br><span class="line">                                        &lt;img src=&#123;image.imgUrl&#125; alt=&#123;image.name&#125;/&gt;</span><br><span class="line">                                    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                                    &lt;div className="item_desc"&gt;</span></span><br><span class="line"><span class="regexp">                                        &lt;p&gt;&#123;image.name&#125;&lt;/</span>p&gt;</span><br><span class="line">                                    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                                    &lt;div className="item_act"&gt;</span></span><br><span class="line"><span class="regexp">                                        &lt;p className="hide item_act_input" &gt;&#123;image.imgUrl&#125;&lt;/</span>p&gt;</span><br><span class="line">                                        &lt;a href=&#123;image.imgUrl&#125; className=<span class="string">"item_act_copy"</span>  onClick=&#123;<span class="keyword">this</span>.handleCopy&#125;&gt;复制链接&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">                                        &lt;a href=&#123;image.imgUrl&#125; target="_blank" &gt;打开&lt;/</span>a&gt;</span><br><span class="line">                                        &lt;a href=&#123;image.imgUrl&#125; onClick=&#123;<span class="keyword">this</span>.handleDelete&#125; data-id=&#123;i&#125; &gt;删除&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">                                    &lt;/</span>div&gt;</span><br><span class="line">                                &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                            )</span></span><br><span class="line"><span class="regexp">                        &#125;)</span></span><br><span class="line"><span class="regexp">                    &#125;</span></span><br><span class="line"><span class="regexp">                &lt;/u</span>l&gt;</span><br><span class="line">            &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure></p><p>在上面的代码中，通过父级组件的props获取全部的图片，进行遍历渲染出来。</p><p>到这里，已经完成全部的功能，可以通过<code>npm run start:prod</code>启动项目，通过<a href="localhost:9990" target="_blank" rel="noopener">localhost:9990</a>预览项目。<br>需要代码的可移步至Github:<a href="https://github.com/ggstudy-ddup/react-pic-uploader/tree/master/demo" target="_blank" rel="noopener">源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;为了能够更好地掌握react、nodejs、webpack等知识，开始这个基于react+nodejs+mongodb+webpack+re
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>讲讲ECMAScript 6那些事</title>
    <link href="http://zengzoe.github.io/2016/09/15/%E8%AE%B2%E8%AE%B2es6%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://zengzoe.github.io/2016/09/15/讲讲es6那些事/</id>
    <published>2016-09-14T17:56:43.000Z</published>
    <updated>2019-03-09T14:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript 6（下面简称ES6）已于2015年6月正式发布，它提供的许多新的语法特性，将会成为Javascript语言新的标准。</p><p>ES6发布至今，许多浏览器的最新版本对ES6大部分特性都实现了,但是没有浏览器对ES6全部特性能够完美的支持,可以通过<a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">http://kangax.github.io/compat-table/es6/</a>查看浏览器的支持情况。如果想要更好的体验ES6的新特性和新语法，可以使用转换器，将ES6转换成ES5。</p><p>ES6的出现，给前端开发者们带来不一样的体验，使用ES6可以更加方便的实现很多复杂的功能，提高前端开发者的效率。这篇博客将会介绍ES6比较常用的语法特性，希望能够给大家带来收获。在线测试代码可以点击<a href="http://babeljs.cn/repl/" target="_blank" rel="noopener">这里</a>。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p> <strong> <a href="#var">1.let和const</a> </strong><br> <strong> <a href="#arrow">2.箭头函数</a> </strong><br> <strong> <a href="#string">3.字符串</a> </strong><br> <strong> <a href="#deconstruct">4.解构赋值</a> </strong><br> <strong> <a href="#parameter">5.函数参数</a> </strong><br> <strong> <a href="#class">6.类 class</a> </strong><br> <strong> <a href="#symbols">7.Symbols</a> </strong><br> <strong> <a href="#for">8.for…of循环</a> </strong><br> <strong> <a href="#setAndMap">9.Set和Map数据解构</a> </strong><br> <strong> <a href="#promise">10.Promise</a> </strong><br> <strong> <a href="#generators">11.Generators生成器</a> </strong></p><hr><h2 id="1-let和const"><a href="#1-let和const" class="headerlink" title="1.let和const"></a><span id="var">1.let和const</span></h2><p><code>let</code>和<code>const</code>是ES6新增的声明变量的命令。使用方法与<code>var</code>相似，不过<code>let</code>和<code>const</code>声明的变量只能在所在的代码块使用，也就是块级作用域。</p><p><strong> <code>Const</code> </strong><br><code>const</code>即constant，用来声明只读的常量，一旦声明就必须赋值，声明常量之后不可赋值，但是可以继续添加属性。<br>（1）<code>const</code>声明常量时必须赋值，否则报错：<br><figure class="highlight capnproto"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Pi;  // Missing initializer <span class="keyword">in</span> <span class="keyword">const</span> declaration</span><br></pre></td></tr></table></figure></p><p>（2）由于<code>const</code>声明的Pi是常量，如果初始化后对其赋值，则报错：<br><figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Pi</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">Pi</span> = <span class="number">3</span>;     //Assignment <span class="keyword">to</span> constant variable.</span><br></pre></td></tr></table></figure></p><p>（3）常量<code>obj</code>是一个对象，可以对其添加属性，但不可以再次赋值：<br><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">const obj = &#123;&#125;<span class="comment">;</span></span><br><span class="line">obj.name = <span class="string">"张三"</span><span class="comment">;</span></span><br><span class="line">console.log(obj)<span class="comment">;           // &#123;name: "张三"&#125;</span></span><br><span class="line"><span class="attribute">obj</span> = &#123;&#125;<span class="comment">;              //Assignment to constant variable.</span></span><br></pre></td></tr></table></figure></p><p><strong> <code>let</code> </strong><br><code>let</code>其与<code>var</code>相似，它们的不同体现在三点：<br>（1）不存在变量提升<br>使用<code>var</code>：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getStr</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg) &#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">'hello world'</span>;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(getStr(<span class="literal">false</span>));  <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><p>使用<code>let</code>:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"hello"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arg) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">'hello world'</span>;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getStr(<span class="literal">false</span>));  <span class="comment">//hello</span></span><br></pre></td></tr></table></figure></p><p>第一个例子中，由于if内声明的变量会被提升到函数头部，所以返回了undefined。第二个例子由于let声明的变量不会发生变量提升，if内声明的变量只能在当前所在的代码块使用，所以直接返回hello。</p><p>（2）暂时性死区<br><code>let</code>声明的变量只能在代码块中使用，同时必须在声明后才能使用，否则会报错,这就是暂时性死区。<br><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">str</span>);       <span class="comment">//ReferenceError: str is not defined</span></span><br><span class="line">    <span class="built_in">let</span> <span class="built_in">str</span> = <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>let</code>命令声明str之前，上面的代码都属于str的”死区”。<br>如果将上面的<code>let</code>变成<code>var</code>,则返回undefined：<br><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">str</span>);       <span class="comment">//undefined</span></span><br><span class="line">    var <span class="built_in">str</span> = <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（3）不允许重复声明<br><code>let</code>不允许在相同的作用域内，重复声明同一个变量。而<code>var</code>重复声明变量，则后面的变量会覆盖前面声明的变量。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">"world"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(str); <span class="comment">//SyntaxError: Identifier 'str' has already been declared</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因此，对于<code>const</code>、<code>let</code>和<code>var</code>三个命令，当想要定义常量的时候可以选择<code>const</code>。当声明一个变量赋值后还会修改的可以选择<code>let</code>或<code>var</code>，当使用于循环计数或者算法，建议优先选择<code>let</code>。</p><hr><h2 id="2-箭头函数"><a href="#2-箭头函数" class="headerlink" title="2.箭头函数"></a><span id="arrow">2.箭头函数</span></h2><p>当我们使用闭包的时候，函数内部的this总是发生改变，不能指向我们所预期的对象。而箭头函数的出现，正是可以让函数里面this指向预期的对象。另外，箭头函数的出现，还可以让我们的代码量大大减少。<br>箭头函数即使用箭头“=&gt;”定义函数，用法如下：<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">let result = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(i=&gt;i*i);</span><br></pre></td></tr></table></figure></p><p>箭头的左边是输入的参数，右边是进行的操作以及返回的值。<br>上面代码等同于es5：<br><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">let rusult = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(<span class="function"><span class="keyword">function</span><span class="params">(i)</span>&#123;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">i</span>*<span class="built_in">i</span>;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><p>从上两段代码中可以看出，箭头函数在一定程度上可以减少代码量，使得我们的代码更加简洁。<br>（1）如果函数不需要参数或者需要多个参数，需使用用圆号。<br><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let result = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">let result2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(<span class="function"><span class="params">(i,item)</span>=&gt;</span><span class="built_in">console</span>.log(i:item));</span><br></pre></td></tr></table></figure></p><p>（2）如果箭头右边执行多行命令，则需使用大括号,并使用return返回。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(<span class="function"><span class="params">i</span>=&gt;</span>&#123;<span class="keyword">return</span> i*i;&#125;)</span><br></pre></td></tr></table></figure></p><p>（3）如果返回的是对象，则需在大括号外层添加中括号。<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">let result = <span class="selector-tag">i</span> =&gt; (&#123;id :<span class="selector-tag">i</span> ,name : <span class="string">"cici"</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>（4）可代替立即执行函数。<br><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">x</span> =&gt; x*2)(<span class="name">3</span>)<span class="comment">;      //6</span></span><br></pre></td></tr></table></figure></p><p>（5）在箭头函数，<code>this</code>指向的是定义时所在的对象，而不是使用时所在的对象。<br>例子：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = data.name;</span><br><span class="line">    <span class="keyword">this</span>.age = data.ag;</span><br><span class="line">    <span class="keyword">this</span>.getInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" "</span> + <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dudu = <span class="keyword">new</span> Person(&#123;</span><br><span class="line">    name : <span class="string">"dudu"</span>,</span><br><span class="line">    age : <span class="number">20</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dudu.getInfo();       <span class="comment">//dudu 20</span></span><br><span class="line">dudu.sayHello();      <span class="comment">//windows</span></span><br></pre></td></tr></table></figure></p><p>在超时调用的代码都是在全局作用于中执行，所以函数中的<code>this</code>的值指向了window对象。而箭头函数可以保持作用域，保证<code>this</code>的指向不会变:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = data.name;</span><br><span class="line">    <span class="keyword">this</span>.age = data.age;</span><br><span class="line">    <span class="keyword">this</span>.getInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" "</span> + <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>),<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dudu = <span class="keyword">new</span> Person(&#123;</span><br><span class="line">    name : <span class="string">"dudu"</span>,</span><br><span class="line">    age : <span class="number">20</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dudu.getInfo();               <span class="comment">//dudu 20</span></span><br><span class="line">dudu.sayHello();             <span class="comment">//Person &#123;name: "dudu", age: 20&#125;</span></span><br></pre></td></tr></table></figure></p><p>在sayHello函数中，使用了箭头函数，当前作用域是在person对象的一个方法中，箭头函数生成的临时函数的作用域也就是person对象的作用域。</p><hr><h2 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3.字符串"></a><span id="string">3.字符串</span></h2><p>在ES6中，添加了许多对于字符串的接口，使得更加的便利地去处理字符串。<br><strong> (1) 模版字符串 </strong><br>以前我们需要拼接字符串跟变量时，需要使用“+”进行拼接。而模板字符串的出现可以让变量嵌入到字符串中，可以让代码变得更加简单。同时，模板字符串还可保留换行符空白符，可以让字符串的定义更加方便。</p><p><strong> a.可以在字符串中是使用变量 </strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"dudu"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`my name is <span class="subst">$&#123;name&#125;</span>,i am <span class="subst">$&#123;age&#125;</span> years old`</span>);     <span class="comment">// "my name is dudu,i am 20 years old"</span></span><br></pre></td></tr></table></figure></p><p>在模版字符串中，使用<code>${}</code>包含变量。也可在变量进行算法运算或执行函数等操作。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`5加10等于<span class="subst">$&#123;a+b&#125;</span>，5乘10等于<span class="subst">$&#123;a*b&#125;</span>`</span>)    <span class="comment">//5加10等于15，5乘10等于50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`5加10等于<span class="subst">$&#123;add(a,b)&#125;</span>`</span>)           <span class="comment">//5加10等于15</span></span><br></pre></td></tr></table></figure></p><p><strong> b.字符串换行符空白符被保留 </strong><br>在ES6之前：<br><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">str</span> = <span class="string">"hi,"</span></span><br><span class="line">          + <span class="string">"i am dudu"</span> </span><br><span class="line">          + <span class="string">"i am 20 years old"</span>;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>);           <span class="comment">//hi,i am dudui am 20 years old</span></span><br></pre></td></tr></table></figure></p><p>ES6：<br><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str2 = `hi,</span><br><span class="line">            i am dudu,</span><br><span class="line">            i am <span class="number">20</span> years old`;</span><br><span class="line">console.log(str2);</span><br><span class="line"><span class="comment">//hi,</span></span><br><span class="line"><span class="comment">//i am dudu,</span></span><br><span class="line"><span class="comment">// i am 20 years old</span></span><br></pre></td></tr></table></figure></p><p>通过上面的示例可以看出，模版字符串的出现给字符串的使用带了很大的便利。</p><p><strong>（2）includes、startsWith、endsWith </strong><br>之前我们是通过<code>indexOf</code>来判断字符串是否包含某个字符串：<br><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">str</span> = <span class="string">"hello world"</span>;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.indexOf(<span class="string">"o"</span>)&gt;-<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>而在ES6中，增加了三个新方法的进行检索。<br><code>includes</code>判断字符串是否包含某字符串，返回布尔值。<br><code>startsWith</code>判断字符串是否以某字符串开头，返回布尔值。<br><code>endsWith</code>判断字符串是否以某字符串结尾，返回布尔值。<br><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">let <span class="built_in">str</span> = <span class="string">"hello world"</span>;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.includes(<span class="string">"wor"</span>));       <span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.startsWith(<span class="string">"he"</span>));       <span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.endsWith(<span class="string">"ld"</span>));       <span class="comment">//true</span></span><br><span class="line">  </span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.includes(<span class="string">"llo"</span>,<span class="number">1</span>));         <span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.includes(<span class="string">"llo"</span>,<span class="number">5</span>));        <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.startsWith(<span class="string">"llo"</span>,<span class="number">2</span>));        <span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.startsWith(<span class="string">"llo"</span>,<span class="number">3</span>));        <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.endsWith(<span class="string">"llo"</span>,<span class="number">5</span>));        <span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.endsWith(<span class="string">"llo"</span>,<span class="number">9</span>));        <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>在上面代码中，加入了第二个参数。<code>includes</code>和<code>startsWith</code>的第二个参数代表搜索的开始位置。而<code>endsWith</code>代表了只搜索字符串的前几位。</p><p><strong> (3) repeat </strong><br><code>repeat</code>方法用来返回重复多次的字符串。<br><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">str</span> = <span class="string">"abc"</span>;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.repeat(<span class="number">2</span>));         <span class="comment">// "abcabc"</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.repeat(<span class="string">"3"</span>));         <span class="comment">// "abcabc"</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.repeat(<span class="string">"2.8"</span>));        <span class="comment">// "abcabc"</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.repeat(<span class="string">"a"</span>));           <span class="comment">// ""   </span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.repeat());              <span class="comment">// ""</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.repeat(<span class="number">0</span>));              <span class="comment">// ""</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.repeat(-<span class="number">1</span>));            <span class="comment">// 报错：  Uncaught RangeError: Invalid count value</span></span><br></pre></td></tr></table></figure></p><p><code>repeat</code>参数为重复字符串的次数，如果参数是字符串，则会先转换成数字，否则输出空字符串；如果是小数，则会被去整；如果参数是0或者不添加参数，则返回空字符串；如果是负数，则会报错。</p><hr><h2 id="4-解构赋值"><a href="#4-解构赋值" class="headerlink" title="4.解构赋值"></a><span id="deconstruct">4.解构赋值</span></h2><p>解构赋值可以从数组或对象中提取出值为赋值给不同的变量。<br><strong> （1）数组的解构赋值 </strong><br>ES6之前：<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var arr</span> = [1,2,3];</span><br><span class="line"><span class="attribute">var a</span> = arr[0];</span><br><span class="line"><span class="attribute">var b</span> = arr[1];</span><br><span class="line"><span class="attribute">var c</span> = arr[2];</span><br></pre></td></tr></table></figure></p><p>ES6:<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">let [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">console.log(a,b,c);     <span class="comment">//1 2 3</span></span><br></pre></td></tr></table></figure></p><p>数组的解构赋值按照数据的变量顺序进行赋值。</p><p><strong> （2）对象的解构赋值 </strong><br>ES6之前：<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var obj</span> = &#123;name : <span class="string">"dudu"</span>,age : 20,city : <span class="string">"shenzhen"</span>&#125;;</span><br><span class="line"><span class="attribute">var name</span> = obj.name;</span><br><span class="line"><span class="attribute">var age</span> = obj.age;</span><br><span class="line"><span class="attribute">var city</span> = obj.city;</span><br></pre></td></tr></table></figure></p><p>ES6:<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">let &#123;<span class="built_in">name</span>,age,city&#125; = &#123;<span class="built_in">name</span> : <span class="string">"dudu"</span>,age : <span class="number">20</span>,city : <span class="string">"shenzhen"</span>&#125;;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">name</span>,age,city);</span><br></pre></td></tr></table></figure></p><p>对象的解构赋值顺序可以打乱，按照变量名进行赋值。</p><p><strong> （3）字符串的解构赋值 </strong><br>ES6之前：<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var str</span> = <span class="string">"hello"</span>;</span><br><span class="line"><span class="attribute">var a</span> = str[0];</span><br><span class="line"><span class="attribute">var b</span> = str[1];</span><br><span class="line"><span class="attribute">var c</span> = str[2];</span><br><span class="line"><span class="attribute">var d</span> = str[3];</span><br><span class="line"><span class="attribute">var e</span> = str[4];</span><br></pre></td></tr></table></figure></p><p>ES6：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c,d,e] = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c,d,e);        <span class="comment">//h e l l o</span></span><br></pre></td></tr></table></figure></p><p><strong> (4)函数参数的解构赋值 </strong><br>函数参数的解构赋值最大的特点是能够为参数设定默认值。<br>ES6之前：<br><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">function foo(<span class="built_in">name</span>,age)&#123;</span><br><span class="line">    <span class="built_in">name</span> = <span class="built_in">name</span> || <span class="string">"dudu"</span>;</span><br><span class="line">    age = age || <span class="number">20</span>;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">name</span>,age);</span><br><span class="line">&#125;</span><br><span class="line">foo();              <span class="comment">//dudu 20</span></span><br><span class="line">foo(<span class="string">"haha"</span>,<span class="number">21</span>)         <span class="comment">//haha 21</span></span><br></pre></td></tr></table></figure></p><p>ES6:<br><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> foo(&#123;name=<span class="string">"dudu"</span>,age=<span class="number">20</span>&#125; = &#123;&#125;)&#123;</span><br><span class="line">    console.log([name,age]);</span><br><span class="line">&#125;</span><br><span class="line">foo();       //[<span class="string">"dudu"</span>, <span class="number">20</span>]</span><br><span class="line">foo(&#123;&#125;)     //[<span class="string">"dudu"</span>, <span class="number">20</span>]</span><br><span class="line">foo(&#123;name : <span class="string">"cici"</span>&#125;) //[<span class="string">"cici"</span>, <span class="number">20</span>]</span><br><span class="line">foo(&#123;age : <span class="number">22</span>&#125;); //[<span class="string">"dudu"</span>, <span class="number">22</span>]</span><br><span class="line">foo(&#123;name : <span class="string">"cici"</span>,age :<span class="number">22</span>&#125;);//[<span class="string">"cici"</span>, <span class="number">22</span>]</span><br></pre></td></tr></table></figure></p><p>注意下面代码参数的写法与上面代码参数的写法不同：<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">function foo(&#123;name,age&#125; = &#123;<span class="string">name :</span> <span class="string">"dudu"</span>,<span class="string">age :</span> <span class="number">20</span>&#125;)&#123;</span><br><span class="line">    console.log([name,age]);</span><br><span class="line">&#125;</span><br><span class="line">foo();   <span class="comment">//["dudu", 20]</span></span><br><span class="line">foo(&#123;&#125;);         <span class="comment">//[undefined, undefined]</span></span><br><span class="line">foo(&#123;<span class="string">name :</span> <span class="string">"cici"</span>&#125;)     <span class="comment">//["cici", undefined]</span></span><br><span class="line">foo(&#123;<span class="string">age :</span> <span class="number">22</span>&#125;);         <span class="comment">//[undefined, 22]</span></span><br><span class="line">foo(&#123;<span class="string">name :</span> <span class="string">"cici"</span>,<span class="string">age :</span><span class="number">22</span>&#125;);        <span class="comment">//["cici", 22]</span></span><br></pre></td></tr></table></figure></p><p>第一个代码块中，是为参数中对象的每一个名赋值，第二个代码块中是直接为对象赋值。</p><hr><h2 id="5-函数参数"><a href="#5-函数参数" class="headerlink" title="5.函数参数"></a><span id="parameter">5.函数参数</span></h2><p>ES6在函数参数上新增加了默认参数、不定参数等。<br><strong> （1）默认参数 </strong><br>ES6之前：<br><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(x,y)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    x = x || 1;</span></span></span><br><span class="line"><span class="function"><span class="comment">    y = y || 2;</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(x,y)</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">foo</span><span class="params">()</span>;</span>  <span class="comment">//1 2</span></span><br></pre></td></tr></table></figure></p><p>ES6：<br><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(x = 1,y = 2)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(x,y)</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">foo</span><span class="params">()</span>;</span>  <span class="comment">//1 2</span></span><br></pre></td></tr></table></figure></p><p><strong> (2) 不定参数 </strong><br>ES6中函数的不定参数通过（…变量名）实现，用来获取函数多余的参数。<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(<span class="rest_arg">...value</span>)</span></span>&#123;</span><br><span class="line">    let sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> val of value)&#123;</span><br><span class="line">        sum += val;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(sum);</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br></pre></td></tr></table></figure></p><p>不定参数与arguments的区别是，不定参数中的变量代表的是一个数组，可以使用数组的所有方法，而arguments是类数组，只能用length属性。</p><hr><h2 id="6-类-class"><a href="#6-类-class" class="headerlink" title="6.类 class"></a><span id="class">6.类 class</span></h2><p>ES6为了更接近传统语言的写法，提出了类的写法，作为对象的模版,通过关键字class来定义类。<br>ES6之前：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age,<span class="keyword">this</span>.sex)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ES6:<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,sex)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age ;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    getInfo()&#123;</span><br><span class="line">       console.log(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age,<span class="keyword">this</span>.sex)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上面的代码中，<code>constructor</code>方法就是构造方法。使用的时候直接用<code>new</code>命令,自动调用<code>constructor</code>方法。如果没有显示定义<code>constructor</code>方法，则会自动添加空的<code>constructor</code>。<br><figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person<span class="number">1</span> = <span class="keyword">new</span> Person(<span class="string">"dudu"</span>,<span class="number">20</span>,<span class="string">"women"</span>);</span><br><span class="line">person<span class="number">1</span>.getInfo();  <span class="comment">//dudu 20 women</span></span><br></pre></td></tr></table></figure></p><p>类通过<code>extends</code>关键字进行继承。<br><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    constructor(name,age,sex,school)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age,school);</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line">    getInfo()&#123;</span><br><span class="line">        <span class="keyword">super</span>.getInfo();</span><br><span class="line">        console.log(<span class="keyword">this</span>.school);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p><code>super</code>关键字是用来继承新建父类的<code>this</code>对象，因为子类没有自己的<code>this</code>对象，新建实例的时候会报错。使用<code>super</code>之后，可继承父类的<code>this</code>对象。<br>ES6提出的类实现继承，比ES5通过原型链实现继承要清晰，可以让我们写出更加简洁的代码。</p><hr><h2 id="7-Symbols"><a href="#7-Symbols" class="headerlink" title="7.Symbols"></a><span id="symbols">7.Symbols</span></h2><p><code>symbols</code>是ES6新增的第七种原始数据类型，表示独一无二的值。简单来说，就是用来做标记的方法。<br>用法：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a)           <span class="comment">//symbol</span></span><br></pre></td></tr></table></figure></p><p>上面代码中，通过<code>typeof</code>得出<code>a</code>是<code>symbol</code>数据类型。<br><code>symbol</code>创造出来的符号是独一无二的，因此设置了相同参数<code>symbol</code>函数的返回值是不想等的。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>() === <span class="built_in">Symbol</span>());                     <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>(<span class="string">"a"</span>) === <span class="built_in">Symbol</span>(<span class="string">"a"</span>))                <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p><code>symbol</code>可以用于对象的属性名，由于每个<code>symbol</code>值都是不相等的，所以就可以用来作为标记，就可以保证不会出现相同的属性。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">obj[a] = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj[a]);        <span class="comment">// hello</span></span><br></pre></td></tr></table></figure></p><p>有时候会需要重新使用同一个<code>symbol</code>值，可以使用 <code>symbol.for</code>方法。这个方法会接受一个字符串作为参数，搜索有没有以该参数作为名称的<code>symbol</code>值，如果有，则返回<code>symbol</code>值，否则就新建并返回一个以该字符串为参数的<code>symbol</code>值。<br><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">console.log(<span class="built_in">Symbol</span>.<span class="keyword">for</span>(<span class="string">"a"</span>) === <span class="built_in">Symbol</span>.<span class="keyword">for</span>(<span class="string">"a"</span>))</span><br></pre></td></tr></table></figure></p><p>上面代码中，返回<code>true</code>，说明上面两个的<code>symbol</code>为同一个值。</p><hr><h2 id="8-for…of循环"><a href="#8-for…of循环" class="headerlink" title="8.for…of循环"></a><span id="for">8.for…of循环</span></h2><p><code>for...of</code>是ES6新增的遍历器。可以遍历数组、类数组对象、字符串、对象等。<br>ES6前：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i])      <span class="comment">// a b c d </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ES6:<br><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> <span class="keyword">val</span> <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    console.log(<span class="keyword">val</span>)        <span class="comment">// a b c d</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>遍历数组可以直接获取数组值。<br><strong> entries()、keys()、values() </strong><br><code>entries()</code>、<code>keys()</code>、<code>values()</code>用来遍历数组。<br><code>entries()</code>是对键值对的遍历。<br><code>keys()</code>是对键名的遍历。<br><code>values()</code>是对键值的遍历。<br><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> <span class="keyword">val</span> <span class="keyword">of</span> arr.keys())&#123;</span><br><span class="line">    console.log(<span class="keyword">val</span>);  <span class="comment">// 0,1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> <span class="keyword">val</span> <span class="keyword">of</span> arr.values())&#123;</span><br><span class="line">    console.log(<span class="keyword">val</span>);      <span class="comment">// a,b,c,d</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [i,<span class="keyword">val</span>] <span class="keyword">of</span> arr.entries())&#123;</span><br><span class="line">    console.log(i,<span class="keyword">val</span>);         <span class="comment">//  0 "a"</span></span><br><span class="line">                                <span class="comment">//  1 "b"</span></span><br><span class="line">                                <span class="comment">//  2 "c"</span></span><br><span class="line">                                <span class="comment">//  3 "d"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="9-Set和Map数据解构"><a href="#9-Set和Map数据解构" class="headerlink" title="9.Set和Map数据解构"></a><span id="setAndMap">9.Set和Map数据解构</span></h2><p><strong> set和WeakSet </strong><br>ES6增添了新的数据结构集<code>set</code>和弱集<code>weakset</code>，类似于数组，但是<code>set</code>和<code>weakset</code>具有元素的唯一性，若添加了已存在的元素，会被自动忽略。<br><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">let <span class="keyword">set</span> = new <span class="comment">Set()</span>;</span><br><span class="line"><span class="keyword">set</span>.add(<span class="string">"hello"</span>).add(<span class="string">"world"</span>).add(<span class="string">"hello"</span>);</span><br><span class="line">console.<span class="built-in">log</span>(<span class="keyword">set</span>.size);          <span class="comment">// 2</span></span><br><span class="line">console.<span class="built-in">log</span>(<span class="keyword">set</span>);           <span class="comment">// Set &#123;"hello", "world"&#125;</span></span><br></pre></td></tr></table></figure></p><p>由于具有元素的唯一性，所以可以利用<code>set</code>来除去数组重复的元素。<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>];</span><br><span class="line">arr = Array.from(new Set(arr));</span><br><span class="line">console.log(arr);       <span class="comment">//[2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></p><p><code>set</code>的属性：<br><code>size</code>：用来获取<code>set</code>实例的元素个数。<br><code>set</code>的方法有四个：<br><code>add</code>：添加实例元素。<br><code>delete</code>：删除某个元素。<br><code>has</code>：判断某个元素是否存在。<br><code>clear</code>：清除所有元素。<br><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">let <span class="keyword">set</span> = new <span class="comment">Set()</span>;</span><br><span class="line"><span class="keyword">set</span>.add(<span class="string">"hello"</span>).add(<span class="string">"world"</span>).add(<span class="string">"hello"</span>);</span><br><span class="line">console.<span class="built-in">log</span>(<span class="keyword">set</span>.size);          <span class="comment">// 2</span></span><br><span class="line">console.<span class="built-in">log</span>(<span class="keyword">set</span>);           <span class="comment">// Set &#123;"hello", "world"&#125;</span></span><br><span class="line"></span><br><span class="line">console.<span class="built-in">log</span>(<span class="keyword">set</span>.has(<span class="string">"world"</span>));          <span class="comment">// ture</span></span><br><span class="line"><span class="keyword">set</span>.delete(<span class="string">"world"</span>);</span><br><span class="line">console.<span class="built-in">log</span>(<span class="keyword">set</span>.has(<span class="string">"world"</span>));          <span class="comment">//false</span></span><br><span class="line"><span class="keyword">set</span>.clear()</span><br><span class="line">console.log(<span class="keyword">set</span>);       <span class="comment">//Set &#123;&#125;</span></span><br></pre></td></tr></table></figure></p><p><code>weakset</code>是弱集，与<code>set</code>相比，它能够检查元素的变量引用情况，如果元素的引用已被全部解除，则该元素就会删除，可以节省空间内存。另外，<code>weakset</code>的成员只能是对象。<br><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">let weakset = <span class="keyword">new</span> WeakSet();</span><br><span class="line">weakset.<span class="built_in">add</span>(<span class="string">"hello"</span>);           <span class="comment">// TypeError: Invalid value used in weak set</span></span><br><span class="line"></span><br><span class="line">let <span class="built_in">str</span> = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"hello"</span>);</span><br><span class="line">weakset.<span class="built_in">add</span>(<span class="built_in">str</span>);</span><br><span class="line">console.<span class="built_in">log</span>(weakset.has(<span class="built_in">str</span>));           <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p><strong> map和weakmap </strong><br><code>map</code>和<code>weakmap</code>则与原本的<code>object</code>相似，都是<code>key/value</code>的键值对结构，但是<code>object</code>的<code>key</code>值必须是字符串或数字，而<code>map</code>可以使用任何对象作为<code>key</code>值。<br><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">map</span> = <span class="literal">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123; name : <span class="string">"dudu"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">set</span>(obj,<span class="string">'hello'</span>);</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">set</span>(<span class="string">'hello'</span>,<span class="string">'world'</span>);</span><br><span class="line">console.<span class="keyword">log</span>(<span class="built_in">map</span>);  <span class="comment">//Map &#123;Object &#123;name: "dudu"&#125; =&gt; "hello", "hello" =&gt; "world"&#125;</span></span><br><span class="line">console.<span class="keyword">log</span>(<span class="built_in">map</span>.size);           <span class="comment">//2</span></span><br><span class="line">console.<span class="keyword">log</span>(<span class="built_in">map</span>.has(obj));       <span class="comment">// true</span></span><br><span class="line">console.<span class="keyword">log</span>(<span class="built_in">map</span>.get(<span class="string">"hello"</span>));  <span class="comment">// world</span></span><br></pre></td></tr></table></figure></p><p><code>set</code>的属性和方法：<br><code>size</code>：用来获取<code>map</code>实例的元素个数。<br><code>set</code>：用来设置<code>key</code>对应的键值。<br><code>get</code>：用来获取<code>key</code>对应的键值。<br><code>delete</code>：删除某个键。<br><code>has</code>：判断某个键是否存在。<br><code>clear</code>：清除所有键。<br><code>weakmap</code>和<code>weakset</code>相似，但是<code>weakmap</code>会检查键和值，只要其中一个的引用全被解除，则该键值对就会被删除。<br><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">map</span> = <span class="literal">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123; name : <span class="string">"dudu"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">set</span>(obj,<span class="string">'hello'</span>);</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">set</span>(<span class="string">'hello'</span>,<span class="string">'world'</span>);</span><br><span class="line">console.<span class="keyword">log</span>(<span class="built_in">map</span>.has(obj));      <span class="comment">//true</span></span><br><span class="line">obj = <span class="built_in">null</span>; </span><br><span class="line">console.<span class="keyword">log</span>(<span class="built_in">map</span>.has(obj));      <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="10-promise"><a href="#10-promise" class="headerlink" title="10.promise"></a><span id="promise">10.promise</span></h2><p>ES6新添的<code>promise</code>是可以用来解决回调函数无限嵌套的工具，也就是可以获取异步操作的消息，进行相应的处理。<br><code>promise</code>的状态变化有两种：从<code>pending</code>未完成到<code>resolved</code>成功和<code>pending</code>未完成到<code>rejected</code>失败，一旦这两个状态任一发生了，就会进行下一步操作。<br>用法：<br>（1）创建一个promise实例，参数为一个函数，向该函数的传入两个参数分别为<code>resolve</code>和<code>reject</code>。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="comment">/*成功*/</span>)&#123;</span><br><span class="line">        resolve(value);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></p><p><code>resolve</code>函数是当<code>promise</code>对象的状态从<code>pending</code>未完成到<code>resolved</code>成功时，进行的异步操作。<br><code>reject</code>函数是当<code>promise</code>对象的状态从<code>pending</code>未完成到<code>rejected</code>失败时，进行的异步操作。<br>（2）当<code>promise</code>实例创建好之后，则用<code>then</code>方法分别指定<code>resolve</code>和<code>reject</code>状态的毁掉函数。<br><figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">promise.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(value)</span>&#123;</span></span><br><span class="line">    <span class="comment">//成功</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span><span class="params">(error)</span>&#123;</span></span><br><span class="line">    <span class="comment">//失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><code>then</code>方法中，参入两个函数作为参数，第一个参数是<code>promise</code>对象的状态变成成功<code>resolve</code>时执行的回调函数。第二个参数是<code>promise</code>对象的状态报错<code>reject</code>时执行的回调函数。<br>也可以通过<code>catch</code>方法进行<code>reject</code>状态的回调函数。<br><figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">promise.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(value)</span>&#123;</span></span><br><span class="line">    <span class="comment">//成功</span></span><br><span class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(error)</span>&#123;</span></span><br><span class="line">    <span class="comment">//失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>当<code>promise</code>对象的状态变成<code>resolve</code>时，则执行<code>then</code>方法，当<code>promise</code>对象的状态变成<code>reject</code>时，则执行<code>catch</code>方法。</p><p>异步加载图片实例：<br><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImageAsync</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line">        image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            resolve(image);</span><br><span class="line">        &#125;;</span><br><span class="line">        image.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'could not load image at '</span> + <span class="built_in">url</span>));</span><br><span class="line">        &#125;;</span><br><span class="line">        image.src = <span class="built_in">url</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadImageAsync(<span class="string">'./images/1.png'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">image</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//success</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//failure</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><hr><h2 id="11-Generators生成器"><a href="#11-Generators生成器" class="headerlink" title="11.Generators生成器"></a><span id="generators">11.Generators生成器</span></h2><p>ES6提供的<code>Generators</code>函数是一种异步编程解决方案，本质上是一个可以暂停计算并且可以随后返回表达式的值的函数。与普通函数相比，<code>Generators</code>有两个不同点：1.定义<code>Generators</code>函数需要在<code>function</code>与函数名之间插入<code>*</code>；2、在函数内部，使用<code>yield</code>语句来切出返回值。<br><code>yield</code>与<code>return</code>相似，但是<code>yield</code>不退出函数，只是在函数运行过程中，通过<code>.next()</code>切出一个值。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloworld</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>斐波那契数列例子：<br>(斐波那契数列：从第三项开始，值为前两项之和，第一二项都为1)<br>(1)构建生成器<br><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">function</span>* Fibo()&#123;</span><br><span class="line">    let [a,<span class="keyword">b] </span>= [<span class="number">1</span>,<span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">    <span class="keyword">yield </span>a<span class="comment">;</span></span><br><span class="line">    <span class="keyword">yield </span><span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   <span class="meta">while</span>(true)&#123;</span><br><span class="line">        [a,<span class="keyword">b] </span>= [<span class="keyword">b,a+b];</span></span><br><span class="line"><span class="keyword"> </span>       <span class="keyword">yield </span><span class="keyword">b;</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(2)启动生成器<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">let fibo</span> = Fibo();</span><br></pre></td></tr></table></figure></p><p>(3)运行生成器<br>输出前十项斐波那契数：<br><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">    arr.<span class="keyword">push</span>(fibo.next().value);</span><br><span class="line">&#125;</span><br><span class="line">console.<span class="built_in">log</span>(arr);   <span class="comment">//[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ECMAScript 6（下面简称ES6）已于2015年6月正式发布，它提供的许多新的语法特性，将会成为Javascript语言新的标准。&lt;/p&gt;
&lt;p&gt;ES6发布至今，许多浏览器的最新版本对ES6大部分特性都实现了,但是没有浏览器对ES6全部特性能够完美的支持,可以通过&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用webpack进行es6开发</title>
    <link href="http://zengzoe.github.io/2016/09/09/%E4%BD%BF%E7%94%A8webpack%E8%BF%9B%E8%A1%8Ces6%E5%BC%80%E5%8F%91/"/>
    <id>http://zengzoe.github.io/2016/09/09/使用webpack进行es6开发/</id>
    <published>2016-09-08T21:18:55.000Z</published>
    <updated>2019-03-09T14:56:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于很多浏览器不兼容es6，在使用es6开发过程中需要使用转换器对es6进行转换成es5，从而能够更好的在浏览器运行。在这里，我将会介绍如何使用webpack进行es6的开发，使用的是webpack的babel-loader转换器。</p><h2 id="第一步-创建目录文件"><a href="#第一步-创建目录文件" class="headerlink" title="第一步 创建目录文件"></a>第一步 创建目录文件</h2><p>创建目录如下：<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">/helloworld</span><br><span class="line">    index.js</span><br><span class="line">    hello.js</span><br><span class="line">index.html</span><br><span class="line">webpack<span class="selector-class">.config</span><span class="selector-class">.js</span></span><br></pre></td></tr></table></figure></p><p>helloworld文件中，index.js是入口文件，hello.js是用es6编辑的js文件，index.html是首页，webpack.config.js是配置文件。</p><h2 id="第二步-安装webpack"><a href="#第二步-安装webpack" class="headerlink" title="第二步 安装webpack"></a>第二步 安装webpack</h2><p>通过<code>npm</code>全局安装<code>webpack</code>：<br><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> webpack -g</span><br></pre></td></tr></table></figure></p><h3 id="第三步-编写配置文件"><a href="#第三步-编写配置文件" class="headerlink" title="第三步 编写配置文件"></a>第三步 编写配置文件</h3><p>打开<code>webpack.config.js</code>，编辑如下：<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">var path = require(<span class="string">'path'</span>);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    <span class="string">entry :</span> <span class="string">'./helloworld/index.js'</span>,            <span class="comment">//入口文件</span></span><br><span class="line">    <span class="string">output :</span> &#123;                                  <span class="comment">//输出文件</span></span><br><span class="line">        <span class="string">path :</span> __dirname,</span><br><span class="line">        <span class="string">filename :</span> <span class="string">'bundle.js'</span>                 <span class="comment">//webpack运行完之后将生成一个bundle.js文件，用于将执行文件中的代码导入index.html</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">module :</span> &#123;</span><br><span class="line">        <span class="string">loaders :</span> [                             <span class="comment">//加载器</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">test :</span> path.join(__dirname,<span class="string">'es6'</span>),</span><br><span class="line">                <span class="string">loader :</span> <span class="string">'babel-loader'</span>,        <span class="comment">//使用babel-loader加载器</span></span><br><span class="line">                <span class="string">query :</span> &#123;</span><br><span class="line">                    <span class="string">presets :</span> [<span class="string">'es2015'</span>]       <span class="comment">//使用es2015转码规则</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="第四步-安装loaders"><a href="#第四步-安装loaders" class="headerlink" title="第四步 安装loaders"></a>第四步 安装loaders</h2><p>安装<code>babel-loader</code>:<br><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span><span class="keyword">babel-loader </span>--save-dev</span><br></pre></td></tr></table></figure></p><p>安装转码规则：<br><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span><span class="keyword">babel-preset-es2015 </span>--save-dev</span><br></pre></td></tr></table></figure></p><h2 id="第五步-编写代码"><a href="#第五步-编写代码" class="headerlink" title="第五步 编写代码"></a>第五步 编写代码</h2><ul><li>helloworld/hello.js: </li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    say()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`我是<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>岁了`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello;</span><br></pre></td></tr></table></figure><ul><li>helloworld/index.js</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Person <span class="keyword">from</span> <span class="string">'./hello.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'Zoe'</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">document</span>.write(p.say());</span><br></pre></td></tr></table></figure><ul><li>index.html</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第六步-运行"><a href="#第六步-运行" class="headerlink" title="第六步 运行"></a>第六步 运行</h2><p>在命令行中，直接输入<code>webpack</code>就能运行：<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">webpack</span></span><br></pre></td></tr></table></figure></p><p>在大型项目中，可以添加一个颜色进度跳便于查看参数：<br><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">webpack</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">progress</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">colors</span></span><br></pre></td></tr></table></figure></p><p>也可以使用watch来监视文件的变化：<br><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">webpack <span class="comment">--watch</span></span><br></pre></td></tr></table></figure></p><p>所以最后可以使用如下命令运行：<br><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">webpack</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">progress</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">colors</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">watch</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于很多浏览器不兼容es6，在使用es6开发过程中需要使用转换器对es6进行转换成es5，从而能够更好的在浏览器运行。在这里，我将会介绍如何使用webpack进行es6的开发，使用的是webpack的babel-loader转换器。&lt;/p&gt;
&lt;h2 id=&quot;第一步-创建目录
      
    
    </summary>
    
    
  </entry>
  
</feed>
