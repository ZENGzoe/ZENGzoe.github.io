<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曾洁仪博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zengzoe.github.io/"/>
  <updated>2018-06-04T12:47:36.000Z</updated>
  <id>http://zengzoe.github.io/</id>
  
  <author>
    <name>Zeng Zoe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>charles使用总结</title>
    <link href="http://zengzoe.github.io/2018/06/04/charles%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://zengzoe.github.io/2018/06/04/charles使用总结/</id>
    <published>2018-06-04T10:59:54.000Z</published>
    <updated>2018-06-04T12:47:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Charles是一款可以代理调试的工具，适用于Mac，Windows系统设备可以使用Fiddler。使用Charles工具可以更方便地调试请求：</p><p>1.可获取手机上的请求<br>2.可模拟慢速<br>3.可修改网络请求内容<br>4.可修改服务器返回的内容</p><p>接下来，我将从以上几个方面去总结Charles的使用。</p><h4 id="设置系统代理"><a href="#设置系统代理" class="headerlink" title="设置系统代理"></a>设置系统代理</h4><p>将Charles设置为系统代理才可以监控请求，所以使用Charles的第一步是设置为系统代理，步骤如下：</p><p>1.选择左上角“Proxy -&gt; macOS Proxy”，开启macOS Proxy。<br><img src="/2018/06/04/charles使用总结/charles01.png" alt=""></p><p>2.在“系统偏好设置 -&gt; 高级 -&gt; 代理”，选择如下：<br><img src="/2018/06/04/charles使用总结/charles02.png" alt=""><br>注意：自动代理配置选项不能选中哦，否则检测不到请求</p><p>操作完之后就可以在Charles主页看到请求。<br><img src="/2018/06/04/charles使用总结/charles03.png" alt=""></p><h4 id="获取手机上的请求"><a href="#获取手机上的请求" class="headerlink" title="获取手机上的请求"></a>获取手机上的请求</h4><p>有时想要手机设备上进行一些操作，需要调试查看服务器返回的数据，Charles在此提供了大大的便利。</p><p><strong> 1.打开Charles的代理功能 </strong> </p><p>(1) 选择左上角“Proxy -&gt; Proxy settings”<br><img src="/2018/06/04/charles使用总结/charles04.png" alt=""><br>(2) 勾选“Enable transparent HTTP proxing”,Port端口填8888<br><img src="/2018/06/04/charles使用总结/charles05.png" alt=""></p><p><strong> 2.抓https请求，需安装Charles根证书 </strong></p><p>(1)选择左上角“help -&gt; SSL Proxing -&gt; Install Charles Root Certificate”<br><img src="/2018/06/04/charles使用总结/charles06.png" alt=""><br>(2) 点击添加<br><img src="/2018/06/04/charles使用总结/charles07.png" alt=""><br>(3) 在钥匙串访问中找到Charles Proxy CA，选中双击<br><img src="/2018/06/04/charles使用总结/charles08.png" alt=""><br>(4) 点击信任，展示内容，选择始终信任<br><img src="/2018/06/04/charles使用总结/charles09.png" alt=""></p><p>安装完成。</p><p><strong> 3.手机设置代理 </strong></p><p>(1) 首先需要找到电脑的IP地址，在“系统偏好设置 -&gt; 网络”可以查看得到IP地址。<br><img src="/2018/06/04/charles使用总结/charles10.png" alt=""></p><p>(2) 在手机“设置 -&gt; Wi-Fi”找到跟电脑相同域的wifi，点击该wifi进入wifi详情页，点击Configure Proxy<br><img src="/2018/06/04/charles使用总结/charles12.png" alt=""></p><p>(3) 在Configure Proxy中，在Server填入电脑的IP地址，Port为Charles设置的代理端口。<br><img src="/2018/06/04/charles使用总结/charles13.png" alt=""></p><p>(4) 此时Charles弹出手机连接信号，选择Alloy。<br><img src="/2018/06/04/charles使用总结/charles11.png" alt=""></p><p>(5) 在手机浏览器上访问地址：<a href="http://chls.pro/ssl" target="_blank" rel="noopener">http://chls.pro/ssl</a>，打开安装证书页面，点击Allow。<br><img src="/2018/06/04/charles使用总结/charles14.png" alt=""></p><p>(6) 安装证书。<br><img src="/2018/06/04/charles使用总结/charles15.png" alt=""></p><p>(7) 完成设置<br><img src="/2018/06/04/charles使用总结/charles16.png" alt=""></p><p>手机浏览页面，即可在Charles看到请求。</p><h4 id="模拟慢速环境"><a href="#模拟慢速环境" class="headerlink" title="模拟慢速环境"></a>模拟慢速环境</h4><p>有时项目需要在慢速情况下进行对应的操作，那么可以通过Charles的Throttle设置模拟慢速环境。</p><p>1.在左上角选择“Proxy -&gt; Throttle settings”<br><img src="/2018/06/04/charles使用总结/charles17.png" alt=""></p><p>2.选中Enable Throttling，在下面的配置中填入需要的参数，选择ok<br><img src="/2018/06/04/charles使用总结/charles18.png" alt=""></p><p>3.手机重新刷新页面，会发现网络速度降低了，完成配置。</p><h4 id="修改网络请求内容"><a href="#修改网络请求内容" class="headerlink" title="修改网络请求内容"></a>修改网络请求内容</h4><p>有时为了测试服务器接口的不同参数情况下的请求，那么可以通过Charles修改接口的请求并重新请求。</p><p>在需要修改的请求上右击，选择“Compose”，即可进入该请求的编辑页。可以修改该请求的请求方式、请求地址、协议等，修改完成后点击“Execute”执行，返回结果。<br><img src="/2018/06/04/charles使用总结/charles19.png" alt=""></p><h4 id="修改服务器返回的内容"><a href="#修改服务器返回的内容" class="headerlink" title="修改服务器返回的内容"></a>修改服务器返回的内容</h4><p>在项目中，较常使用Map Local来修改服务器返回的内容，Map Local可以将网络请求重定向到本地文件，主要用途如下：</p><p>1.直接修改某个接口返回的内容，比如可以模拟接口异常。<br>2.将线上html、css、js等文件重定向到本地进行调试。</p><p>直接选择接口或文件右击，选择Map Local，打开Edit Mapping页，在Local path选中需要模拟接口异常的json文件或需要重定向的静态文件，点击ok即可，重新刷新页面。<br><img src="/2018/06/04/charles使用总结/charles20.png" alt=""></p><h4 id="模拟网络延迟"><a href="#模拟网络延迟" class="headerlink" title="模拟网络延迟"></a>模拟网络延迟</h4><p>项目中，可能有这样的需求，比如网络延迟10s要弹出网络延迟的toast，那么Charles可以使用Breakpoints模拟网络延迟的环境来测试页面。</p><p>Breakpoints类似断点，可以在某网络请求时，截断该请求，可修改请求的内容，在截断过程中，请求还在进行，当请求超过10s时，达到前端设置的10s延迟时间，导致页面请求超时，即可模拟网络延迟。</p><p><img src="/2018/06/04/charles使用总结/charles21.png" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Charles的功能强大，在我们开发和测试阶段提供很大的帮忙，我会继续挖掘哒！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Charles是一款可以代理调试的工具，适用于Mac，Windows系统设备可以使用Fiddler。使用Charles工具可以更方便地调试请求：&lt;/p&gt;
&lt;p&gt;1.可获取手机上的请求&lt;br&gt;2.可模拟慢速&lt;br&gt;3.可修改网络请求内容&lt;br&gt;4.可修改服务器返回的内容&lt;/p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo博客如何提速</title>
    <link href="http://zengzoe.github.io/2018/06/04/hexo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E6%8F%90%E9%80%9F/"/>
    <id>http://zengzoe.github.io/2018/06/04/hexo博客如何提速/</id>
    <published>2018-06-03T22:22:47.000Z</published>
    <updated>2018-06-04T12:47:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直发现我的hexo搭建的博客打开速度慢，加载时间长，终于看不下去，排查原因优化优化速度。</p><h2 id="原因及解决方法"><a href="#原因及解决方法" class="headerlink" title="原因及解决方法"></a>原因及解决方法</h2><p>我的博客主页内容较少，且请求的图片数量只有一张。在排查多个请求过程中发现，我使用的<code>apollo</code>主题请求了一个其他域的样式文件<code>https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,600</code>，多次打开该文件都需要较长的加载时间。</p><p>尝试将改样式文件存储为本地，在<code>/themes/apollo/laylout/partial/head.jade</code>文件中，修改导入文件如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">link(rel="stylesheet", href="css/googleapisFonts.css" type='text/css')</span><br></pre></td></tr></table></figure><p>修改完毕，发布！</p><p>访问速度终于杠杠滴！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一直发现我的hexo搭建的博客打开速度慢，加载时间长，终于看不下去，排查原因优化优化速度。&lt;/p&gt;
&lt;h2 id=&quot;原因及解决方法&quot;&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sprite雪碧图生成方法</title>
    <link href="http://zengzoe.github.io/2017/05/25/sprite%E9%9B%AA%E7%A2%A7%E5%9B%BE%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/"/>
    <id>http://zengzoe.github.io/2017/05/25/sprite雪碧图生成方法/</id>
    <published>2017-05-25T15:07:48.000Z</published>
    <updated>2018-06-04T12:47:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在项目中，有时候需要用到很多小的图片，那么页面访问过程中就需要一次一次地向服务器很多的这样小的图片，严重影响到页面的性能。我们可以将多个小的图片合成一张图片，这样的话页面会只请求一次，从而优化我们的性能。这样的图片叫做CSS Sprites,也叫雪碧图。<br><img src="/2017/05/25/sprite雪碧图生成方法/01.png" alt=""></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>要合成雪碧图的方法很多，从总体上可按照生成的环境分为项目外生成和项目中生成，项目外生成即用其他工具合并生成，比如线上工具<a href="http://spritegen.website-performance.org/" target="_blank" rel="noopener">CSS Sprite Generator</a>、Animation CC等，除了生成雪碧图外，还可以导出雪碧图中包含各个子图的尺寸和偏移量的文本。具体实现方法可自行搜索，在这篇文章中，主要是介绍项目中生成的方法，即在项目开发过程中，可配置相关代码自动生成雪碧图。与项目外生成方法相比，这个比较大的优点是不用手动添加各个子图的尺寸和背景位置，能够减少较大的时间成本，有利于项目的快速开发。</p><h3 id="方法一：Postcss"><a href="#方法一：Postcss" class="headerlink" title="方法一：Postcss"></a>方法一：Postcss</h3><p><code>PostCss</code>是一种可以用Javascript代码来处理CSS的工具，可对CSS进行模块化转换，将CSS代码解析成抽象语法树结构，再由插件来进行处理。因此在项目中，可使用其<code>postcss-sprites</code>插件将图片生成雪碧图图。同时，使用Webpack模块加载器来处理CSS和图片。具体实现方法如下：</p><p><strong> 1.安装加载器与插件 </strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -<span class="keyword">save</span>-dev <span class="keyword">style</span>-loader css-loader postcss-loader <span class="keyword">file</span>-loader postcss-sprites <span class="keyword">extract</span>-<span class="built_in">text</span>-webpack-<span class="keyword">plugin</span> html-webpack-<span class="keyword">plugin</span></span><br></pre></td></tr></table></figure><p>使用postcss，需要用到样式加载器、css加载器、postcss加载器三种加载器来处理css。<br><code>postcss-sprite</code> ：用来合并雪碧图。<br><code>file-loader</code> ：用来处理图片。<br><code>extract-text-webpack-plugin</code> ： 用来从出口文件中提取文本到一个单独的文件中。<br><code>html-webpack-plugin</code> ： 创建HTML文件</p><p><strong> 2.配置webpack.config.js </strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool : <span class="string">"inline-source-map"</span>,          </span><br><span class="line">    entry : <span class="string">"./src/js/index.js"</span>,</span><br><span class="line">    output : &#123;</span><br><span class="line">        path : __dirname + <span class="string">"/dist/js"</span>,</span><br><span class="line">        filename : <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devServer : &#123;</span><br><span class="line">        compress : <span class="literal">false</span>,</span><br><span class="line">        contentBase : __dirname,</span><br><span class="line">        publicPath : <span class="string">'/'</span>,</span><br><span class="line">        port : <span class="number">8081</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span> : &#123;</span><br><span class="line">        loaders : [</span><br><span class="line">            &#123; </span><br><span class="line">                test : <span class="regexp">/\.js|.jsx?$/</span>, </span><br><span class="line">                loader : <span class="string">'babel-loader'</span>,</span><br><span class="line">                exclude : <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        rules : [</span><br><span class="line">            &#123;</span><br><span class="line">                test : <span class="regexp">/\.css$/</span>,</span><br><span class="line">                exclude : <span class="regexp">/dist/</span>,</span><br><span class="line">                use : ExtractTextPlugin.extract(&#123;</span><br><span class="line">                    fallback : <span class="string">'style-loader'</span>,</span><br><span class="line">                    use : [<span class="string">'css-loader?module&amp;localIdentName=[local]'</span>,<span class="string">'postcss-loader'</span>]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test : <span class="regexp">/\.(jpg|png)$/</span>,</span><br><span class="line">                use : <span class="string">'file-loader?name=../img/[name].[ext]'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins : [</span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"../css/global.css"</span>),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            title : <span class="string">"postcss生成雪碧图"</span>,</span><br><span class="line">            filename : <span class="string">"../index.html"</span>,</span><br><span class="line">            template : <span class="string">'src/index.html'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入口文件为<code>src/js/index.js</code>，<code>ExtractTextPlugin</code>将出口文件<code>bundle.js</code>中的css分离出成为一个独立<code>global.css</code>文件。</p><p><strong> 3.配置postcss </strong><br>在根目录下，创建文件<code>postcss.config.js</code>，配置如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> opts = &#123;</span><br><span class="line">    stylesheetPath : <span class="string">'./src/img'</span>,</span><br><span class="line">    spritePath : <span class="string">'./dist/img/'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins : [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'postcss-sprites'</span>)(opts)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>stylesheetPath</code>为源图片路径，<code>spritePath</code>为生成雪碧图地址。</p><p><strong> 4.运行 </strong></p><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">webpack-dev-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>到这里就可以生成想要的雪碧图：</p><p><strong> Before: </strong></p><p>图片：</p><p><img src="/2017/05/25/sprite雪碧图生成方法/02.png" alt=""></p><p>CSS：</p><p><img src="/2017/05/25/sprite雪碧图生成方法/03.png" alt=""></p><p><strong> After: </strong></p><p>图片：</p><p><img src="/2017/05/25/sprite雪碧图生成方法/04.png" alt=""></p><p>CSS：</p><p><img src="/2017/05/25/sprite雪碧图生成方法/05.png" alt=""></p><p><strong> 5.添加分组 </strong></p><p>如果图片太多，可将图片合成多个雪碧图，这时需要根据分组修改图片名称。<br>比如，当我需要将以上的11张图片合成两张雪碧图<code>sprite1.png</code>和<code>sprite2.png</code>，则需要将图片名称改为包含sprite1或sprite2的新名称，包含sprite1或sprite2名称的图片合并到<code>sprite1.png</code>或<code>sprite2.png</code>。如下：<br><img src="/2017/05/25/sprite雪碧图生成方法/06.png" alt=""></p><p>并修改<code>postcss.config.js</code>如下：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> opts = &#123;</span><br><span class="line">    stylesheetPath : <span class="string">'./src/img'</span>,</span><br><span class="line">    spritePath : <span class="string">'./dist/img/'</span>,</span><br><span class="line">    groupBy : [</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (image.url.indexOf(<span class="string">'sprite1'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'sprite1'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (image.url.indexOf(<span class="string">'sprite2'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'sprite2'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins : [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'postcss-sprites'</span>)(opts)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>groupBy</code>来配置我们的分组。</p><p>最终图片合成如下：<br><img src="/2017/05/25/sprite雪碧图生成方法/07.png" alt=""></p><p><strong> 6.修改图片单位 </strong></p><p>在项目中，我们可能会使用REM布局，需要将图片的单位改为<code>rem</code>。直接修改<code>postcss.config.js</code>如下：<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">let psdSize = <span class="number">750</span>;      <span class="comment">//设计稿宽度</span></span><br><span class="line">let RemRatio = <span class="number">16</span>;      <span class="comment">//REM 换算比值</span></span><br><span class="line">let postcss = require(<span class="string">'postcss'</span>);</span><br><span class="line">let opts = &#123;</span><br><span class="line">    <span class="string">stylesheetPath :</span> <span class="string">'./src/img'</span>,</span><br><span class="line">    <span class="string">spritePath :</span> <span class="string">'./dist/img/'</span>,</span><br><span class="line">    <span class="string">hooks :</span> &#123;</span><br><span class="line">        <span class="string">onUpdateRule :</span> function(rule,token,image)&#123;</span><br><span class="line">            let backgroundSizeX = image.spriteWidth<span class="regexp">/(psdSize/</span>RemRatio/<span class="number">1</span>),</span><br><span class="line">                backgroundSizeY = image.spriteHeight<span class="regexp">/(psdSize/</span>RemRatio/<span class="number">1</span>),</span><br><span class="line">                backgroundPositionX = image.coords.x<span class="regexp">/(psdSize/</span>RemRatio/<span class="number">1</span>),</span><br><span class="line">                backgroundPositionY = image.coords.y<span class="regexp">/(psdSize/</span>RemRatio/<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            backgroundSizeX = isNaN(backgroundSizeX) ? 0 : backgroundSizeX.toFixed(<span class="number">3</span>);</span><br><span class="line">            backgroundSizeY = isNaN(backgroundSizeY) ? 0 : backgroundSizeY.toFixed(<span class="number">3</span>);</span><br><span class="line">            backgroundPositionX = isNaN(backgroundPositionX) ? 0 : backgroundPositionX.toFixed(<span class="number">3</span>);</span><br><span class="line">            backgroundPositionY = isNaN(backgroundPositionY) ? 0 : backgroundPositionY.toFixed(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            let backgroundImage = postcss.decl(&#123;</span><br><span class="line">                <span class="string">prop :</span> <span class="string">'background-image'</span>,</span><br><span class="line">                <span class="string">value :</span> <span class="string">'url('</span> + image.spriteUrl + <span class="string">')'</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            let backgroundSize = postcss.decl(&#123;</span><br><span class="line">                <span class="string">prop :</span> <span class="string">'background-size'</span>,</span><br><span class="line">                <span class="string">value :</span> backgroundSizeX + <span class="string">'rem '</span> + backgroundSizeY + <span class="string">'rem'</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            let backgroundPosition = postcss.decl(&#123;</span><br><span class="line">                <span class="string">prop :</span> <span class="string">'background-position'</span>,</span><br><span class="line">                <span class="string">value :</span> backgroundPositionX + <span class="string">'rem '</span> + backgroundPositionY + <span class="string">'rem'</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            rule.insertAfter(token,backgroundImage);</span><br><span class="line">            rule.insertAfter(backgroundImage,backgroundPosition);</span><br><span class="line">            rule.insertAfter(backgroundPosition,backgroundSize);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    <span class="string">plugins :</span> [</span><br><span class="line">        require(<span class="string">'postcss-sprites'</span>)(opts)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<code>hooks.onUpdateRule</code>来重写输出的图片样式。换算公式可根据自己的需求修改。<br>最终CSS结果如下：<br><img src="/2017/05/25/sprite雪碧图生成方法/08.png" alt=""></p><h3 id="方法二：Composs-Sass"><a href="#方法二：Composs-Sass" class="headerlink" title="方法二：Composs+Sass"></a>方法二：Composs+Sass</h3><p>Sass是一种CSS预处理器，通过搭配Compass,可以更好的实现合并生成雪碧图。</p><p><strong> 1.声明雪碧图 </strong></p><p>Compass中有多种包装好的模块，使用其中的雪碧地图(Sprite maps)来实现雪碧图的合成。声明雪碧图如下：</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$sprite1 : sprite-<span class="keyword">map</span>(<span class="string">"sprite1/*.png"</span>,$spacing : <span class="number">10</span>px , $layout : <span class="string">'vertical'</span>);</span><br><span class="line">$sprite2 : sprite-<span class="keyword">map</span>(<span class="string">"sprite2/*.png"</span>,$spacing : <span class="number">10</span>px , $layout : <span class="string">'vertical'</span>);</span><br></pre></td></tr></table></figure><p>声明两个雪碧图分别为<code>$sprite1</code>和<code>$sprite2</code>,<code>sprite-map</code>第一个参数为<code>config.rb</code>配置文件中<code>images_dir</code>下雪碧图集的地址，$spacing为图片间隔，默认为0。<code>$layout</code>为图片的排列方式。有四种排列方式：<code>vertical</code>、<code>horizontal</code>、<code>diagonal</code>、<code>smart</code>。主要分别如下：<br><img src="/2017/05/25/sprite雪碧图生成方法/09.jpg" alt=""></p><p><strong> 2.完成style.scss </strong></p><p>根据需求，配置样式如下：</p><p><code>style.scss</code>:<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sprite1</span> : sprite-map(<span class="string">"sprite1/*.png"</span>,<span class="variable">$spacing</span> : <span class="number">10px</span> , <span class="variable">$layout</span> : <span class="string">'vertical'</span>);</span><br><span class="line"><span class="variable">$sprite2</span> : sprite-map(<span class="string">"sprite2/*.png"</span>,<span class="variable">$spacing</span> : <span class="number">10px</span> , <span class="variable">$layout</span> : <span class="string">'vertical'</span>);</span><br><span class="line"></span><br><span class="line">@function pxToRem (<span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="variable">$value</span> : <span class="variable">$value</span> / (<span class="variable">$value</span> * <span class="number">0</span> + <span class="number">1</span>);  <span class="comment">//去单位px</span></span><br><span class="line">    @return <span class="variable">$value</span>/(<span class="number">750px</span>/<span class="number">16px</span>/<span class="number">1rem</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">mixin</span> spritesMixin(<span class="variable">$name</span>,<span class="variable">$sprites</span>)&#123;</span><br><span class="line">    <span class="variable">$iconPath</span>:sprite-file(<span class="variable">$sprites</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="variable">$iconWidth</span>:image-width(<span class="variable">$iconPath</span>);</span><br><span class="line">    <span class="variable">$iconHeight</span>:image-height(<span class="variable">$iconPath</span>);</span><br><span class="line">    <span class="variable">$iconPosX</span> : nth(sprite-position(<span class="variable">$sprites</span>,<span class="variable">$name</span>),<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$iconPosY</span> : nth(sprite-position(<span class="variable">$sprites</span>,<span class="variable">$name</span>),<span class="number">2</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">    <span class="attribute">background-image</span>:sprite-url(<span class="variable">$sprites</span>);</span><br><span class="line">    <span class="attribute">width</span>:pxToRem(<span class="variable">$iconWidth</span>);</span><br><span class="line">    <span class="attribute">height</span>: pxToRem(<span class="variable">$iconHeight</span>);</span><br><span class="line">    <span class="attribute">background</span>:pxToRem(<span class="variable">$iconPosX</span>) pxToRem(<span class="variable">$iconPosY</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.a</span>&#123;</span><br><span class="line">    @<span class="keyword">include</span> spritesMixin(a,<span class="variable">$sprite1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b</span>&#123;</span><br><span class="line">    @<span class="keyword">include</span> spritesMixin(b,<span class="variable">$sprite1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>pxToRem</code> : 将px转化为rem。<br><code>spritesMixin</code> : 声明需要引用雪碧图的代码块。<br><code>sprite-file</code> : 用于在雪碧图上找到需要的图片。<br><code>image-width</code>、<code>image-height</code> : 获取该图片的长度和宽度。<br><code>sprite-position</code> : 获取该图片在雪碧图上的位置。<br><code>nth</code> : 取值。</p><p>在每个需要雪碧图的位置上直接引入<code>@include spritesMixin($name,$sprites)</code>即可，<code>$name</code>为该图片的名称，<code>$sprites</code>为声明的雪碧图。</p><p>转化后的<code>style.css</code>:<br><img src="/2017/05/25/sprite雪碧图生成方法/10.png" alt=""></p><p>如果想要更简单的自动生成，只需要改为简单的几行：<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"compass/utilities/sprites"</span>;       <span class="comment">//导入sprites模块</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"sprite1/*.png"</span>;                   <span class="comment">//导入sprite1的图片</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"sprite2/*.png"</span>;                   <span class="comment">//导入sprite2的图片</span></span><br><span class="line">@<span class="keyword">include</span> all-sprite1-sprites;              <span class="comment">//自动根据文件名生成类</span></span><br><span class="line">@<span class="keyword">include</span> all-sprite2-sprites;              <span class="comment">//自动根据文件名生成类</span></span><br></pre></td></tr></table></figure></p><p>这样转化后的样式中就能根据文件名来生成类，所以我们在使用之前能够根据文件名来定义我们的类并且加入到我们的结构中，这样不用在每一个需要的地方重新加入相应的样式。</p><h3 id="方法三：Grunt"><a href="#方法三：Grunt" class="headerlink" title="方法三：Grunt"></a>方法三：Grunt</h3><p>如果使用了工具Grunt,那么就可以使用<code>grunt-css-sprite</code>插件来实现雪碧图的生成。</p><p><strong> 1.安装插件 </strong></p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">npm install grunt-css-sprite --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p><strong> 2.配置Gruntfile.js </strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">    grunt.initConfig(&#123;</span><br><span class="line">        pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动雪碧图</span></span><br><span class="line">        sprite: &#123;</span><br><span class="line">            options: &#123;</span><br><span class="line">                <span class="comment">// sprite背景图源文件夹</span></span><br><span class="line">                imagepath: <span class="string">'src/img/'</span>,</span><br><span class="line">                <span class="comment">// 映射CSS中背景路径</span></span><br><span class="line">                imagepath_map: <span class="literal">null</span>,</span><br><span class="line">                <span class="comment">// 雪碧图输出目录</span></span><br><span class="line">                spritedest: <span class="string">'build/img/'</span>,</span><br><span class="line">                <span class="comment">// 替换后的背景路径</span></span><br><span class="line">                spritepath: <span class="string">'../img/'</span>,</span><br><span class="line">                <span class="comment">// 图片间间距</span></span><br><span class="line">                padding: <span class="number">2</span>,</span><br><span class="line">                <span class="comment">// 是否使用 image-set 作为2x图片实现</span></span><br><span class="line">                useimageset: <span class="literal">false</span>,</span><br><span class="line">                <span class="comment">// 是否以时间戳为文件名生成新的雪碧图文件</span></span><br><span class="line">                newsprite: <span class="literal">false</span>,</span><br><span class="line">                <span class="comment">// 给雪碧图追加时间戳</span></span><br><span class="line">                spritestamp: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 在CSS文件末尾追加时间戳</span></span><br><span class="line">                cssstamp: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 默认使用二叉树最优排列算法</span></span><br><span class="line">                algorithm: <span class="string">'binary-tree'</span>,</span><br><span class="line">                <span class="comment">// 默认使用`pngsmith`图像处理引擎</span></span><br><span class="line">                engine: <span class="string">'pngsmith'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            autoSprite: &#123;</span><br><span class="line">                files: [&#123;</span><br><span class="line">                    <span class="comment">// 启用动态扩展</span></span><br><span class="line">                    expand: <span class="literal">true</span>,</span><br><span class="line">                    <span class="comment">// css文件源的文件夹</span></span><br><span class="line">                    cwd: <span class="string">'src/css/'</span>,</span><br><span class="line">                    <span class="comment">// 匹配规则</span></span><br><span class="line">                    src: <span class="string">'*.css'</span>,</span><br><span class="line">                    <span class="comment">// 导出css和sprite的路径地址</span></span><br><span class="line">                    dest: <span class="string">'build/css/'</span>,</span><br><span class="line">                    <span class="comment">// 导出的css名</span></span><br><span class="line">                    ext: <span class="string">'.sprite.css'</span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载指定插件任务</span></span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-css-sprite'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认执行的任务</span></span><br><span class="line">    grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'sprite'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>grunt-css-sprite</code>插件会根据样式文件中引用的图片来进行雪碧图的合并。</p><p><code>algorithm</code>配置图片的排列方式，有五个选项，分别为<code>top-down</code>(从上至下)、<code>left-right</code>(从左至右)、<code>diagonal</code>(从左上至右下)、<code>alt-diagonal</code>(从左下至右上)、<code>binary-tree</code>(二叉树排列)，可根据自己的爱好进行配置。</p><p>但由于其配置参数的限制，不能满足较特殊的项目需求，比如不能对图片分组合并等。</p><h3 id="方法四：Gulp"><a href="#方法四：Gulp" class="headerlink" title="方法四：Gulp"></a>方法四：Gulp</h3><p>如果使用了工具Gulp，可使用插件<code>grunt.spritesmith</code>来合成雪碧图。</p><p><strong> 1.安装插件 </strong></p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">npm install gulp.spritesmith --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p><strong> 2.配置Gulpfile.js </strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    spritesmith = <span class="built_in">require</span>(<span class="string">'gulp.spritesmith'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"src/img/*.png"</span>)</span><br><span class="line">        .pipe(spritesmith(&#123;</span><br><span class="line">            imgName : <span class="string">'img/sprite.png'</span>,</span><br><span class="line">            cssName : <span class="string">'css/style.css'</span>,</span><br><span class="line">            padding : <span class="number">5</span> ,</span><br><span class="line">            algorithm : <span class="string">'binary-tree'</span>,</span><br><span class="line">            cssTemplate : <span class="string">'src/css/spriteTemplate.css'</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'dist/'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>Gulpfile.js</code>的配置相对简单，<code>grunt.spritesmith</code>插件则会根据<code>src/img/*.png</code>目录中配置的图片进行合并雪碧图。<br><code>algorithm</code>配置图片的排列方式，同<code>grunt-css-sprite</code>中<code>algorithm</code>的配置。<br><code>cssTemplate</code>为生成雪碧图样式的模版文件，可以是字符串也可以是函数。如果是字符串，则为模版的地址，则在样式文件中的配置请看3.配置css模版。如果是函数，则可以配置为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">cssTemplate: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr=[];</span><br><span class="line">    data.sprites.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span> <span class="params">(sprite)</span> </span>&#123;</span><br><span class="line">        arr.push(<span class="string">".icon-"</span>+sprite.name+</span><br><span class="line">        <span class="string">"&#123;"</span> +</span><br><span class="line">        <span class="string">"background-image: url('"</span>+sprite.escaped_image+<span class="string">"');"</span>+</span><br><span class="line">        <span class="string">"background-position: "</span>+sprite.px.offset_x+<span class="string">"px "</span>+sprite.px.offset_y+<span class="string">"px;"</span>+</span><br><span class="line">        <span class="string">"width:"</span>+sprite.px.width+<span class="string">";"</span>+</span><br><span class="line">        <span class="string">"height:"</span>+sprite.px.height+<span class="string">";"</span>+</span><br><span class="line">        <span class="string">"&#125;\n"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong> 3.配置css模版 </strong></p><p>在<code>style.css</code>中，</p><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&#123;&#123;#sprites&#125;&#125;   //模版开始</span><br><span class="line">.icon-&#123;&#123;name&#125;&#125;&#123;</span><br><span class="line">    background-image: url(<span class="string">"&#123;&#123;escaped_image&#125;&#125;"</span>);                </span><br><span class="line">    background-position: &#123;&#123;px.offset_x&#125;&#125; &#123;&#123;px.offset_y&#125;&#125;;</span><br><span class="line">    width: &#123;&#123;px.width&#125;&#125;;</span><br><span class="line">    height: &#123;&#123;px.height&#125;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#123;&#123;/sprites&#125;&#125;   //模版开始</span><br></pre></td></tr></table></figure><p><code>name</code>：图片名。<br><code>escaped_image</code>：图片的地址。<br><code>px</code>：图片在雪碧图的数据对象，offset_x为x偏移单位，offset_y为y偏移单位，width为宽度，height为高度。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面主要是总结了四种方法，各有各的优势，可根据自己的需求进行配置。磨刀不误砍柴工，配置好了，才能更好地节省时间完成项目开发。</p><p>DEMO源码地址：<img src="https://github.com/ZENGzoe/Stylesheet" alt="demo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在项目中，有时候需要用到很多小的图片，那么页面访问过程中就需要一次一次地向服务器很多的这样小的图片，严重影响到页面的性能。我们可以将多个小的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于react+nodejs+mongodb+webpack+redux实现图片上传应用</title>
    <link href="http://zengzoe.github.io/2017/04/18/%E5%9F%BA%E4%BA%8Ereact-nodejs-mongodb-webpack-redux%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8/"/>
    <id>http://zengzoe.github.io/2017/04/18/基于react-nodejs-mongodb-webpack-redux实现图片上传应用/</id>
    <published>2017-04-18T12:40:49.000Z</published>
    <updated>2018-06-04T12:47:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了能够更好地掌握react、nodejs、webpack等知识，开始这个基于react+nodejs+mongodb+webpack+redux实现前后端图片上传的应用。这个项目从开始到实现，包括了登陆、注册、图片展示等页面，功能较简单，有登录、注册、上传图片、复制图片链接、删除图片等功能。在这过程中，遇到了很多个bug，但每一个bug都可以让我对知识的学习了解更加巩固。</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>react+webpack+mongodb+webpack+redux+ES6+fetch</p><h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//下载项目</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/ggstudy-ddup/react-pic-uploader.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> react-pic-uploader/demo</span></span><br><span class="line">//安装依赖</span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line">//启动项目</span><br><span class="line"><span class="meta">$</span><span class="bash"> webpack &amp;&amp; node server.js</span></span><br></pre></td></tr></table></figure><h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><hr><h4 id="npm初始化"><a href="#npm初始化" class="headerlink" title="npm初始化"></a>npm初始化</h4><p>首先创建名为uploader的目录，切换到此目录，然后初始化文件。<br><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> uploader &amp;&amp; <span class="built_in">cd</span> uploader</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure></p><h4 id="安装必要的开发工具包"><a href="#安装必要的开发工具包" class="headerlink" title="安装必要的开发工具包"></a>安装必要的开发工具包</h4><ul><li>webpack : 模块打包工具</li><li>redux : javascript状态容器</li><li>formidable : 用于上传文件的node.js模块包</li><li>express-session : 用于将数据存储在服务器上的node.js中间件</li><li>body-parser : node.js解析body的中间键</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> webpack redux formidable express-<span class="keyword">session</span> <span class="keyword">body</span>-parser <span class="comment">--save-dev</span></span><br></pre></td></tr></table></figure><h4 id="安装生产环境依赖包"><a href="#安装生产环境依赖包" class="headerlink" title="安装生产环境依赖包"></a>安装生产环境依赖包</h4><ul><li>react : 主要框架</li><li>react-dom : React的DOM操作类</li><li>react-router : React的路由库</li><li>express : 主要的node.js Web应用框架</li><li>cookie-parser : express中使用cookie的API</li><li>csurf : node.js csrf防御中间件</li><li>mongoose : mongoose数据库</li><li>path : node.js用于处理文件路径的模块</li><li>fs : node.js用于提供本地文件读写能力的模块</li></ul><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">npm install react react-dom react-router <span class="built_in">express</span> cookie-parser csurf mongoose --<span class="built_in">save</span></span><br></pre></td></tr></table></figure><h4 id="搭建node-js服务器"><a href="#搭建node-js服务器" class="headerlink" title="搭建node.js服务器"></a>搭建node.js服务器</h4><p>这个项目中使用<a href="http://expressjs.com/zh-cn/" target="_blank" rel="noopener">express</a>框架搭建。搭建express基本目录结构：<br><img src="/2017/04/18/基于react-nodejs-mongodb-webpack-redux实现图片上传应用/01.png" alt=""><br><strong> public是项目的静态文件，</strong>放置js css img等文件<br><strong> routes是项目的路由信息文件，</strong>控制地址路由<br>在uploader的目录中，创建名为server.js的文件，添加如下代码：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="keyword">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="keyword">require</span>(<span class="string">"cookie-parser"</span>);</span><br><span class="line"><span class="keyword">var</span> csrf = <span class="keyword">require</span>(<span class="string">'csurf'</span>);</span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="keyword">require</span>(<span class="string">"mongoose"</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="keyword">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="keyword">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> routes = <span class="keyword">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line"><span class="keyword">var</span> checkedRoutes = <span class="keyword">require</span>(<span class="string">'./routes/checkedIndex'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//mongoose数据库</span></span><br><span class="line"><span class="keyword">global</span>.dbHandle = <span class="keyword">require</span>(<span class="string">'./database/dbHandle'</span>);</span><br><span class="line"><span class="keyword">global</span>.db = mongoose.connect(<span class="string">"mongodb://localhost:27017/uploadimgdb"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.<span class="keyword">use</span>(cookieParser());</span><br><span class="line">app.<span class="keyword">use</span>(express.<span class="keyword">static</span>(__dirname));</span><br><span class="line">app.<span class="keyword">use</span>(bodyParser.json());</span><br><span class="line">app.<span class="keyword">use</span>(bodyParser.urlencoded(&#123;extended : <span class="keyword">true</span>&#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="keyword">use</span>(session(&#123;</span><br><span class="line">    secret : <span class="string">'hello'</span>,</span><br><span class="line">    resave : <span class="keyword">false</span>,</span><br><span class="line">    saveUninitialized : <span class="keyword">true</span>,</span><br><span class="line">    cookie : &#123;</span><br><span class="line">        path : <span class="string">"/"</span>,</span><br><span class="line">        maxAge : <span class="number">600000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">"/"</span>,routes);</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">'/upload'</span>, routes);</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">'/register'</span>, routes);</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">'/login'</span>, routes);</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">'/logout'</span>, routes);</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">'/getImages'</span>, routes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// csrf防御</span></span><br><span class="line">app.<span class="keyword">use</span>(csrf());</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">"/"</span>,checkedRoutes);</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">'/isLogin'</span>, checkedRoutes);</span><br><span class="line">app.<span class="keyword">use</span>(<span class="string">'/deleteImages'</span>, checkedRoutes);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//error handle</span></span><br><span class="line">app.<span class="keyword">use</span>((err,req,res,next) =&gt; &#123;</span><br><span class="line">    res.status(err.status || <span class="number">500</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器</span></span><br><span class="line"><span class="keyword">var</span> PORT = process.env.PORT || <span class="number">9990</span>;</span><br><span class="line">app.listen(PORT,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    console.log(<span class="string">'Production Express server running at localhost:'</span> + PORT)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在server.js源码中的判断是否登录与删除图片需要csrf防御，所以将这两个路由放入到另外的路由页面中。<br>另外项目中包含注册登录上传图片，所以需要数据库来存储这些数据，这个项目使用mongodb进行数据的存储。详细mongodb可自行查阅～</p><h4 id="安装mongoDB，配置项目数据库"><a href="#安装mongoDB，配置项目数据库" class="headerlink" title="安装mongoDB，配置项目数据库"></a>安装mongoDB，配置项目数据库</h4><p>1.下载mongodb<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl http:<span class="regexp">//</span>downloads.mongodb.org<span class="regexp">/osx/m</span>ongodb-osx-x86_64-<span class="number">2.4</span>.<span class="number">6</span>.tgz &gt; mongodb.tgz</span><br></pre></td></tr></table></figure></p><p>2.解压mongodb<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">mongodb-osx-x86_64-2</span><span class="selector-class">.4</span><span class="selector-class">.6</span></span><br></pre></td></tr></table></figure></p><p>3.将解压的安装文件移动到想要存放的位置,我的是从Download移动到Applications的mongodb中<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mv -n ~<span class="regexp">/Downloads/m</span>ongodb-osx-x86_64-<span class="number">2.4</span>.<span class="number">6</span> ~<span class="regexp">/Applications/m</span>ongodb<span class="regexp">/</span></span><br></pre></td></tr></table></figure></p><p>4.在mongodb根目录下创建data/db目录，用于存放mongodb数据，并给改目录设置权限<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">sudo</span> mkdir -p <span class="class"><span class="keyword">data</span>/db</span></span><br><span class="line"><span class="title">sudo</span> chown -<span class="type">R</span> zengjieyi /<span class="class"><span class="keyword">data</span></span></span><br></pre></td></tr></table></figure></p><p>5.启动mongodb<br><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> bin</span><br><span class="line"><span class="string">./mongod</span></span><br></pre></td></tr></table></figure></p><p><img src="/2017/04/18/基于react-nodejs-mongodb-webpack-redux实现图片上传应用/02.png" alt=""><br>6.进入mongodb shell,可直接编辑数据库<br> 打开另外一个终端<br> <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> Applications/mongodb/bin</span><br><span class="line"><span class="string">./mongo</span></span><br></pre></td></tr></table></figure></p><p><img src="/2017/04/18/基于react-nodejs-mongodb-webpack-redux实现图片上传应用/03.png" alt=""><br>7.在uploader的项目中，创建database文件路径，建立models.js存放数据model，建立dbHandle.js，存放对数据的操作。<br><strong> models.js </strong><br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主要存储用户姓名、密码、上传的图片</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    <span class="string">users :</span>&#123;</span><br><span class="line">        <span class="string">name :</span> &#123; <span class="string">type :</span> String , <span class="string">required :</span><span class="literal">true</span>&#125;,</span><br><span class="line">        <span class="string">password :</span> &#123; <span class="string">type :</span> String , <span class="string">required :</span> <span class="literal">true</span>&#125;,</span><br><span class="line">        <span class="string">imageUpload :</span> [&#123; <span class="string">imgUrl :</span> String , <span class="string">name :</span> String &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong> dbHandle.js </strong><br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于获取数据的操作</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</span><br><span class="line"><span class="keyword">var</span> models = <span class="built_in">require</span>(<span class="string">'./models.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> m <span class="keyword">in</span> models)&#123;</span><br><span class="line">    mongoose.model(m,<span class="keyword">new</span> Schema(models[m]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    getModel : <span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">type</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _getModel(<span class="keyword">type</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _getModel = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="keyword">type</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mongoose.model(<span class="keyword">type</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>8.项目绑定数据库已在server.js添加<br><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mongoose数据库</span></span><br><span class="line">    <span class="built_in">global</span>.dbHandle = <span class="keyword">require</span>(<span class="string">'./database/dbHandle'</span>);</span><br><span class="line">    <span class="built_in">global</span>.db = mongoose.connect(<span class="string">"mongodb://localhost:27017/uploadimgdb"</span>);</span><br></pre></td></tr></table></figure></p><h4 id="建立项目路由"><a href="#建立项目路由" class="headerlink" title="建立项目路由"></a>建立项目路由</h4><p>这个项目根据需要csrf防御与否分为两个路由文件，index.js主要是登录、注册、退出登录、上传图片、获取图片、主页，checkIndex.js主要是判断是否登录、删除图片、主页。<br><strong> index.js </strong><br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> formidable = <span class="built_in">require</span>(<span class="string">"formidable"</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> csrf = <span class="built_in">require</span>(<span class="string">'csurf'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line">router.post(<span class="string">"/register"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> User = global.dbHandle.getModel(<span class="string">"users"</span>);</span><br><span class="line">    <span class="keyword">var</span> uname = req.body.uname,</span><br><span class="line">        upwd = req.body.upwd,</span><br><span class="line">        result = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    User.findOne(&#123;name : uname &#125;,<span class="function">(<span class="params">err , doc</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.rend(<span class="number">500</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(doc)&#123;</span><br><span class="line">            res.send(<span class="number">501</span>);  <span class="comment">//用户名已经存在</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            User.create(&#123;</span><br><span class="line">                name : uname,</span><br><span class="line">                password : upwd</span><br><span class="line">            &#125;,<span class="function">(<span class="params">err , doc </span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(err)&#123;    </span><br><span class="line">                    res.send(<span class="number">500</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> user = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(doc));</span><br><span class="line">                    req.session.user = user.name;</span><br><span class="line">                    res.send(<span class="number">200</span>);  <span class="comment">//注册成功</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//登陆</span></span><br><span class="line">router.post(<span class="string">"/login"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> User = global.dbHandle.getModel(<span class="string">'users'</span>),</span><br><span class="line">        uname = req.body.uname,</span><br><span class="line">        sess = req.session;</span><br><span class="line"></span><br><span class="line">    User.findOne(&#123;</span><br><span class="line">        name : uname</span><br><span class="line">    &#125;, <span class="function">(<span class="params">err,doc</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;    </span><br><span class="line">            res.sendStatus(<span class="number">500</span>);      <span class="comment">//登陆失败</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!doc)&#123;</span><br><span class="line">            res.sendStatus(<span class="number">404</span>);      <span class="comment">//用户名不存在</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(req.body.upwd != doc.password)&#123;</span><br><span class="line">                res.sendStatus(<span class="number">403</span>);      <span class="comment">//密码错误</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> user = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(doc));</span><br><span class="line">                sess.user = user.name;</span><br><span class="line">                res.sendStatus(<span class="number">200</span>);        <span class="comment">//登陆成功</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//退出登陆</span></span><br><span class="line">router.post(<span class="string">"/logout"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    req.session.user = <span class="literal">null</span>;</span><br><span class="line">    req.session.imgUrl = <span class="literal">null</span>;</span><br><span class="line">    res.send(<span class="string">"200"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//上传图片</span></span><br><span class="line">router.post(<span class="string">"/upload"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm(),</span><br><span class="line">        targetDir = path.join(__dirname,<span class="string">"../public/uploadImages"</span>),</span><br><span class="line">        User = global.dbHandle.getModel(<span class="string">'users'</span>),</span><br><span class="line">        filesArr = [],</span><br><span class="line">        extName = <span class="string">''</span>,</span><br><span class="line">        times = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),</span><br><span class="line">        imgArr = req.session.imgArr == <span class="literal">undefined</span> ? [] : req.session.imgArr;</span><br><span class="line"></span><br><span class="line">    form.encoding = <span class="string">'utf-8'</span>;        <span class="comment">//设置编码</span></span><br><span class="line">    form.uploadDir = targetDir;     <span class="comment">//设置上传目录</span></span><br><span class="line">    form.keepExtensions = <span class="literal">true</span>;       <span class="comment">//保留后缀</span></span><br><span class="line">    form.maxFieldsSize = <span class="number">2</span>*<span class="number">1024</span>*<span class="number">1024</span>;       <span class="comment">//设置图片大小</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//检验存储上传的文件是否存在</span></span><br><span class="line">    fs.access(targetDir,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            fs.mkdirSync(targetDir);</span><br><span class="line">        &#125;</span><br><span class="line">        _fileParse();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_fileParse</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        form.on(<span class="string">"file"</span>,<span class="function">(<span class="params">filed,file</span>) =&gt;</span> &#123;</span><br><span class="line">            filesArr.push(file);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        form.parse(req, <span class="function">(<span class="params">err, fields, files</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                res.locals.error = err;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> obj of filesArr)&#123;</span><br><span class="line">                <span class="keyword">var</span> filePath = obj.path,</span><br><span class="line">                    fileOleName = obj.name.substring(<span class="number">0</span>,obj.name.lastIndexOf(<span class="string">'.'</span>)),</span><br><span class="line">                    fileExt = filePath.substring(filePath.lastIndexOf(<span class="string">'.'</span>)),</span><br><span class="line">                    curTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"></span><br><span class="line">                times = times == curTime ? (curTime+<span class="number">1</span>) : curTime;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> fileName = times + fileExt,</span><br><span class="line">                    targetFile = path.join(targetDir,fileName);</span><br><span class="line"></span><br><span class="line">                fs.renameSync(filePath, targetFile);</span><br><span class="line">                imgArr.push(&#123;imgUrl:<span class="string">`/public/uploadImages/<span class="subst">$&#123;fileName&#125;</span>`</span>,name:fileOleName &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            User.update(&#123;</span><br><span class="line">                name : req.session.user</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                imageUpload : imgArr</span><br><span class="line">            &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                    res.send(<span class="number">500</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            req.session.imgArr = imgArr;</span><br><span class="line">            res.sendStatus(<span class="number">200</span>);</span><br><span class="line">            <span class="comment">// res.redirect("/");</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取图片</span></span><br><span class="line">router.get(<span class="string">"/getImages"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> User = global.dbHandle.getModel(<span class="string">"users"</span>);</span><br><span class="line">    <span class="keyword">var</span> imgArr = req.session.imgArr == <span class="literal">undefined</span> ? [] : req.session.imgArr;</span><br><span class="line"></span><br><span class="line">    User.findOne(&#123;</span><br><span class="line">        name : req.session.user</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err,doc</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.send(<span class="number">404</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(doc)&#123;</span><br><span class="line">            doc = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(doc));</span><br><span class="line">            <span class="keyword">if</span>(doc.imageUpload)&#123;</span><br><span class="line">                imgArr = doc.imageUpload;</span><br><span class="line">                req.session.imgArr = imgArr;</span><br><span class="line">                <span class="built_in">console</span>.log(imgArr);</span><br><span class="line">                res.json(imgArr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.json(imgArr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">"/"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sess = req.session;</span><br><span class="line">    res.send(<span class="number">200</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p><p><strong> checkedIndex.js </strong><br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> csrf = <span class="built_in">require</span>(<span class="string">'csurf'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否登陆</span></span><br><span class="line">router.get(<span class="string">"/isLogin"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sess = req.session,</span><br><span class="line">        token = sess.token;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sess.user)&#123;</span><br><span class="line">        token = token == <span class="literal">undefined</span> ? req.csrfToken() : token;</span><br><span class="line">        sess.token = token;</span><br><span class="line"></span><br><span class="line">        res.send(<span class="built_in">JSON</span>.stringify(&#123;code : <span class="number">200</span> , user : sess.user , token : token&#125;));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.send(<span class="built_in">JSON</span>.stringify(&#123;code : <span class="number">403</span>&#125;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除图片</span></span><br><span class="line">router.post(<span class="string">"/deleteImages"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> User = global.dbHandle.getModel(<span class="string">"users"</span>),</span><br><span class="line">        num = req.body.num,</span><br><span class="line">        imgArr = req.session.imgArr,</span><br><span class="line">        imgUrl = imgArr[num].imgUrl,</span><br><span class="line">        filePath = imgUrl.substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本地文件删除</span></span><br><span class="line">    fs.unlink(filePath,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    imgArr.splice(num,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    User.update(&#123;</span><br><span class="line">        name : req.session.user</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        imageUpload : imgArr</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.send(<span class="number">500</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            req.session.imgArr = imgArr;</span><br><span class="line">            res.send(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">"/"</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sess = req.session;</span><br><span class="line">    res.send(<span class="number">200</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p><p>到这里node.js搭建服务器与相关后端接口已经差不多了，接下来开始搭建页面吧～～</p><h2 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h2><p>由于项目中使用到react和es6，需要webpack编译，在uploader目录下添加webpack.config.js文件<br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;    </span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'./build/index.js'</span>,</span><br><span class="line">        publicPath : <span class="string">'/'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader: <span class="string">'babel-loader?presets[]=es2015&amp;presets[]=react'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>src/index.js为项目的编写react内容的主文件，此时需要在uploader目录下创建src文件夹并创建index.js。<br>项目中使用到webpack-dev-server的inline模式，需要修改package.json添加启动代码，将以下代码插入package.json中：<br><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"if-env NODE_ENV=production &amp;&amp; npm run start:prod || npm run start:dev"</span>,</span><br><span class="line">    <span class="string">"start:dev"</span>: <span class="string">"webpack-dev-server --inline --content-base . --histroy-api-fallback"</span>,</span><br><span class="line">    <span class="string">"start:prod"</span>: <span class="string">"webpack &amp;&amp; node server.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="string">"keywords"</span>: [</span><br><span class="line">    <span class="string">"react"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>启动项目文件可以通过<code>npm run start:prod</code>命令。</p><h2 id="搭建页面"><a href="#搭建页面" class="headerlink" title="搭建页面"></a>搭建页面</h2><p>1.建立主页面<br>在uploader的目录下，创建index.html<br><strong> index.html </strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基于React实现的前后端分离图片上传系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"./public/css/index.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./build/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>index.css为样式文件，此时需要在public创建css文件目录并在css中创建index.css样式文件。<br>index.js为webpack编译src/index.js后的文件。</p><p>2.引入redux，控制项目的数据状态<br>在redux中，Store用来存储数据，类似一个大的容器。State对象包含所有的数据，可以在某个点获取当时的数据。Action可以发出通知，让State发生变化。<br>在src文件夹内创建action文件目录和reducers文件目录分别存放对应的index.js。<br><strong> action/index.js </strong><br><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REQUEST_ISLOGIN = <span class="string">"REQUEST_ISLOGIN"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RECEIVE_LOGINED = <span class="string">"RECEIVE_LOGINED"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RECEIVE_NOT_LOGIN = <span class="string">"RECEIVE_NOT_LOGIN"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REQUEST_IMAGES = <span class="string">"REQUEST_IMAGES"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> RECEIVE_IMAGES = <span class="string">"RECEIVE_IMAGES"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> UPLOAD_IMAGES = <span class="string">"UPLOAD_IMAGES"</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> EXIT_LOGIN = <span class="string">"EXIT_LOGIN"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//退出登录操作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> exitLogin = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="keyword">type</span> : EXIT_LOGIN</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//判断是否登录前操作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> requestIslogin = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="keyword">type</span> : REQUEST_ISLOGIN</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//判断是否登录后，返回已登陆的操作，返回用户名跟唯一的token</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> receiveLogined = <span class="function"><span class="params">json</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="keyword">type</span> : RECEIVE_LOGINED,</span><br><span class="line">    user : json.user,</span><br><span class="line">    token : json.token</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//判断是否登录后，返回为登录的操作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> receiveNotLogined = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="keyword">type</span> : RECEIVE_NOT_LOGIN</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//请求图片前操作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> requestImages = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="keyword">type</span> : REQUEST_IMAGES</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//请求图片后的操作，返回获取的图片</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> receiveImages = <span class="function"><span class="params">json</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="keyword">type</span> : RECEIVE_IMAGES,</span><br><span class="line">    images : json</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否登录</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchIslogin = <span class="function"><span class="params">()</span> =&gt;</span> dispatch =&gt; &#123;</span><br><span class="line">    dispatch(requestIslogin())</span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">"/isLogin"</span>,&#123;</span><br><span class="line">                method : <span class="string">"get"</span>,</span><br><span class="line">                credentials: <span class="string">'include'</span>,</span><br><span class="line">                header : &#123;</span><br><span class="line">                    <span class="string">"Content-Type"</span> : <span class="string">"application/json"</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">        .then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(json.code == <span class="number">200</span>)&#123;</span><br><span class="line">                dispatch(receiveLogined(json))</span><br><span class="line">                dispatch(requestImages())</span><br><span class="line">                <span class="keyword">return</span> fetch(<span class="string">"/getImages"</span>,&#123;</span><br><span class="line">                    method : <span class="string">"get"</span>,</span><br><span class="line">                    credentials: <span class="string">'include'</span>,</span><br><span class="line">                    header : &#123;</span><br><span class="line">                        <span class="string">"Content-Type"</span> : <span class="string">"application/json"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">                .then(<span class="function"><span class="params">json</span> =&gt;</span> dispatch(receiveImages(json)))</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dispatch(receiveNotLogined())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请求图片</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchImages = <span class="function"><span class="params">()</span> =&gt;</span> dispatch =&gt; &#123;</span><br><span class="line">    dispatch(requestImages())</span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">"/getImages"</span>,&#123;</span><br><span class="line">        method : <span class="string">"get"</span>,</span><br><span class="line">        credentials: <span class="string">'include'</span>,</span><br><span class="line">        header : &#123;</span><br><span class="line">            <span class="string">"Content-Type"</span> : <span class="string">"application/json"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">    .then(<span class="function"><span class="params">json</span> =&gt;</span> dispatch(receiveImages(json)))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据是否登录来能否请求图片</span></span><br><span class="line"><span class="keyword">const</span> shouldFetchImages = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isLogin = state.user;</span><br><span class="line">    <span class="keyword">if</span>(isLogin.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据是否登录来能否请求图片</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchImagesIfNeeded = <span class="function"><span class="params">()</span> =&gt;</span> (dispatch,getState) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(getState());</span><br><span class="line">    <span class="keyword">if</span>(shouldFetchImages(getState()))&#123;</span><br><span class="line">        <span class="keyword">return</span> dispatch(fetchImages())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上传图片</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> uploadImages = <span class="function"><span class="params">images</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="keyword">type</span> : UPLOAD_IMAGES,</span><br><span class="line">    images</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在这个项目中，需要从Store读取四个数据，分别是用户名user、csrf防御的token、用户的图片images，所以需要在reducers中合并输出这三个数据。<br><strong> reducers/index.js </strong><br><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">"redux"</span></span><br><span class="line">import &#123; REQUEST_ISLOGIN , RECEIVE_LOGINED , RECEIVE_NOT_LOGIN , REQUEST_IMAGES , RECEIVE_IMAGES , UPLOAD_IMAGES , EXIT_LOGIN&#125; <span class="keyword">from</span> <span class="string">"../actions"</span></span><br><span class="line"></span><br><span class="line">const<span class="built_in"> user </span>= (state = <span class="string">""</span>,action) =&gt; &#123;</span><br><span class="line">    switch(action.type)&#123;</span><br><span class="line">        case RECEIVE_LOGINED :</span><br><span class="line">            return action.user</span><br><span class="line">        case REQUEST_ISLOGIN :</span><br><span class="line">        case RECEIVE_NOT_LOGIN :</span><br><span class="line">        case EXIT_LOGIN : </span><br><span class="line">            return <span class="string">""</span>;</span><br><span class="line">       <span class="built_in"> default </span>:</span><br><span class="line">            return state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const token = (<span class="attribute">state</span>=<span class="string">""</span>,action) =&gt; &#123;</span><br><span class="line">    switch(action.type)&#123;</span><br><span class="line">        case RECEIVE_LOGINED : </span><br><span class="line">            return action.token</span><br><span class="line">       <span class="built_in"> default </span>:</span><br><span class="line">            return state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const images = (state = [] , action) =&gt; &#123;</span><br><span class="line">    switch(action.type)&#123;</span><br><span class="line">        case RECEIVE_IMAGES :</span><br><span class="line">            return [<span class="built_in">..</span>.state,<span class="built_in">..</span>.action.images]</span><br><span class="line">        case UPLOAD_IMAGES : </span><br><span class="line">        console.log(<span class="string">"length:"</span>,action.images);</span><br><span class="line">            return [<span class="built_in">..</span>.state,<span class="built_in">..</span>.action.images]</span><br><span class="line">        case REQUEST_IMAGES :</span><br><span class="line">       <span class="built_in"> default </span>:</span><br><span class="line">            return state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const rootReducer = combineReducers(&#123;</span><br><span class="line">    user,</span><br><span class="line">    images,</span><br><span class="line">    token</span><br><span class="line">&#125;)</span><br><span class="line"><span class="builtin-name">export</span><span class="built_in"> default </span>rootReducer</span><br></pre></td></tr></table></figure></p><p>3.react组件化<br>项目中，页面分为注册、登录、主页三个页面，主页的组件分为头部组件、上传图片组件、图片列表组件。架构图如下：<br><img src="/2017/04/18/基于react-nodejs-mongodb-webpack-redux实现图片上传应用/04.png" alt=""><br>因此，添加以上文件与文件夹，uploader文件目录如下：<br><img src="/2017/04/18/基于react-nodejs-mongodb-webpack-redux实现图片上传应用/05.png" alt=""><br>页面代码如下：<br><strong> src/index.js </strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'redux-logger'</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./container/App'</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducers'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middleware = [ thunk ];</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">  middleware.push(createLogger());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line">  applyMiddleware(...middleware)</span><br><span class="line">)</span><br><span class="line">render(</span><br><span class="line">    (</span><br><span class="line">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">            &lt;App /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    ),</span></span><br><span class="line"><span class="regexp">    document.getElementById('app')</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure></p><p>在上面代码中，将store存入Provider，方便子组件获取数据。<br><strong> Container/App.js </strong><br><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router, Route, hashHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../page/Home'</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'../page/Login'</span>;</span><br><span class="line"><span class="keyword">import</span> Register <span class="keyword">from</span> <span class="string">'../page/Register'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>   (</span><br><span class="line">            &lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">                &lt;Route path=<span class="string">'/'</span> component=&#123;Home&#125; /&gt;            </span><br><span class="line">                &lt;Route path=<span class="string">'/login'</span> component=&#123;Login&#125;/&gt;</span><br><span class="line">                &lt;Route path=<span class="string">'/register'</span> component=&#123;Register&#125;/&gt;</span><br><span class="line">            &lt;/Router&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>上面代码中，使用到Router设置三个页面的路由。<br><strong> Page/Register.js </strong><br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React from <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; from <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// components</span></span><br><span class="line"><span class="keyword">import</span> Login from <span class="string">'./Login'</span></span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">    getInitialState() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            username : <span class="string">""</span>,</span><br><span class="line">            password : <span class="string">""</span>,</span><br><span class="line">            rePassword : <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleChange(e) &#123;</span><br><span class="line">        <span class="keyword">var</span> newState = &#123;&#125;;</span><br><span class="line">        newState[e.target.name] = e.target.value;</span><br><span class="line">        <span class="keyword">this</span>.setState(newState);</span><br><span class="line">    &#125;,</span><br><span class="line">    contextTypes : &#123;</span><br><span class="line">        router : React.PropTypes.<span class="keyword">object</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick(e)&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state.username == <span class="literal">null</span> || <span class="keyword">this</span>.state.username == <span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.username.focus();</span><br><span class="line">            <span class="keyword">this</span>.showErr(<span class="string">"用户名不能为空"</span>,<span class="keyword">this</span>.refs.username);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.state.password == <span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.password.focus();</span><br><span class="line">            <span class="keyword">this</span>.showErr(<span class="string">"密码不能为空"</span>,<span class="keyword">this</span>.refs.password);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.state.rePassword == <span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.rePassword.focus();</span><br><span class="line">            <span class="keyword">this</span>.showErr(<span class="string">"确认密码不能为空"</span>,<span class="keyword">this</span>.refs.rePassword);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.state.password != <span class="keyword">this</span>.state.rePassword)&#123;</span><br><span class="line">            <span class="keyword">this</span>.showErr(<span class="string">"密码与确认密码不匹配"</span>,<span class="keyword">this</span>.refs.rePassword);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">data</span> = &#123;</span><br><span class="line">                <span class="string">"uname"</span> : <span class="keyword">this</span>.state.username,</span><br><span class="line">                <span class="string">"upwd"</span> :<span class="keyword">this</span>.state.password</span><br><span class="line">            &#125;;</span><br><span class="line">            fetch(<span class="string">'/register'</span>,&#123;</span><br><span class="line">                method : <span class="string">"post"</span>,</span><br><span class="line">                credentials: <span class="string">'include'</span>,</span><br><span class="line">                headers : &#123;</span><br><span class="line">                    <span class="string">'Content-Type'</span> : <span class="string">'application/json'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                body : JSON.stringify(<span class="keyword">data</span>)</span><br><span class="line">            &#125;).then((res) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(res.ok)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.refs.err.innerHTML = <span class="string">"注册成功"</span>;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        <span class="keyword">this</span>.context.router.push(<span class="string">"/"</span>)</span><br><span class="line">                    &#125;,<span class="number">1000</span>)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(res.status == <span class="number">501</span>)&#123;</span><br><span class="line">                        <span class="keyword">this</span>.showErr(<span class="string">"用户名已经存在"</span>,<span class="keyword">this</span>.refs.username);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,(err) =&gt; &#123;</span><br><span class="line">                <span class="keyword">this</span>.refs.err(<span class="string">"注册失败"</span>);</span><br><span class="line">                <span class="keyword">this</span>.context.router.push(<span class="string">"/register"</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    showErr(errStr,box)&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">        that.refs.err.innerHTML = errStr;</span><br><span class="line">        box.onchange = function()&#123;</span><br><span class="line">            that.refs.err.innerHTML = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"box"</span>&gt;</span><br><span class="line">                &lt;form action=<span class="string">"/register"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">                    &lt;h2&gt;注册页&lt;/h2&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li&gt;&lt;input name=<span class="string">"username"</span> ref=<span class="string">"username"</span> value=&#123;<span class="keyword">this</span>.state.uasername&#125; placeholder=<span class="string">"请输入用户名"</span> type=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125;/&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;input name=<span class="string">"password"</span> ref=<span class="string">"password"</span> value=&#123;<span class="keyword">this</span>.state.password&#125; placeholder=<span class="string">"请输入密码"</span> type=<span class="string">"password"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;input name=<span class="string">"rePassword"</span> ref=<span class="string">"rePassword"</span> value=&#123;<span class="keyword">this</span>.state.rePassword&#125; placeholder=<span class="string">"请再次输入密码"</span> type=<span class="string">"password"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;input name=<span class="string">"login"</span> value=<span class="string">"注册"</span> ref=<span class="string">"login"</span> type=<span class="string">"submit"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125; className=<span class="string">"box_btn"</span> /&gt; &lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;p className=<span class="string">"err"</span> ref=<span class="string">"err"</span>&gt;&lt;/p&gt;&lt;/li&gt;</span><br><span class="line">                    &lt;/ul&gt;                 </span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">                &lt;ul className=<span class="string">"go"</span>&gt;</span><br><span class="line">                    &lt;li className=<span class="string">"other"</span>&gt;&lt;Link to=<span class="string">"/"</span> &gt;主页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                    &lt;li className=<span class="string">"other"</span>&gt;&lt;Link to=<span class="string">"Login"</span> &gt;登陆&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在上面代码中，注册使用了register接口，注意需要fetch中添加<code>credentials: &#39;include&#39;</code>，因为fetch不会添加cookie到服务器，这个配置就是将cookie添加保存到服务器。</p><p><strong> page/Login.js </strong><br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React from <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link &#125; from <span class="string">'react-router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// components</span></span><br><span class="line"><span class="keyword">import</span> Register from <span class="string">'./Register'</span></span><br><span class="line"><span class="keyword">import</span> Home from <span class="string">'./Home'</span></span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">    getInitialState()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            username : <span class="string">""</span>,</span><br><span class="line">            password : <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    showErr(errStr,box)&#123;</span><br><span class="line">        let that = <span class="keyword">this</span>;</span><br><span class="line">        that.refs.err.innerHTML = errStr;</span><br><span class="line">        box.onchange = function()&#123;</span><br><span class="line">            that.refs.err.innerHTML = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleChange(e)&#123;</span><br><span class="line">        <span class="keyword">var</span> newState = &#123;&#125;;</span><br><span class="line">        newState[e.target.name] = e.target.value;</span><br><span class="line">        <span class="keyword">this</span>.setState(newState);</span><br><span class="line">    &#125;,</span><br><span class="line">    contextTypes : &#123;</span><br><span class="line">        router : React.PropTypes.<span class="keyword">object</span></span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick(e)&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state.username == <span class="string">""</span> || <span class="keyword">this</span>.state.username == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.username.focus();</span><br><span class="line">            <span class="keyword">this</span>.showErr(<span class="string">"用户名不能为空"</span>,<span class="keyword">this</span>.refs.username);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.state.password == <span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.password.focus();</span><br><span class="line">            <span class="keyword">this</span>.showErr(<span class="string">"密码不能为空"</span>,<span class="keyword">this</span>.refs.password);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            let <span class="keyword">data</span> = &#123;</span><br><span class="line">                <span class="string">"uname"</span> : <span class="keyword">this</span>.state.username,</span><br><span class="line">                <span class="string">"upwd"</span> : <span class="keyword">this</span>.state.password</span><br><span class="line">            &#125;</span><br><span class="line">            fetch(<span class="string">'/login'</span>,&#123;</span><br><span class="line">                method : <span class="string">"post"</span>,</span><br><span class="line">                credentials: <span class="string">'include'</span>,</span><br><span class="line">                headers : &#123;</span><br><span class="line">                    <span class="string">'Content-Type'</span> : <span class="string">'application/json'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                body : JSON.stringify(<span class="keyword">data</span>)</span><br><span class="line">            &#125;).then((res) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(res.ok)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.refs.err.innerHTML = <span class="string">"登陆成功！"</span>;</span><br><span class="line">                    <span class="keyword">this</span>.context.router.push(<span class="string">"/"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(res.status == <span class="number">404</span>)&#123;</span><br><span class="line">                        <span class="keyword">this</span>.refs.username.focus();</span><br><span class="line">                        <span class="keyword">this</span>.showErr(<span class="string">"用户名不存在！"</span>,<span class="keyword">this</span>.refs.username);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.status == <span class="number">403</span>)&#123;</span><br><span class="line">                        <span class="keyword">this</span>.refs.password.focus();</span><br><span class="line">                        <span class="keyword">this</span>.showErr(<span class="string">"密码错误"</span>,<span class="keyword">this</span>.refs.password);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">this</span>.showErr(<span class="string">"登陆失败"</span>,<span class="keyword">this</span>.refs.username);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,(err) =&gt; &#123;</span><br><span class="line">                <span class="keyword">this</span>.showErr(<span class="string">"登陆失败"</span>,<span class="keyword">this</span>.refs.username);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"box"</span>&gt;</span><br><span class="line">                &lt;form action=<span class="string">"login"</span> method=<span class="string">"POST"</span>&gt;</span><br><span class="line">                    &lt;h2&gt;登录页&lt;/h2&gt;</span><br><span class="line">                    &lt;ul&gt;</span><br><span class="line">                        &lt;li&gt;&lt;input name=<span class="string">"username"</span> ref=<span class="string">"username"</span> value=&#123;<span class="keyword">this</span>.state.username&#125; placeholder=<span class="string">"请输入用户名"</span> type=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;input name=<span class="string">"password"</span> ref=<span class="string">"password"</span> value=&#123;<span class="keyword">this</span>.state.password&#125; placeholder=<span class="string">"请输入密码"</span> type=<span class="string">"password"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;input name=<span class="string">"login"</span> ref=<span class="string">"login"</span> value=<span class="string">"登录"</span> type=<span class="string">"submit"</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125; className=<span class="string">"box_btn"</span> /&gt; &lt;/li&gt;</span><br><span class="line">                        &lt;li&gt;&lt;p ref=<span class="string">"err"</span> className=<span class="string">"err"</span>&gt;&lt;/p&gt;&lt;/li&gt; </span><br><span class="line">                    &lt;/ul&gt;                  </span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">                &lt;ul className=<span class="string">"go"</span>&gt;</span><br><span class="line">                    &lt;li className=<span class="string">"other"</span>&gt;&lt;Link to=<span class="string">"/"</span> &gt;主页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                    &lt;li className=<span class="string">"other"</span>&gt;&lt;Link to=<span class="string">"Register"</span> &gt;注册&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong> components/Header.js </strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass (&#123;</span><br><span class="line">    contextTypes : &#123;</span><br><span class="line">        router : React.PropTypes.object</span><br><span class="line">    &#125;,</span><br><span class="line">    logout(e)&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; exitLogin &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        fetch(<span class="string">"/logout"</span>,&#123;</span><br><span class="line">            method : <span class="string">"post"</span>,</span><br><span class="line">            credentials: <span class="string">'include'</span>,</span><br><span class="line">            header : &#123;</span><br><span class="line">                <span class="string">"Content-Type"</span> : <span class="string">"application/json"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(res.ok)&#123;</span><br><span class="line">                exitLogin();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;header&gt;</span><br><span class="line">                &lt;h1&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>基于React实现的前后端分离图片上传系统<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">                &lt;nav&gt;                     </span><br><span class="line">                    &#123; <span class="keyword">this</span>.props.user != <span class="string">""</span> ? <span class="keyword">this</span>.renderLoginedBtn() : <span class="keyword">this</span>.renderNotLoginBtn() &#125;</span><br><span class="line">                &lt;<span class="regexp">/nav&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>header&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;,</span><br><span class="line">    renderNotLoginBtn() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/Login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">"/Register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    renderLoginedBtn(name) &#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;ul&gt;    </span></span><br><span class="line"><span class="regexp">                &lt;li&gt;&lt;p className="name"&gt;&#123;this.props.user&#125;&lt;/</span>p&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">onClick</span>=<span class="string">&#123;this.logout&#125;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure></p><p>在上面代码中，需要根据登录与否修改状态，如已登录，显示用户名。</p><p><strong> components/Upload.js </strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">    contextTypes : &#123;</span><br><span class="line">        router : React.PropTypes.object</span><br><span class="line">    &#125;,</span><br><span class="line">    handleUpload(e) &#123;</span><br><span class="line">        <span class="keyword">let</span> isAllImage = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">let</span> &#123; uploadFuc &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="comment">//判断是否都是图片</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> <span class="keyword">this</span>.refs.upload.files)&#123;</span><br><span class="line">            <span class="keyword">let</span> _type = val.type;</span><br><span class="line">            <span class="keyword">if</span>(!_type.includes(<span class="string">"image"</span>))&#123;</span><br><span class="line">                isAllImage = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">this</span>.showErr(<span class="string">"只能上传图片"</span>,<span class="number">3000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全是图片</span></span><br><span class="line">        <span class="keyword">if</span>(isAllImage)&#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.formupload.submit();</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                location.reload();</span><br><span class="line">            &#125;,<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    showErr(errStr,time)&#123;</span><br><span class="line">        <span class="keyword">this</span>.refs.err.innerHTML = errStr;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.err.innerHTML = <span class="string">""</span>;</span><br><span class="line">        &#125;,time)</span><br><span class="line">    &#125;,</span><br><span class="line">    uploadForm() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;section className=<span class="string">"col col_left"</span>&gt;</span><br><span class="line">                &lt;div className=<span class="string">"upload_wrap"</span>&gt;</span><br><span class="line">                    &lt;em&gt;上传图片&lt;<span class="regexp">/em&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;form action="/u</span>pload<span class="string">" method="</span>POST<span class="string">" encType="</span>multipart/form-data<span class="string">" role="</span>form<span class="string">" ref="</span>formupload<span class="string">" target="</span>showResult<span class="string">"&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type="</span>file<span class="string">" multiple="</span>multiple<span class="string">" accept="</span>image<span class="comment">/*" ref="upload" name="upload" className="upload" onChange=&#123;this.handleUpload&#125; /&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/form&gt;</span></span><br><span class="line"><span class="comment">                    &lt;p className="err" ref="err"&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">                    &lt;iframe ref="showResult" className="result" name="showResult"&gt;&lt;/iframe&gt;</span></span><br><span class="line"><span class="comment">                &lt;/div&gt;</span></span><br><span class="line"><span class="comment">            &lt;/section&gt;</span></span><br><span class="line"><span class="comment">        )</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    render() &#123;</span></span><br><span class="line"><span class="comment">        let &#123; user &#125;  = this.props;</span></span><br><span class="line"><span class="comment">        return user.length &gt; 0 ? this.uploadForm() : (&lt;p&gt;&lt;/p&gt;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br></pre></td></tr></table></figure></p><p>在上面代码中，由于node.js使用了formidable模块，页面中，只需要submit即可。</p><p><strong> components/Images.js </strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</span><br><span class="line">    handleCopy(e)&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> parent = e.target.parentNode,</span><br><span class="line">            item_act_input = parent.querySelector(<span class="string">".item_act_input"</span>),</span><br><span class="line">            range = <span class="built_in">document</span>.createRange();</span><br><span class="line"></span><br><span class="line">        item_act_input.innerHTML = <span class="string">`<span class="subst">$&#123;location.host&#125;</span><span class="subst">$&#123;item_act_input.innerHTML&#125;</span>`</span>;</span><br><span class="line">        range.selectNode(item_act_input);</span><br><span class="line">        <span class="built_in">window</span>.getSelection().addRange(range);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> copy = <span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>);</span><br><span class="line">        alert(<span class="string">"复制成功"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleDelete(e)&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="keyword">var</span> num = e.target.getAttribute(<span class="string">"data-id"</span>),</span><br><span class="line">            url = <span class="string">"/deleteImages"</span>,</span><br><span class="line">            parents = e.target.parentNode.parentNode,</span><br><span class="line">            token = <span class="keyword">this</span>.props.token;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> isDelete = confirm(<span class="string">"确定删除这张图片吗？"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isDelete)&#123;</span><br><span class="line">            fetch(url,&#123;</span><br><span class="line">                method : <span class="string">"POST"</span>,</span><br><span class="line">                credentials: <span class="string">'include'</span>,</span><br><span class="line">                headers : &#123;</span><br><span class="line">                    <span class="string">'Content-Type'</span> : <span class="string">'application/json'</span>,</span><br><span class="line">                    <span class="string">'X-CSRF-Token'</span>: token</span><br><span class="line">                &#125;,</span><br><span class="line">                body : <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">                    num : num</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(res.ok)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.refs.imgbox.removeChild(parents);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; imageList &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> imageList.length &lt;= <span class="number">0</span> ? (<span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">"col col_right"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span>) : (</span><br><span class="line">            &lt;section className=<span class="string">"col col_right"</span>&gt;</span><br><span class="line">                &lt;ul ref=<span class="string">"imgbox"</span>&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        imageList.map( <span class="function">(<span class="params">image, i</span>) =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> (</span><br><span class="line">                                &lt;li key=&#123;i&#125; className=<span class="string">"item"</span>&gt;</span><br><span class="line">                                    &lt;div className=<span class="string">"item_img"</span>&gt;</span><br><span class="line">                                        &lt;img src=&#123;image.imgUrl&#125; alt=&#123;image.name&#125;/&gt;</span><br><span class="line">                                    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                                    &lt;div className="item_desc"&gt;</span></span><br><span class="line"><span class="regexp">                                        &lt;p&gt;&#123;image.name&#125;&lt;/</span>p&gt;</span><br><span class="line">                                    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                                    &lt;div className="item_act"&gt;</span></span><br><span class="line"><span class="regexp">                                        &lt;p className="hide item_act_input" &gt;&#123;image.imgUrl&#125;&lt;/</span>p&gt;</span><br><span class="line">                                        &lt;a href=&#123;image.imgUrl&#125; className=<span class="string">"item_act_copy"</span>  onClick=&#123;<span class="keyword">this</span>.handleCopy&#125;&gt;复制链接&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">                                        &lt;a href=&#123;image.imgUrl&#125; target="_blank" &gt;打开&lt;/</span>a&gt;</span><br><span class="line">                                        &lt;a href=&#123;image.imgUrl&#125; onClick=&#123;<span class="keyword">this</span>.handleDelete&#125; data-id=&#123;i&#125; &gt;删除&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">                                    &lt;/</span>div&gt;</span><br><span class="line">                                &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                            )</span></span><br><span class="line"><span class="regexp">                        &#125;)</span></span><br><span class="line"><span class="regexp">                    &#125;</span></span><br><span class="line"><span class="regexp">                &lt;/u</span>l&gt;</span><br><span class="line">            &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure></p><p>在上面的代码中，通过父级组件的props获取全部的图片，进行遍历渲染出来。</p><p>到这里，已经完成全部的功能，可以通过<code>npm run start:prod</code>启动项目，通过<a href="localhost:9990" target="_blank" rel="noopener">localhost:9990</a>预览项目。<br>需要代码的可移步至Github:<a href="https://github.com/ggstudy-ddup/react-pic-uploader/tree/master/demo" target="_blank" rel="noopener">源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;为了能够更好地掌握react、nodejs、webpack等知识，开始这个基于react+nodejs+mongodb+webpack+re
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>讲讲ECMAScript 6那些事</title>
    <link href="http://zengzoe.github.io/2016/09/15/%E8%AE%B2%E8%AE%B2es6%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://zengzoe.github.io/2016/09/15/讲讲es6那些事/</id>
    <published>2016-09-14T17:56:43.000Z</published>
    <updated>2018-06-04T12:47:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript 6（下面简称ES6）已于2015年6月正式发布，它提供的许多新的语法特性，将会成为Javascript语言新的标准。</p><p>ES6发布至今，许多浏览器的最新版本对ES6大部分特性都实现了,但是没有浏览器对ES6全部特性能够完美的支持,可以通过<a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">http://kangax.github.io/compat-table/es6/</a>查看浏览器的支持情况。如果想要更好的体验ES6的新特性和新语法，可以使用转换器，将ES6转换成ES5。</p><p>ES6的出现，给前端开发者们带来不一样的体验，使用ES6可以更加方便的实现很多复杂的功能，提高前端开发者的效率。这篇博客将会介绍ES6比较常用的语法特性，希望能够给大家带来收获。在线测试代码可以点击<a href="http://babeljs.cn/repl/" target="_blank" rel="noopener">这里</a>。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p> <strong> <a href="#var">1.let和const</a> </strong><br> <strong> <a href="#arrow">2.箭头函数</a> </strong><br> <strong> <a href="#string">3.字符串</a> </strong><br> <strong> <a href="#deconstruct">4.解构赋值</a> </strong><br> <strong> <a href="#parameter">5.函数参数</a> </strong><br> <strong> <a href="#class">6.类 class</a> </strong><br> <strong> <a href="#symbols">7.Symbols</a> </strong><br> <strong> <a href="#for">8.for…of循环</a> </strong><br> <strong> <a href="#setAndMap">9.Set和Map数据解构</a> </strong><br> <strong> <a href="#promise">10.Promise</a> </strong><br> <strong> <a href="#generators">11.Generators生成器</a> </strong></p><hr><h2 id="1-let和const"><a href="#1-let和const" class="headerlink" title="1.let和const"></a><span id="var">1.let和const</span></h2><p><code>let</code>和<code>const</code>是ES6新增的声明变量的命令。使用方法与<code>var</code>相似，不过<code>let</code>和<code>const</code>声明的变量只能在所在的代码块使用，也就是块级作用域。</p><p><strong> <code>Const</code> </strong><br><code>const</code>即constant，用来声明只读的常量，一旦声明就必须赋值，声明常量之后不可赋值，但是可以继续添加属性。<br>（1）<code>const</code>声明常量时必须赋值，否则报错：<br><figure class="highlight capnproto"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Pi;  // Missing initializer <span class="keyword">in</span> <span class="keyword">const</span> declaration</span><br></pre></td></tr></table></figure></p><p>（2）由于<code>const</code>声明的Pi是常量，如果初始化后对其赋值，则报错：<br><figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Pi</span> = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">Pi</span> = <span class="number">3</span>;     //Assignment <span class="keyword">to</span> constant variable.</span><br></pre></td></tr></table></figure></p><p>（3）常量<code>obj</code>是一个对象，可以对其添加属性，但不可以再次赋值：<br><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">const obj = &#123;&#125;<span class="comment">;</span></span><br><span class="line">obj.name = <span class="string">"张三"</span><span class="comment">;</span></span><br><span class="line">console.log(obj)<span class="comment">;           // &#123;name: "张三"&#125;</span></span><br><span class="line"><span class="attribute">obj</span> = &#123;&#125;<span class="comment">;              //Assignment to constant variable.</span></span><br></pre></td></tr></table></figure></p><p><strong> <code>let</code> </strong><br><code>let</code>其与<code>var</code>相似，它们的不同体现在三点：<br>（1）不存在变量提升<br>使用<code>var</code>：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getStr</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arg) &#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">'hello world'</span>;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(getStr(<span class="literal">false</span>));  <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><p>使用<code>let</code>:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"hello"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStr</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arg) &#123;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">'hello world'</span>;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getStr(<span class="literal">false</span>));  <span class="comment">//hello</span></span><br></pre></td></tr></table></figure></p><p>第一个例子中，由于if内声明的变量会被提升到函数头部，所以返回了undefined。第二个例子由于let声明的变量不会发生变量提升，if内声明的变量只能在当前所在的代码块使用，所以直接返回hello。</p><p>（2）暂时性死区<br><code>let</code>声明的变量只能在代码块中使用，同时必须在声明后才能使用，否则会报错,这就是暂时性死区。<br><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">str</span>);       <span class="comment">//ReferenceError: str is not defined</span></span><br><span class="line">    <span class="built_in">let</span> <span class="built_in">str</span> = <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>let</code>命令声明str之前，上面的代码都属于str的”死区”。<br>如果将上面的<code>let</code>变成<code>var</code>,则返回undefined：<br><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">str</span>);       <span class="comment">//undefined</span></span><br><span class="line">    var <span class="built_in">str</span> = <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（3）不允许重复声明<br><code>let</code>不允许在相同的作用域内，重复声明同一个变量。而<code>var</code>重复声明变量，则后面的变量会覆盖前面声明的变量。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">"world"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(str); <span class="comment">//SyntaxError: Identifier 'str' has already been declared</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因此，对于<code>const</code>、<code>let</code>和<code>var</code>三个命令，当想要定义常量的时候可以选择<code>const</code>。当声明一个变量赋值后还会修改的可以选择<code>let</code>或<code>var</code>，当使用于循环计数或者算法，建议优先选择<code>let</code>。</p><hr><h2 id="2-箭头函数"><a href="#2-箭头函数" class="headerlink" title="2.箭头函数"></a><span id="arrow">2.箭头函数</span></h2><p>当我们使用闭包的时候，函数内部的this总是发生改变，不能指向我们所预期的对象。而箭头函数的出现，正是可以让函数里面this指向预期的对象。另外，箭头函数的出现，还可以让我们的代码量大大减少。<br>箭头函数即使用箭头“=&gt;”定义函数，用法如下：<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">let result = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(i=&gt;i*i);</span><br></pre></td></tr></table></figure></p><p>箭头的左边是输入的参数，右边是进行的操作以及返回的值。<br>上面代码等同于es5：<br><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">let rusult = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(<span class="function"><span class="keyword">function</span><span class="params">(i)</span>&#123;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">i</span>*<span class="built_in">i</span>;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><p>从上两段代码中可以看出，箭头函数在一定程度上可以减少代码量，使得我们的代码更加简洁。<br>（1）如果函数不需要参数或者需要多个参数，需使用用圆号。<br><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">let result = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">let result2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(<span class="function"><span class="params">(i,item)</span>=&gt;</span><span class="built_in">console</span>.log(i:item));</span><br></pre></td></tr></table></figure></p><p>（2）如果箭头右边执行多行命令，则需使用大括号,并使用return返回。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].map(<span class="function"><span class="params">i</span>=&gt;</span>&#123;<span class="keyword">return</span> i*i;&#125;)</span><br></pre></td></tr></table></figure></p><p>（3）如果返回的是对象，则需在大括号外层添加中括号。<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">let result = <span class="selector-tag">i</span> =&gt; (&#123;id :<span class="selector-tag">i</span> ,name : <span class="string">"cici"</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>（4）可代替立即执行函数。<br><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">x</span> =&gt; x*2)(<span class="name">3</span>)<span class="comment">;      //6</span></span><br></pre></td></tr></table></figure></p><p>（5）在箭头函数，<code>this</code>指向的是定义时所在的对象，而不是使用时所在的对象。<br>例子：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = data.name;</span><br><span class="line">    <span class="keyword">this</span>.age = data.ag;</span><br><span class="line">    <span class="keyword">this</span>.getInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" "</span> + <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dudu = <span class="keyword">new</span> Person(&#123;</span><br><span class="line">    name : <span class="string">"dudu"</span>,</span><br><span class="line">    age : <span class="number">20</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dudu.getInfo();       <span class="comment">//dudu 20</span></span><br><span class="line">dudu.sayHello();      <span class="comment">//windows</span></span><br></pre></td></tr></table></figure></p><p>在超时调用的代码都是在全局作用于中执行，所以函数中的<code>this</code>的值指向了window对象。而箭头函数可以保持作用域，保证<code>this</code>的指向不会变:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = data.name;</span><br><span class="line">    <span class="keyword">this</span>.age = data.age;</span><br><span class="line">    <span class="keyword">this</span>.getInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" "</span> + <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>),<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dudu = <span class="keyword">new</span> Person(&#123;</span><br><span class="line">    name : <span class="string">"dudu"</span>,</span><br><span class="line">    age : <span class="number">20</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dudu.getInfo();               <span class="comment">//dudu 20</span></span><br><span class="line">dudu.sayHello();             <span class="comment">//Person &#123;name: "dudu", age: 20&#125;</span></span><br></pre></td></tr></table></figure></p><p>在sayHello函数中，使用了箭头函数，当前作用域是在person对象的一个方法中，箭头函数生成的临时函数的作用域也就是person对象的作用域。</p><hr><h2 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3.字符串"></a><span id="string">3.字符串</span></h2><p>在ES6中，添加了许多对于字符串的接口，使得更加的便利地去处理字符串。<br><strong> (1) 模版字符串 </strong><br>以前我们需要拼接字符串跟变量时，需要使用“+”进行拼接。而模板字符串的出现可以让变量嵌入到字符串中，可以让代码变得更加简单。同时，模板字符串还可保留换行符空白符，可以让字符串的定义更加方便。</p><p><strong> a.可以在字符串中是使用变量 </strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"dudu"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`my name is <span class="subst">$&#123;name&#125;</span>,i am <span class="subst">$&#123;age&#125;</span> years old`</span>);     <span class="comment">// "my name is dudu,i am 20 years old"</span></span><br></pre></td></tr></table></figure></p><p>在模版字符串中，使用<code>${}</code>包含变量。也可在变量进行算法运算或执行函数等操作。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`5加10等于<span class="subst">$&#123;a+b&#125;</span>，5乘10等于<span class="subst">$&#123;a*b&#125;</span>`</span>)    <span class="comment">//5加10等于15，5乘10等于50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`5加10等于<span class="subst">$&#123;add(a,b)&#125;</span>`</span>)           <span class="comment">//5加10等于15</span></span><br></pre></td></tr></table></figure></p><p><strong> b.字符串换行符空白符被保留 </strong><br>在ES6之前：<br><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">str</span> = <span class="string">"hi,"</span></span><br><span class="line">          + <span class="string">"i am dudu"</span> </span><br><span class="line">          + <span class="string">"i am 20 years old"</span>;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>);           <span class="comment">//hi,i am dudui am 20 years old</span></span><br></pre></td></tr></table></figure></p><p>ES6：<br><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str2 = `hi,</span><br><span class="line">            i am dudu,</span><br><span class="line">            i am <span class="number">20</span> years old`;</span><br><span class="line">console.log(str2);</span><br><span class="line"><span class="comment">//hi,</span></span><br><span class="line"><span class="comment">//i am dudu,</span></span><br><span class="line"><span class="comment">// i am 20 years old</span></span><br></pre></td></tr></table></figure></p><p>通过上面的示例可以看出，模版字符串的出现给字符串的使用带了很大的便利。</p><p><strong>（2）includes、startsWith、endsWith </strong><br>之前我们是通过<code>indexOf</code>来判断字符串是否包含某个字符串：<br><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">str</span> = <span class="string">"hello world"</span>;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.indexOf(<span class="string">"o"</span>)&gt;-<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>而在ES6中，增加了三个新方法的进行检索。<br><code>includes</code>判断字符串是否包含某字符串，返回布尔值。<br><code>startsWith</code>判断字符串是否以某字符串开头，返回布尔值。<br><code>endsWith</code>判断字符串是否以某字符串结尾，返回布尔值。<br><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">let <span class="built_in">str</span> = <span class="string">"hello world"</span>;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.includes(<span class="string">"wor"</span>));       <span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.startsWith(<span class="string">"he"</span>));       <span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.endsWith(<span class="string">"ld"</span>));       <span class="comment">//true</span></span><br><span class="line">  </span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.includes(<span class="string">"llo"</span>,<span class="number">1</span>));         <span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.includes(<span class="string">"llo"</span>,<span class="number">5</span>));        <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.startsWith(<span class="string">"llo"</span>,<span class="number">2</span>));        <span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.startsWith(<span class="string">"llo"</span>,<span class="number">3</span>));        <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.endsWith(<span class="string">"llo"</span>,<span class="number">5</span>));        <span class="comment">//true</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.endsWith(<span class="string">"llo"</span>,<span class="number">9</span>));        <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>在上面代码中，加入了第二个参数。<code>includes</code>和<code>startsWith</code>的第二个参数代表搜索的开始位置。而<code>endsWith</code>代表了只搜索字符串的前几位。</p><p><strong> (3) repeat </strong><br><code>repeat</code>方法用来返回重复多次的字符串。<br><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">str</span> = <span class="string">"abc"</span>;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.repeat(<span class="number">2</span>));         <span class="comment">// "abcabc"</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.repeat(<span class="string">"3"</span>));         <span class="comment">// "abcabc"</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.repeat(<span class="string">"2.8"</span>));        <span class="comment">// "abcabc"</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.repeat(<span class="string">"a"</span>));           <span class="comment">// ""   </span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.repeat());              <span class="comment">// ""</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.repeat(<span class="number">0</span>));              <span class="comment">// ""</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.repeat(-<span class="number">1</span>));            <span class="comment">// 报错：  Uncaught RangeError: Invalid count value</span></span><br></pre></td></tr></table></figure></p><p><code>repeat</code>参数为重复字符串的次数，如果参数是字符串，则会先转换成数字，否则输出空字符串；如果是小数，则会被去整；如果参数是0或者不添加参数，则返回空字符串；如果是负数，则会报错。</p><hr><h2 id="4-解构赋值"><a href="#4-解构赋值" class="headerlink" title="4.解构赋值"></a><span id="deconstruct">4.解构赋值</span></h2><p>解构赋值可以从数组或对象中提取出值为赋值给不同的变量。<br><strong> （1）数组的解构赋值 </strong><br>ES6之前：<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var arr</span> = [1,2,3];</span><br><span class="line"><span class="attribute">var a</span> = arr[0];</span><br><span class="line"><span class="attribute">var b</span> = arr[1];</span><br><span class="line"><span class="attribute">var c</span> = arr[2];</span><br></pre></td></tr></table></figure></p><p>ES6:<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">let [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">console.log(a,b,c);     <span class="comment">//1 2 3</span></span><br></pre></td></tr></table></figure></p><p>数组的解构赋值按照数据的变量顺序进行赋值。</p><p><strong> （2）对象的解构赋值 </strong><br>ES6之前：<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var obj</span> = &#123;name : <span class="string">"dudu"</span>,age : 20,city : <span class="string">"shenzhen"</span>&#125;;</span><br><span class="line"><span class="attribute">var name</span> = obj.name;</span><br><span class="line"><span class="attribute">var age</span> = obj.age;</span><br><span class="line"><span class="attribute">var city</span> = obj.city;</span><br></pre></td></tr></table></figure></p><p>ES6:<br><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">let &#123;<span class="built_in">name</span>,age,city&#125; = &#123;<span class="built_in">name</span> : <span class="string">"dudu"</span>,age : <span class="number">20</span>,city : <span class="string">"shenzhen"</span>&#125;;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">name</span>,age,city);</span><br></pre></td></tr></table></figure></p><p>对象的解构赋值顺序可以打乱，按照变量名进行赋值。</p><p><strong> （3）字符串的解构赋值 </strong><br>ES6之前：<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var str</span> = <span class="string">"hello"</span>;</span><br><span class="line"><span class="attribute">var a</span> = str[0];</span><br><span class="line"><span class="attribute">var b</span> = str[1];</span><br><span class="line"><span class="attribute">var c</span> = str[2];</span><br><span class="line"><span class="attribute">var d</span> = str[3];</span><br><span class="line"><span class="attribute">var e</span> = str[4];</span><br></pre></td></tr></table></figure></p><p>ES6：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c,d,e] = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c,d,e);        <span class="comment">//h e l l o</span></span><br></pre></td></tr></table></figure></p><p><strong> (4)函数参数的解构赋值 </strong><br>函数参数的解构赋值最大的特点是能够为参数设定默认值。<br>ES6之前：<br><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">function foo(<span class="built_in">name</span>,age)&#123;</span><br><span class="line">    <span class="built_in">name</span> = <span class="built_in">name</span> || <span class="string">"dudu"</span>;</span><br><span class="line">    age = age || <span class="number">20</span>;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">name</span>,age);</span><br><span class="line">&#125;</span><br><span class="line">foo();              <span class="comment">//dudu 20</span></span><br><span class="line">foo(<span class="string">"haha"</span>,<span class="number">21</span>)         <span class="comment">//haha 21</span></span><br></pre></td></tr></table></figure></p><p>ES6:<br><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> foo(&#123;name=<span class="string">"dudu"</span>,age=<span class="number">20</span>&#125; = &#123;&#125;)&#123;</span><br><span class="line">    console.log([name,age]);</span><br><span class="line">&#125;</span><br><span class="line">foo();       //[<span class="string">"dudu"</span>, <span class="number">20</span>]</span><br><span class="line">foo(&#123;&#125;)     //[<span class="string">"dudu"</span>, <span class="number">20</span>]</span><br><span class="line">foo(&#123;name : <span class="string">"cici"</span>&#125;) //[<span class="string">"cici"</span>, <span class="number">20</span>]</span><br><span class="line">foo(&#123;age : <span class="number">22</span>&#125;); //[<span class="string">"dudu"</span>, <span class="number">22</span>]</span><br><span class="line">foo(&#123;name : <span class="string">"cici"</span>,age :<span class="number">22</span>&#125;);//[<span class="string">"cici"</span>, <span class="number">22</span>]</span><br></pre></td></tr></table></figure></p><p>注意下面代码参数的写法与上面代码参数的写法不同：<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">function foo(&#123;name,age&#125; = &#123;<span class="string">name :</span> <span class="string">"dudu"</span>,<span class="string">age :</span> <span class="number">20</span>&#125;)&#123;</span><br><span class="line">    console.log([name,age]);</span><br><span class="line">&#125;</span><br><span class="line">foo();   <span class="comment">//["dudu", 20]</span></span><br><span class="line">foo(&#123;&#125;);         <span class="comment">//[undefined, undefined]</span></span><br><span class="line">foo(&#123;<span class="string">name :</span> <span class="string">"cici"</span>&#125;)     <span class="comment">//["cici", undefined]</span></span><br><span class="line">foo(&#123;<span class="string">age :</span> <span class="number">22</span>&#125;);         <span class="comment">//[undefined, 22]</span></span><br><span class="line">foo(&#123;<span class="string">name :</span> <span class="string">"cici"</span>,<span class="string">age :</span><span class="number">22</span>&#125;);        <span class="comment">//["cici", 22]</span></span><br></pre></td></tr></table></figure></p><p>第一个代码块中，是为参数中对象的每一个名赋值，第二个代码块中是直接为对象赋值。</p><hr><h2 id="5-函数参数"><a href="#5-函数参数" class="headerlink" title="5.函数参数"></a><span id="parameter">5.函数参数</span></h2><p>ES6在函数参数上新增加了默认参数、不定参数等。<br><strong> （1）默认参数 </strong><br>ES6之前：<br><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(x,y)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    x = x || 1;</span></span></span><br><span class="line"><span class="function"><span class="comment">    y = y || 2;</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(x,y)</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">foo</span><span class="params">()</span>;</span>  <span class="comment">//1 2</span></span><br></pre></td></tr></table></figure></p><p>ES6：<br><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(x = 1,y = 2)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log(x,y)</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">foo</span><span class="params">()</span>;</span>  <span class="comment">//1 2</span></span><br></pre></td></tr></table></figure></p><p><strong> (2) 不定参数 </strong><br>ES6中函数的不定参数通过（…变量名）实现，用来获取函数多余的参数。<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(<span class="rest_arg">...value</span>)</span></span>&#123;</span><br><span class="line">    let sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> val of value)&#123;</span><br><span class="line">        sum += val;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(sum);</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br></pre></td></tr></table></figure></p><p>不定参数与arguments的区别是，不定参数中的变量代表的是一个数组，可以使用数组的所有方法，而arguments是类数组，只能用length属性。</p><hr><h2 id="6-类-class"><a href="#6-类-class" class="headerlink" title="6.类 class"></a><span id="class">6.类 class</span></h2><p>ES6为了更接近传统语言的写法，提出了类的写法，作为对象的模版,通过关键字class来定义类。<br>ES6之前：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age,<span class="keyword">this</span>.sex)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ES6:<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,sex)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age ;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    getInfo()&#123;</span><br><span class="line">       console.log(<span class="keyword">this</span>.name,<span class="keyword">this</span>.age,<span class="keyword">this</span>.sex)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上面的代码中，<code>constructor</code>方法就是构造方法。使用的时候直接用<code>new</code>命令,自动调用<code>constructor</code>方法。如果没有显示定义<code>constructor</code>方法，则会自动添加空的<code>constructor</code>。<br><figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person<span class="number">1</span> = <span class="keyword">new</span> Person(<span class="string">"dudu"</span>,<span class="number">20</span>,<span class="string">"women"</span>);</span><br><span class="line">person<span class="number">1</span>.getInfo();  <span class="comment">//dudu 20 women</span></span><br></pre></td></tr></table></figure></p><p>类通过<code>extends</code>关键字进行继承。<br><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    constructor(name,age,sex,school)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age,school);</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line">    getInfo()&#123;</span><br><span class="line">        <span class="keyword">super</span>.getInfo();</span><br><span class="line">        console.log(<span class="keyword">this</span>.school);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p><code>super</code>关键字是用来继承新建父类的<code>this</code>对象，因为子类没有自己的<code>this</code>对象，新建实例的时候会报错。使用<code>super</code>之后，可继承父类的<code>this</code>对象。<br>ES6提出的类实现继承，比ES5通过原型链实现继承要清晰，可以让我们写出更加简洁的代码。</p><hr><h2 id="7-Symbols"><a href="#7-Symbols" class="headerlink" title="7.Symbols"></a><span id="symbols">7.Symbols</span></h2><p><code>symbols</code>是ES6新增的第七种原始数据类型，表示独一无二的值。简单来说，就是用来做标记的方法。<br>用法：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a)           <span class="comment">//symbol</span></span><br></pre></td></tr></table></figure></p><p>上面代码中，通过<code>typeof</code>得出<code>a</code>是<code>symbol</code>数据类型。<br><code>symbol</code>创造出来的符号是独一无二的，因此设置了相同参数<code>symbol</code>函数的返回值是不想等的。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>() === <span class="built_in">Symbol</span>());                     <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>(<span class="string">"a"</span>) === <span class="built_in">Symbol</span>(<span class="string">"a"</span>))                <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p><code>symbol</code>可以用于对象的属性名，由于每个<code>symbol</code>值都是不相等的，所以就可以用来作为标记，就可以保证不会出现相同的属性。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">obj[a] = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj[a]);        <span class="comment">// hello</span></span><br></pre></td></tr></table></figure></p><p>有时候会需要重新使用同一个<code>symbol</code>值，可以使用 <code>symbol.for</code>方法。这个方法会接受一个字符串作为参数，搜索有没有以该参数作为名称的<code>symbol</code>值，如果有，则返回<code>symbol</code>值，否则就新建并返回一个以该字符串为参数的<code>symbol</code>值。<br><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">console.log(<span class="built_in">Symbol</span>.<span class="keyword">for</span>(<span class="string">"a"</span>) === <span class="built_in">Symbol</span>.<span class="keyword">for</span>(<span class="string">"a"</span>))</span><br></pre></td></tr></table></figure></p><p>上面代码中，返回<code>true</code>，说明上面两个的<code>symbol</code>为同一个值。</p><hr><h2 id="8-for…of循环"><a href="#8-for…of循环" class="headerlink" title="8.for…of循环"></a><span id="for">8.for…of循环</span></h2><p><code>for...of</code>是ES6新增的遍历器。可以遍历数组、类数组对象、字符串、对象等。<br>ES6前：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i])      <span class="comment">// a b c d </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ES6:<br><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> <span class="keyword">val</span> <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    console.log(<span class="keyword">val</span>)        <span class="comment">// a b c d</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>遍历数组可以直接获取数组值。<br><strong> entries()、keys()、values() </strong><br><code>entries()</code>、<code>keys()</code>、<code>values()</code>用来遍历数组。<br><code>entries()</code>是对键值对的遍历。<br><code>keys()</code>是对键名的遍历。<br><code>values()</code>是对键值的遍历。<br><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> <span class="keyword">val</span> <span class="keyword">of</span> arr.keys())&#123;</span><br><span class="line">    console.log(<span class="keyword">val</span>);  <span class="comment">// 0,1,2,3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> <span class="keyword">val</span> <span class="keyword">of</span> arr.values())&#123;</span><br><span class="line">    console.log(<span class="keyword">val</span>);      <span class="comment">// a,b,c,d</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [i,<span class="keyword">val</span>] <span class="keyword">of</span> arr.entries())&#123;</span><br><span class="line">    console.log(i,<span class="keyword">val</span>);         <span class="comment">//  0 "a"</span></span><br><span class="line">                                <span class="comment">//  1 "b"</span></span><br><span class="line">                                <span class="comment">//  2 "c"</span></span><br><span class="line">                                <span class="comment">//  3 "d"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="9-Set和Map数据解构"><a href="#9-Set和Map数据解构" class="headerlink" title="9.Set和Map数据解构"></a><span id="setAndMap">9.Set和Map数据解构</span></h2><p><strong> set和WeakSet </strong><br>ES6增添了新的数据结构集<code>set</code>和弱集<code>weakset</code>，类似于数组，但是<code>set</code>和<code>weakset</code>具有元素的唯一性，若添加了已存在的元素，会被自动忽略。<br><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">let <span class="keyword">set</span> = new <span class="comment">Set()</span>;</span><br><span class="line"><span class="keyword">set</span>.add(<span class="string">"hello"</span>).add(<span class="string">"world"</span>).add(<span class="string">"hello"</span>);</span><br><span class="line">console.<span class="built-in">log</span>(<span class="keyword">set</span>.size);          <span class="comment">// 2</span></span><br><span class="line">console.<span class="built-in">log</span>(<span class="keyword">set</span>);           <span class="comment">// Set &#123;"hello", "world"&#125;</span></span><br></pre></td></tr></table></figure></p><p>由于具有元素的唯一性，所以可以利用<code>set</code>来除去数组重复的元素。<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">let arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>];</span><br><span class="line">arr = Array.from(new Set(arr));</span><br><span class="line">console.log(arr);       <span class="comment">//[2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></p><p><code>set</code>的属性：<br><code>size</code>：用来获取<code>set</code>实例的元素个数。<br><code>set</code>的方法有四个：<br><code>add</code>：添加实例元素。<br><code>delete</code>：删除某个元素。<br><code>has</code>：判断某个元素是否存在。<br><code>clear</code>：清除所有元素。<br><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">let <span class="keyword">set</span> = new <span class="comment">Set()</span>;</span><br><span class="line"><span class="keyword">set</span>.add(<span class="string">"hello"</span>).add(<span class="string">"world"</span>).add(<span class="string">"hello"</span>);</span><br><span class="line">console.<span class="built-in">log</span>(<span class="keyword">set</span>.size);          <span class="comment">// 2</span></span><br><span class="line">console.<span class="built-in">log</span>(<span class="keyword">set</span>);           <span class="comment">// Set &#123;"hello", "world"&#125;</span></span><br><span class="line"></span><br><span class="line">console.<span class="built-in">log</span>(<span class="keyword">set</span>.has(<span class="string">"world"</span>));          <span class="comment">// ture</span></span><br><span class="line"><span class="keyword">set</span>.delete(<span class="string">"world"</span>);</span><br><span class="line">console.<span class="built-in">log</span>(<span class="keyword">set</span>.has(<span class="string">"world"</span>));          <span class="comment">//false</span></span><br><span class="line"><span class="keyword">set</span>.clear()</span><br><span class="line">console.log(<span class="keyword">set</span>);       <span class="comment">//Set &#123;&#125;</span></span><br></pre></td></tr></table></figure></p><p><code>weakset</code>是弱集，与<code>set</code>相比，它能够检查元素的变量引用情况，如果元素的引用已被全部解除，则该元素就会删除，可以节省空间内存。另外，<code>weakset</code>的成员只能是对象。<br><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">let weakset = <span class="keyword">new</span> WeakSet();</span><br><span class="line">weakset.<span class="built_in">add</span>(<span class="string">"hello"</span>);           <span class="comment">// TypeError: Invalid value used in weak set</span></span><br><span class="line"></span><br><span class="line">let <span class="built_in">str</span> = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"hello"</span>);</span><br><span class="line">weakset.<span class="built_in">add</span>(<span class="built_in">str</span>);</span><br><span class="line">console.<span class="built_in">log</span>(weakset.has(<span class="built_in">str</span>));           <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p><strong> map和weakmap </strong><br><code>map</code>和<code>weakmap</code>则与原本的<code>object</code>相似，都是<code>key/value</code>的键值对结构，但是<code>object</code>的<code>key</code>值必须是字符串或数字，而<code>map</code>可以使用任何对象作为<code>key</code>值。<br><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">map</span> = <span class="literal">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123; name : <span class="string">"dudu"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">set</span>(obj,<span class="string">'hello'</span>);</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">set</span>(<span class="string">'hello'</span>,<span class="string">'world'</span>);</span><br><span class="line">console.<span class="keyword">log</span>(<span class="built_in">map</span>);  <span class="comment">//Map &#123;Object &#123;name: "dudu"&#125; =&gt; "hello", "hello" =&gt; "world"&#125;</span></span><br><span class="line">console.<span class="keyword">log</span>(<span class="built_in">map</span>.size);           <span class="comment">//2</span></span><br><span class="line">console.<span class="keyword">log</span>(<span class="built_in">map</span>.has(obj));       <span class="comment">// true</span></span><br><span class="line">console.<span class="keyword">log</span>(<span class="built_in">map</span>.get(<span class="string">"hello"</span>));  <span class="comment">// world</span></span><br></pre></td></tr></table></figure></p><p><code>set</code>的属性和方法：<br><code>size</code>：用来获取<code>map</code>实例的元素个数。<br><code>set</code>：用来设置<code>key</code>对应的键值。<br><code>get</code>：用来获取<code>key</code>对应的键值。<br><code>delete</code>：删除某个键。<br><code>has</code>：判断某个键是否存在。<br><code>clear</code>：清除所有键。<br><code>weakmap</code>和<code>weakset</code>相似，但是<code>weakmap</code>会检查键和值，只要其中一个的引用全被解除，则该键值对就会被删除。<br><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">map</span> = <span class="literal">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">let</span> obj = &#123; name : <span class="string">"dudu"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">set</span>(obj,<span class="string">'hello'</span>);</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">set</span>(<span class="string">'hello'</span>,<span class="string">'world'</span>);</span><br><span class="line">console.<span class="keyword">log</span>(<span class="built_in">map</span>.has(obj));      <span class="comment">//true</span></span><br><span class="line">obj = <span class="built_in">null</span>; </span><br><span class="line">console.<span class="keyword">log</span>(<span class="built_in">map</span>.has(obj));      <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="10-promise"><a href="#10-promise" class="headerlink" title="10.promise"></a><span id="promise">10.promise</span></h2><p>ES6新添的<code>promise</code>是可以用来解决回调函数无限嵌套的工具，也就是可以获取异步操作的消息，进行相应的处理。<br><code>promise</code>的状态变化有两种：从<code>pending</code>未完成到<code>resolved</code>成功和<code>pending</code>未完成到<code>rejected</code>失败，一旦这两个状态任一发生了，就会进行下一步操作。<br>用法：<br>（1）创建一个promise实例，参数为一个函数，向该函数的传入两个参数分别为<code>resolve</code>和<code>reject</code>。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="comment">/*成功*/</span>)&#123;</span><br><span class="line">        resolve(value);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></p><p><code>resolve</code>函数是当<code>promise</code>对象的状态从<code>pending</code>未完成到<code>resolved</code>成功时，进行的异步操作。<br><code>reject</code>函数是当<code>promise</code>对象的状态从<code>pending</code>未完成到<code>rejected</code>失败时，进行的异步操作。<br>（2）当<code>promise</code>实例创建好之后，则用<code>then</code>方法分别指定<code>resolve</code>和<code>reject</code>状态的毁掉函数。<br><figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">promise.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(value)</span>&#123;</span></span><br><span class="line">    <span class="comment">//成功</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span><span class="params">(error)</span>&#123;</span></span><br><span class="line">    <span class="comment">//失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><code>then</code>方法中，参入两个函数作为参数，第一个参数是<code>promise</code>对象的状态变成成功<code>resolve</code>时执行的回调函数。第二个参数是<code>promise</code>对象的状态报错<code>reject</code>时执行的回调函数。<br>也可以通过<code>catch</code>方法进行<code>reject</code>状态的回调函数。<br><figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">promise.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(value)</span>&#123;</span></span><br><span class="line">    <span class="comment">//成功</span></span><br><span class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(error)</span>&#123;</span></span><br><span class="line">    <span class="comment">//失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>当<code>promise</code>对象的状态变成<code>resolve</code>时，则执行<code>then</code>方法，当<code>promise</code>对象的状态变成<code>reject</code>时，则执行<code>catch</code>方法。</p><p>异步加载图片实例：<br><figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImageAsync</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line"></span><br><span class="line">        image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            resolve(image);</span><br><span class="line">        &#125;;</span><br><span class="line">        image.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'could not load image at '</span> + <span class="built_in">url</span>));</span><br><span class="line">        &#125;;</span><br><span class="line">        image.src = <span class="built_in">url</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadImageAsync(<span class="string">'./images/1.png'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">image</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//success</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//failure</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><hr><h2 id="11-Generators生成器"><a href="#11-Generators生成器" class="headerlink" title="11.Generators生成器"></a><span id="generators">11.Generators生成器</span></h2><p>ES6提供的<code>Generators</code>函数是一种异步编程解决方案，本质上是一个可以暂停计算并且可以随后返回表达式的值的函数。与普通函数相比，<code>Generators</code>有两个不同点：1.定义<code>Generators</code>函数需要在<code>function</code>与函数名之间插入<code>*</code>；2、在函数内部，使用<code>yield</code>语句来切出返回值。<br><code>yield</code>与<code>return</code>相似，但是<code>yield</code>不退出函数，只是在函数运行过程中，通过<code>.next()</code>切出一个值。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloworld</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>斐波那契数列例子：<br>(斐波那契数列：从第三项开始，值为前两项之和，第一二项都为1)<br>(1)构建生成器<br><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">function</span>* Fibo()&#123;</span><br><span class="line">    let [a,<span class="keyword">b] </span>= [<span class="number">1</span>,<span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">    <span class="keyword">yield </span>a<span class="comment">;</span></span><br><span class="line">    <span class="keyword">yield </span><span class="keyword">b;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   <span class="meta">while</span>(true)&#123;</span><br><span class="line">        [a,<span class="keyword">b] </span>= [<span class="keyword">b,a+b];</span></span><br><span class="line"><span class="keyword"> </span>       <span class="keyword">yield </span><span class="keyword">b;</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(2)启动生成器<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">let fibo</span> = Fibo();</span><br></pre></td></tr></table></figure></p><p>(3)运行生成器<br>输出前十项斐波那契数：<br><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">    arr.<span class="keyword">push</span>(fibo.next().value);</span><br><span class="line">&#125;</span><br><span class="line">console.<span class="built_in">log</span>(arr);   <span class="comment">//[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ECMAScript 6（下面简称ES6）已于2015年6月正式发布，它提供的许多新的语法特性，将会成为Javascript语言新的标准。&lt;/p&gt;
&lt;p&gt;ES6发布至今，许多浏览器的最新版本对ES6大部分特性都实现了,但是没有浏览器对ES6全部特性能够完美的支持,可以通过&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用webpack进行es6开发</title>
    <link href="http://zengzoe.github.io/2016/09/09/%E4%BD%BF%E7%94%A8webpack%E8%BF%9B%E8%A1%8Ces6%E5%BC%80%E5%8F%91/"/>
    <id>http://zengzoe.github.io/2016/09/09/使用webpack进行es6开发/</id>
    <published>2016-09-08T21:18:55.000Z</published>
    <updated>2018-06-04T12:47:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于很多浏览器不兼容es6，在使用es6开发过程中需要使用转换器对es6进行转换成es5，从而能够更好的在浏览器运行。在这里，我将会介绍如何使用webpack进行es6的开发，使用的是webpack的babel-loader转换器。</p><h2 id="第一步-创建目录文件"><a href="#第一步-创建目录文件" class="headerlink" title="第一步 创建目录文件"></a>第一步 创建目录文件</h2><p>创建目录如下：<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">/helloworld</span><br><span class="line">    index.js</span><br><span class="line">    hello.js</span><br><span class="line">index.html</span><br><span class="line">webpack<span class="selector-class">.config</span><span class="selector-class">.js</span></span><br></pre></td></tr></table></figure></p><p>helloworld文件中，index.js是入口文件，hello.js是用es6编辑的js文件，index.html是首页，webpack.config.js是配置文件。</p><h2 id="第二步-安装webpack"><a href="#第二步-安装webpack" class="headerlink" title="第二步 安装webpack"></a>第二步 安装webpack</h2><p>通过<code>npm</code>全局安装<code>webpack</code>：<br><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> webpack -g</span><br></pre></td></tr></table></figure></p><h3 id="第三步-编写配置文件"><a href="#第三步-编写配置文件" class="headerlink" title="第三步 编写配置文件"></a>第三步 编写配置文件</h3><p>打开<code>webpack.config.js</code>，编辑如下：<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">var path = require(<span class="string">'path'</span>);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    <span class="string">entry :</span> <span class="string">'./helloworld/index.js'</span>,            <span class="comment">//入口文件</span></span><br><span class="line">    <span class="string">output :</span> &#123;                                  <span class="comment">//输出文件</span></span><br><span class="line">        <span class="string">path :</span> __dirname,</span><br><span class="line">        <span class="string">filename :</span> <span class="string">'bundle.js'</span>                 <span class="comment">//webpack运行完之后将生成一个bundle.js文件，用于将执行文件中的代码导入index.html</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">module :</span> &#123;</span><br><span class="line">        <span class="string">loaders :</span> [                             <span class="comment">//加载器</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">test :</span> path.join(__dirname,<span class="string">'es6'</span>),</span><br><span class="line">                <span class="string">loader :</span> <span class="string">'babel-loader'</span>,        <span class="comment">//使用babel-loader加载器</span></span><br><span class="line">                <span class="string">query :</span> &#123;</span><br><span class="line">                    <span class="string">presets :</span> [<span class="string">'es2015'</span>]       <span class="comment">//使用es2015转码规则</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="第四步-安装loaders"><a href="#第四步-安装loaders" class="headerlink" title="第四步 安装loaders"></a>第四步 安装loaders</h2><p>安装<code>babel-loader</code>:<br><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span><span class="keyword">babel-loader </span>--save-dev</span><br></pre></td></tr></table></figure></p><p>安装转码规则：<br><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span><span class="keyword">babel-preset-es2015 </span>--save-dev</span><br></pre></td></tr></table></figure></p><h2 id="第五步-编写代码"><a href="#第五步-编写代码" class="headerlink" title="第五步 编写代码"></a>第五步 编写代码</h2><ul><li>helloworld/hello.js: </li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    say()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`我是<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>,我今年<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>岁了`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello;</span><br></pre></td></tr></table></figure><ul><li>helloworld/index.js</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Person <span class="keyword">from</span> <span class="string">'./hello.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'Zoe'</span>,<span class="number">20</span>);</span><br><span class="line"><span class="built_in">document</span>.write(p.say());</span><br></pre></td></tr></table></figure><ul><li>index.html</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第六步-运行"><a href="#第六步-运行" class="headerlink" title="第六步 运行"></a>第六步 运行</h2><p>在命令行中，直接输入<code>webpack</code>就能运行：<br><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">webpack</span></span><br></pre></td></tr></table></figure></p><p>在大型项目中，可以添加一个颜色进度跳便于查看参数：<br><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">webpack</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">progress</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">colors</span></span><br></pre></td></tr></table></figure></p><p>也可以使用watch来监视文件的变化：<br><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">webpack <span class="comment">--watch</span></span><br></pre></td></tr></table></figure></p><p>所以最后可以使用如下命令运行：<br><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">webpack</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">progress</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">colors</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">watch</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于很多浏览器不兼容es6，在使用es6开发过程中需要使用转换器对es6进行转换成es5，从而能够更好的在浏览器运行。在这里，我将会介绍如何使用webpack进行es6的开发，使用的是webpack的babel-loader转换器。&lt;/p&gt;
&lt;h2 id=&quot;第一步-创建目录
      
    
    </summary>
    
    
  </entry>
  
</feed>
